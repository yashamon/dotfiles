!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/yasha/dotfiles/scripts/	//
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
rotate	autorotate	/^function rotate {$/;"	f
key	gcuts	/^key = "org.gnome.settings-daemon.plugins.media-keys custom-keybindings"$/;"	v
subkey1	gcuts	/^subkey1 = key.replace(" ", ".")[:-1]+":"$/;"	v
item_s	gcuts	/^item_s = "\/"+key.replace(" ", "\/").replace(".", "\/")+"\/"$/;"	v
firstname	gcuts	/^firstname = "custom"$/;"	v
get	gcuts	/^get = lambda cmd: subprocess.check_output(["\/bin\/bash", "-c", cmd]).decode("utf-8")$/;"	f
array_str	gcuts	/^array_str = get("gsettings get "+key)$/;"	v
command_result	gcuts	/^command_result = array_str.lstrip("@as")$/;"	v
current	gcuts	/^current = eval(command_result)$/;"	v
n	gcuts	/^n = 1$/;"	v
new	gcuts	/^    new = item_s+firstname+str(n)+"\/"$/;"	v
n	gcuts	/^        n = n+1$/;"	v
cmd0	gcuts	/^cmd0 = 'gsettings set '+key+' "'+str(current)+'"'$/;"	v
cmd1	gcuts	/^cmd1 = 'gsettings set '+subkey1+new+" name '"+sys.argv[1]+"'"$/;"	v
cmd2	gcuts	/^cmd2 = 'gsettings set '+subkey1+new+" command '"+sys.argv[2]+"'"$/;"	v
cmd3	gcuts	/^cmd3 = 'gsettings set '+subkey1+new+" binding '"+sys.argv[3]+"'"$/;"	v
EOF	lf-ueberzug-cleaner	/^cat <<EOF | paste -sd '' >"$LF_UEBERZUG_TEMPDIR\/fifo"$/;"	h
myfile	lualatexscript.ps1	/^$myfile=(Get-item $args[-1]).BaseName$/;"	v
mypdfstring	lualatexscript.ps1	/^$mypdfstring=$myfile+".pdf"$/;"	v
mylogstring	lualatexscript.ps1	/^$mylogstring=$myfile+".log"$/;"	v
sync	lualatexscript.ps1	/^$sync=$myfile+".synctex.gz"$/;"	v
tmp	lfcd.ps1	/^$tmp = [System.IO.Path]::GetTempFileName()$/;"	v
lf	lfcd.ps1	/^$lf=(which lf)+" last-dir-path="+"$tmp"+" $args"$/;"	v
dir	lfcd.ps1	/^    $dir = Get-Content "$tmp"$/;"	v
preview	lf-ueberzug-previewer	/^preview() {$/;"	f
EOF	lf-ueberzug-previewer	/^	cat <<-EOF | paste -sd '' >"$LF_UEBERZUG_TEMPDIR\/fifo"$/;"	h
op	rotx	/^from os import path as op$/;"	x	nameref:unknown:path
bdopen	rotx	/^def bdopen(fname):$/;"	f
read	rotx	/^def read(fname):$/;"	f
devices	rotx	/^devices = check_output(['xinput', '--list', '--name-only']).splitlines()$/;"	v
touchscreen_names	rotx	/^touchscreen_names = ['touchscreen', 'wacom']$/;"	v
touchscreens	rotx	/^touchscreens = [i for i in devices if any(j in i.lower() for j in touchscreen_names)]$/;"	v
disable_touchpads	rotx	/^disable_touchpads = False$/;"	v
touchpad_names	rotx	/^touchpad_names = ['touchpad', 'trackpoint']$/;"	v
touchpads	rotx	/^touchpads = [i for i in devices if any(j in i.lower() for j in touchpad_names)]$/;"	v
scale	rotx	/^scale = float(read('in_accel_scale'))$/;"	v
g	rotx	/^g = 7.0  # (m^2 \/ s) sensibility, gravity trigger$/;"	v
STATES	rotx	/^STATES = [$/;"	v
rotate	rotx	/^def rotate(state):$/;"	f
read_accel	rotx	/^def read_accel(fp):$/;"	f
accel_x	rotx	/^    accel_x = bdopen('in_accel_x_raw')$/;"	v
accel_y	rotx	/^    accel_y = bdopen('in_accel_y_raw')$/;"	v
current_state	rotx	/^    current_state = None$/;"	v
x	rotx	/^        x = read_accel(accel_x)$/;"	v
y	rotx	/^        y = read_accel(accel_y)$/;"	v
current_state	rotx	/^                current_state = i$/;"	v
a	remote.ps1	/^$a=$args[0]$/;"	v
b	remote.ps1	/^$b=$args[1]$/;"	v
var	remote.ps1	/^$var=(cat ~\/servername.txt)$/;"	v
e	remote.ps1	/^$e="nvim --server " + "$var" + " --remote-send " + ':' +$/;"	v
a	gheto.ps1	/^$a=$args[0]$/;"	v
rotate_ms	rotatesway	/^function rotate_ms {$/;"	f
rotate	rotatesway	/^function rotate {$/;"	f
cleanup	lf-ueberzug	/^cleanup() {$/;"	f
