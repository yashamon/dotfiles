1:  if [[ -r "  XDG CACHE HOME:- HOME/.
cache /p10k-instant-prompt-  ( ):- n .
zsh" ]]; then 2:  source "  XDG CACHE HOME:- HOME/.
cache /p10k-instant-prompt-  ( ):- n .
zsh" 3:  fi  4:   5:  export MOZ ENABLE WAYLAND=1 firefox 6:   7:   8:   9:  bindkey -rpM viins ' e' 10:  eval " (fasd --init auto)" 11:  # 12:   13:  # alias nvim="/snap/bin/nvim"    14:  # alias uapp="~/appimage/AppImageUpdate" 15:  alias rot="xrandr -o"  16:  alias p="paru" 17:  alias wifi="sudo wifi-menu -o"  18:  alias mod="xmodmap ~/.
Xmodmap" 19:  alias tmux d="tmux detach"  20:  alias svi="/snap/bin/nvim" 21:   22:  alias swrc="cd ~/.
config/sway/ nvr config"   23:  alias lfrc="cd ~/.
config/lf; nvr lfrc" 24:  # alias ls="lf"  25:  alias texi="pdflatex -file-line-error -synctex=1  -interaction=nonstopmode -recorder"  26:  alias latexi="latexmk -g -pdf -file-line-error -synctex=1  -interaction=nonstopmode -recorder -f" 27:  alias pvc="latexmk -pdf -pvc -file-line-error -synctex=1  -interaction=nonstopmode -recorder -f" 28:  alias lat="latexmk -pvc -pdf -file-line-error -synctex=1 -interaction=nonstopmode -recorder -f -g" 29:   30:  alias pushmod="git submodule foreach git add .
; git submodule foreach git commit -m -a;  31:  git submodule foreach git push origin master; git add .
; git commit -m -a; git push --all origin " 32:  alias push="git add .
; git commit -m -a; git push --all origin" 33:  alias pull="git pull --recurse-submodules; git submodule update --recursive --remote" 34:  alias pullmaster="git pull --recurse-submodules; git submodule update --recursive --remote; git submodule foreach git checkout master; git submodule foreach git pull --all" 35:  alias check="git checkout"  36:  alias pushgh="pandoc index.
md > index.
html ; git add .
; git commit -m -a; git push origin gh-pages" 37:  alias pandocd="pandoc index.
md > index.
html" 38:   39:  # <<<<<<< HEAD 40:  # alias hw="pandoc ~/web/classes/topology/topology2019.
md > ~/web/classes/topology/topology2019.
html; pandoc ~/web/CalcIII2019/analysis.
md > ~/web/CalcIII2019/analysis.
html; git add .
; git commit -m -a; git push origin gh-pages" 41:  # ======= 42:  alias hw="pandoc ~/web/classes/CalcIII/2021.
md > ~/web/classes/CalcIII/2021.
html; pandoc ~/web/classes/topology/topology2021.
md  > ~/web/classes/topology/topology2021.
html; cd ~/web; git add . 
42:++++ ;git commit -m -a; git push origin gh-pages" 43:  alias attach="tmux attach" 44:  # alias pdf="xpdf -geometry 1920x1080 -fullscreen" 45:  # alias pdf="mupdf" 46:   alias pdf="zathura" 47:  alias vnc="vncserver -kill :1; vncserver -geometry 1920x1080 :1" 48:  # alias vnc="vncserver -kill :3; vncserver -geometry 1600x2560 :1" 49:  alias drop="python ~/download?dl=packages 2Fdropbox.
py" 50:  alias j="z" 51:  # alias fzf="/root/dotfiles vim bundle fzf" 52:  alias pcm="sudo pacman" 53:  alias spcm="sudo pacman" 54:  alias zrc="cd ~/dotfiles; nvr zshrc" 55:  alias pac="sudo packer" 56:  alias cprc="cp /root/.
zshrc /home/yasha/.
zshrc" 57:  alias pacup="packer -Syu --devel" 58:  # alias vifm='source ~/bin/vf' 59:  alias vrc="cd ~/.
config/nvim; nvr init.
vim"  60:  alias snips="vi /root/dotfiles/vim/bundle/vim-snippets/UltiSnips/tex.
snippets" 61:  alias src="source ~/.
zshrc" 62:  #alias mux="tmux -f ~/.
tmux-conf" 63:  alias bib="j bib ; vi link.
bib" 64:  alias suya="su yasha; a" 65:  alias vis="rm /tmp/nvimsocket ; NVIM LISTEN ADDRESS=/tmp/nvimsocket nvim"  66:  # alias go= pslatex document.
tex; dvips document.
dvi; ps2pdf document.
ps 67:  alias suru="su root; a" 68:  alias rec="recoll -q" 69:  alias vi="nvim"    70:  alias ping="ping www.
google.
com" 71:  alias gone=" HOME/.
local/bin/goneovim"  72:  alias neo=" HOME/.
local/bin/goneovim" 73:  alias neov="neovide --frameless --maximized --multigrid" 74:  alias update="git submodule update --init --recursive ; git pull origin master" 75:  alias res="xrandr --newmode "1920x1080 60.
00"  173.
00  1920 2048 2248 2576  1080 1083 1088 1120; xrandr --addmode eDP-1 "1920x1080 60.
00"; 76:  xrandr -s 1920x1080" 77:   78:  alias res2="xrandr --newmode "1920x1080 144.
00"  452.
50  1920 2088 2296 2672  1080 1083 1088 1177; xrandr --addmode Virtual-1 "1920x1080 144.
00"; 79:  xrandr -s 1920x1080" 80:  alias res3="xrandr --newmode "3440x1440 100.
00"  728.
00  3440 3728 4104 4768  1440 1443 1453 1527 -hsync +vsync; xrandr --addmode HDMI-1 "3440x1440.
100.
00"; 81:  xrandr -s 3440x1440 82:  " 83:  alias config="cd ~/dotfiles/; push; cd ~/workspacemodules; pushmod; cd ~/workspace; push; cd web pushgh; pacman -Qqe >  HOME/dotfiles/pkglist.
txt" 84:  # alias apt="sudo apt-get install" 85:  # functions  86:  # alias nvr="" 87:  nvr()   88:     if !nvr --servername  (<~/servername.
txt) --remote-silent;  89:    then gonevim " 1" 90:  fi 91:    92:  alias nvr=nvr() 93:   94:  gitcommitwithmessage()   95:      #do things with parameters like  1 such as 96:      git add .
@??? 97:      git commit -m " 1" 98:      git push origin master 99:        100:  alias message=gitcommitwithmessage 101:  brightnessfunction() 102:    103:      #do things with parameters like  1 such as 104:  xrandr --output eDP-1 --brightness  1  105:        106:  alias bright=brightnessfunction 107:   108:   109:  sendFunction()   110:  cwdb= (pwd) 111:  cd ~/web 112:  git pull 113:  git rm ~/web/papers/" 1"  114:  git add .
@??? 115:  git commit -m -a 116:  git push origin gh-pages 117:  cd  cwdb 118:  cp " 1" ~/web/papers 119:  cd ~/web 120:  git add .
@??? 121:  git commit -m -a 122:  git push origin gh-pages 123:  cd  cwdb 124:    125:  alias pulse="pulseaudio -k 126:  pulseaudio --start" 127:  alias send=sendFunction 128:  alias tff="xinput disable 13" 129:  alias ton="xinput enable 13" 130:  alias ubuntu="sudo apt-get update; sudo apt-get upgrade" 131:   132:  # set dual monitors 133:  dual ()   134:      xrandr --output eDP-1 --primary --left-of HDMI-1 --output HDMI-1 --auto 135:    136:   137:  # set single monitor 138:  single ()   139:      xrandr --output HDMI-1 --off 140:    141:  export KEYTIMEOUT=1 142:   143:  # alias vim="nvim" 144:  # export ZSH= HOME/.
oh-my-zsh 145:  # # Set name of the theme to load.
@??? 146:  # # Look in ~/.
oh-my-zsh/themes/ 147:  # # Optionally, if you set this to "random", it'll load a random theme each 148:  # # # time that oh-my-zsh is loaded.
@??? 149:  # ZSH THEME="sorin" 150:  # # robbyrussell 151:  # # Uncomment the following line to use case-sensitive completion.
@??? 152:  # # CASE SENSITIVE="true" 153:  # 154:  # # Uncomment the following line to disable bi-weekly auto-update checks.
@??? 155:  # # DISABLE AUTO UPDATE="true" 156:  # 157:  # # Uncomment the following line to change how often to auto-update (in days).
@??? 158:  # # export UPDATE ZSH DAYS=13 159:  # 160:  # # Uncomment the following line to disable colors in ls.
@??? 161:  # # DISABLE LS COLORS="true" 162:  # 163:  # # Uncomment the following line to disable auto-setting terminal title.
@??? 164:  # # DISABLE AUTO TITLE="true" 165:  # 166:  # # Uncomment the following line to enable command auto-correction.
@??? 167:  # # ENABLE CORRECTION="true" 168:  # 169:  # # Uncomment the following line to display red dots whilst waiting for completion.
@??? 170:  # # COMPLETION WAITING DOTS="true" 171:  # 172:  # # Uncomment the following line if you want to disable marking untracked files 173:  # # under VCS as dirty. 
173:++++ This makes repository status check for large repositories 174:  # # much, much faster.
@??? 175:  # # DISABLE UNTRACKED FILES DIRTY="true" 176:  # 177:  # # Uncomment the following line if you want to change the command execution time 178:  # # stamp shown in the history command output.
@??? 179:  # # The optional three formats: "mm/dd/yyyy"|"dd.
mm.
yyyy"|"yyyy-mm-dd" 180:  # # HIST STAMPS="mm/dd/yyyy" 181:  # 182:  # # Would you like to use another custom folder than  ZSH/custom? 183:  # # Which plugins would you like to load? (plugins can be found in ~/.
oh-my-zsh/plugins/*) 184:  # # Custom plugins may be added to ~/.
oh-my-zsh/custom/plugins/ 185:  # # Example format: plugins=(rails git textmate ruby lighthouse) 186:  # # Add wisely, as too many plugins slow down shell startup.
@??? 187:  # # Ensures that  terminfo values are valid and updates editor information when 188:  # # # the keymap changes.
@??? 189:  # 190:  # 191:  # 192:  # 193:  # #  terminfo down sc= terminfo[cud1] terminfo[cuu1] terminfo[sc] terminfo[cud1] 194:  # # 195:  # #  function zle-line-init zle-keymap-select   196:  # #      PS1 2="    KEYMAP/vicmd/-- NORMAL -- /(main|viins)/-- INSERT -- " 197:  # #         PS1="   terminfo down sc PS1 2 terminfo[rc]   ~  # " 198:  # #             zle reset-prompt 199:  # #            200:  # #          preexec ()   print -rn --  terminfo[el];   201:  # #          zle -N zle-line-init 202:  # #          zle -N zle-keymap-select 203:  # # 204:  #  205:  #  206:  # source  ZSH/oh-my-zsh.
sh 207:  # 208:  # # User configuration 209:  # 210:  # plugins=(git autojump vi-mode command-not-found github history-substring-search) 211:  # 212:  # # You may need to manually set your language environment 213:  # # export LANG=en US.
UTF-8 214:  # 215:  # # Preferred editor for local and remote sessions 216:  # # if [[ -n  SSH CONNECTION ]]; then 217:  # #   export EDITOR='vim' 218:  # # else 219:  # #   export EDITOR='mvim' 220:  # # fi 221:  # 222:  # # Compilation flags 223:  # # export ARCHFLAGS="-arch x86 64" 224:  # 225:  # # ssh 226:  # # export SSH KEY PATH="~/.
ssh/dsa id" 227:  # 228:  # # Set personal aliases, overriding those provided by oh-my-zsh libs, 229:  # # plugins, and themes. 
229:++++ Aliases can be placed here, though oh-my-zsh 230:  # # users are encouraged to define aliases within the ZSH CUSTOM folder.
@??? 231:  # # For a full list of active aliases, run `alias`.
@??? 232:  # # 233:  # # Example aliases 234:  # # alias zshconfig="mate ~/.
zshrc" 235:  # # alias ohmyzsh="mate ~/.
oh-my-zsh" 236:  # alias sudo='sudo ' 237:   238:  [ -f ~/.
fzf.
zsh ] && source ~/.
fzf.
zsh 239:  alias chmodWork sudo chmod -R ~/workspacemodules 240:  export DISPLAY=:0.
0 241:  alias wq='wmctrl -r 'Alacritty' -b toggle,fullscreen' 242:   243:  # VBoxClient-all 244:  # xrdb -merge ~/.
Xresources 245:  # setxkbmap -option caps:escape  246:  # xsetroot -cursor name left ptr &xmodmap -e "remove control = Control R" -e "add Mod3 = Control R" & 247:   248:  # To customize prompt, run `p10k configure` or edit ~/.
p10k.
zsh.
@??? 249:  [[ ! -f ~/.
p10k.
zsh ]] || source ~/.
p10k.
zsh 250:  typeset -g POWERLEVEL9K INSTANT PROMPT=quiet 251:   252:  ### Added by Zinit's installer 253:  if [[ ! -f  HOME/.
zinit/bin/zinit.
zsh ]]; then 254:      print -P " F 33 ▓▒░  F 220 Installing  F 33 DHARMA F 220  Initiative Plugin Manager ( F 33 zdharma/zinit F 220 )… f" 255:      command mkdir -p " HOME/.
zinit" && command chmod g-rwX " HOME/.
zinit" 256:      command git clone https://github.
com/zdharma-continuum/zinit " HOME/.
zinit/bin" &&   257:          print -P " F 33 ▓▒░  F 34 Installation successful. 
f b" ||   258:          print -P " F 160 ▓▒░ The clone has failed. 
f b" 259:  fi 260:   261:  source " HOME/.
zinit/bin/zinit.
zsh" 262:  autoload -Uz  zinit 263:  ((   + comps  )) &&  comps[zinit]= zinit 264:   265:  # Load a few important annexes, without Turbo 266:  # (this is currently required for annexes) 267:  # zinit light-mode for   268:      # zinit-zsh/z-a-rust   269:      # zinit-zsh/z-a-as-monitor   270:      # zinit-zsh/z-a-patch-dl   271:      # zinit-zsh/z-a-bin-gem-node 272:  zinit for   273:      light-mode  zsh-users/zsh-autosuggestions   274:      light-mode  zdharma-continuum/fast-syntax-highlighting   275:           zdharma-continuum/history-search-multi-word   276:      light-mode depth"1"   277:                  romkatv/powerlevel10k  278:  zinit light softmoth/zsh-vim-mode    279:  zinit ice wait'0' 280:  zinit light kutsan/zsh-system-clipboard 281:  zinit light wookayin/fzf-fasd 282:  zinit ice wait'0' 283:  zinit ice light b4b4r07/enhancd 284:  # zinit ice wait'0' 285:  # zinit light wfxr/forgit 286:  zinit ice wait"0b" lucid atload'bindkey " terminfo[kcuu1]" history-substring-search-up; bindkey " terminfo[kcud1]" history-substring-search-down' 287:  zinit light zsh-users/zsh-history-substring-search 288:  bindkey ' [[A' history-substring-search-up 289:  bindkey ' [[B' history-substring-search-down 290:  bindkey -M vicmd 'k' history-substring-search-up 291:  bindkey -M vicmd 'j' history-substring-search-down 292:   293:  bindkey -M vicmd '<right>' autosuggest-accept  294:  bindkey -M vicmd 'E' autosuggest-execute 295:   296:  zinit ice from"gh-r" as"program" bpick"*appimage*" ver"nightly" mv"nvim* ->  HOME/appimage/nvim" pick"nvim" 297:  zinit light neovim/neovim   298:   299:  zinit ice from"gh-r" as"program" bpick"*appimage*" ver"continuous" mv"AppImageUpdate* ->  HOME/appimage/update" pick"update" 300:  zinit light AppImage/AppImageUpdate  301:   302:   303:   304:  #programs 305:  # zinit ice from"gh-r" as"program" 306:  # zinit light clvv/fasd 307:  # 308:   # zinit snippet OMZ::plugins/history-substring-search/history-substring-search.
plugin.
zsh 309:  # zinit snippet OMZ::plugins/vi-mode/vi-mode.
plugin.
zsh 310:  zinit ice wait'0' lucid atload"unalias d" 311:  zinit snippet OMZ::plugins/fasd/fasd.
plugin.
zsh   312:  zinit ice lucid wait 313:  zinit snippet OMZP::fzf 314:  # zinit light jeffreytse/zsh-vi-mode 315:   316:  # 317:  bindkey -rpM viins ' e' 318:  # 319:  #  zinit from:OMZL 320:  # zinit load ohmyzsh/ohmyzsh/tree/master/plugins/vi-mode 321:  # 322:  # zinit "zsh-users/zsh-history-substring-search" 323:  # zinit "b4b4r07/enhancd", use:init.
sh 324:  # zinit "romkatv/powerlevel10k", as:theme, depth:1 325:  # zinit "softmoth/zsh-vim-mode" 326:  # zinit "zsh-users/zsh-autosuggestions", defer:2 327:  # zinit "zsh-users/zsh-syntax-highlighting", defer:2 328:  # zinit "wookayin/fzf-fasd" 329:  # zinit "plugins/git", from:oh-my-zsh 330:  # zinit "plugins/vi", from:oh-my-zsh 331:   332:   333:   334:  ### End of Zinit's installer chunk 335:  # vi-append-x-selection ()   RBUFFER= (xclip -o -p </dev/null) RBUFFER;   336:  # zle -N vi-append-x-selection 337:  # bindkey -a ' X' vi-append-x-selection 338:  # vi-yank-x-selection ()   print -rn --  CUTBUFFER | xclip -i -p;   339:  # zle -N vi-yank-x-selection 340:  # bindkey -a ' Y' vi-yank-x-selection 341:   342:  # function x11-clip-wrap-widgets()   343:  #     # NB: Assume we are the first wrapper and that we only wrap native widgets 344:  #     # See zsh-autosuggestions.
zsh for a more generic and more robust wrapper 345:  #     local copy or paste= 1 346:  #     shift 347:  #  348:  #     for widget in  @; do 349:  #         # Ugh, zsh doesn't have closures 350:  #         if [[  copy or paste == "copy" ]]; then 351:  #             eval " 352:  #             function  x11-clip-wrapped- widget()   353:  #                 zle . 
widget 354:  #                 xclip -in -selection clipboard <<<  CUTBUFFER 355:  #               356:  #             " 357:  #         else 358:  #             eval " 359:  #             function  x11-clip-wrapped- widget()   360:  #                 CUTBUFFER=  (xclip -out -selection clipboard) 361:  #                 zle . 
widget 362:  #               363:  #             " 364:  #         fi 365:  #  366:  #         zle -N  widget  x11-clip-wrapped- widget 367:  #     done 368:  #   369:  #  370:  #  371:  # local copy widgets=( 372:  #     vi-yank vi-yank-eol  373:  # ) 374:  # local paste widgets=( 375:  #     vi-put- before,after  376:  # ) 377:  #  378:  # # NB: can atm. 
378:++++ only wrap native widgets 379:  # x11-clip-wrap-widgets copy  copy widgets 380:  # x11-clip-wrap-widgets paste   paste widgets   381:   382:  MODE CURSOR VIINS="#00ff00 blinking bar" 383:  MODE CURSOR REPLACE=" MODE CURSOR VIINS #ff0000" 384:  MODE CURSOR VICMD="green block" 385:  MODE CURSOR SEARCH="#ff00ff steady underline" 386:  MODE CURSOR VISUAL="white block" 387:  MODE CURSOR VLINE=" MODE CURSOR VISUAL #00ffff" 388:   389:   390:  # lf stuff 391:   392:   zlf()   393:      emulate -L zsh 394:      local d= (mktemp -d) || return 1 395:        396:          mkfifo -m 600  d/fifo || return 1 397:          tmux split -bf zsh -c "exec  ZLE FIFO > d/fifo; export ZLE FIFO; exec lf" || return 1 398:          local fd 399:          exec  fd < d/fifo 400:          zle -Fw  fd  zlf handler 401:        always   402:          rm -rf  d 403:        404:    405:  zle -N  zlf 406:  bindkey ' ek'  zlf 407:   408:   zlf handler()   409:      emulate -L zsh 410:      local line 411:      if ! read -r line <& 1; then 412:          zle -F  1 413:          exec  1 <&- 414:          return 1 415:      fi 416:      eval  line 417:      zle -R 418:    419:  zle -N  zlf handler  420:  # Appends every command to the history file once it is executed 421:  setopt inc append history 422:  # Reloads the history whenever you use it 423:  setopt share history 424:  setopt banghist   425:  setopt correct                                                  # Auto correct mistakes 426:  setopt extendedglob                                             # Extended globbing. 
426:++++ Allows using regular expressions with * 427:  setopt nocaseglob                                               # Case insensitive globbing 428:  setopt rcexpandparam                                            # Array expension with parameters 429:  setopt nocheckjobs                                              # Don't warn about running processes when exiting 430:  setopt numericglobsort                                          # Sort filenames numerically when it makes sense 431:  setopt nobeep                                                   # No beep 432:  setopt appendhistory                                            # Immediately append history instead of overwriting 433:  setopt histignorealldups                                        # If a new command is a duplicate, remove the older one 434:  setopt autocd                                           435:  unsetopt BEEP 436:  setopt glob 437:  setopt GLOB COMPLETE 438:  setopt auto cd 439:  set shellopts '-euy' 440:  setopt INC APPEND HISTORY 441:  setopt hist ignore all dups 442:  setopt HIST REDUCE BLANKS 443:  setopt HIST VERIFY 444:  setopt CORRECT 445:  setopt CORRECT ALL 446:  HISTFILE=~/dotfiles/zsh history 447:  HISTSIZE=10000 448:  SAVEHIST=10000 449:  setopt appendhistory  450:  zstyle ':completion:*:manuals'    separate-sections true 451:  zstyle ':completion:*:manuals.
*'  insert-sections   true 452:  zstyle ':completion:*:man:*'      menu yes select 453:  # setxkbmap -option caps:escape  454:  # # xmodmap -e "keycode 133 = Escape"    455:  # xmodmap -e "keycode 37 = Control L"    456:  # xmodmap -e "keycode 151 = Control L"   457:  # xmodmap -e "remove control = Control R" -e "add Mod3 = Control R" 458:  # bindkey '" C-o":"lfcd C-m"' 459:  # source ~/.
zplug/init.
zsh 460:  # # # Make sure to use double quotes 461:  #  zplug "zsh-users/zsh-history-substring-search" 462:  #  zplug "b4b4r07/enhancd", use:init.
sh 463:  #  zplug "romkatv/powerlevel10k", as:theme, depth:1 464:  #  zplug "softmoth/zsh-vim-mode" 465:  #  zplug "zsh-users/zsh-autosuggestions", defer:2 466:  #  # zplug "zsh-users/zsh-syntax-highlighting", defer:2 467:  # #  zplug "https://github.
com/clvv/fasd.
git", as:program 468:  #  zplug "wookayin/fzf-fasd" 469:  #  zplug "plugins/git", from:oh-my-zsh 470:  #  zplug "plugins/vi", from:oh-my-zsh 471:  #  zplug "zdharma/fast-syntax-highlighting", defer:2 472:  #  zplug load  473:   # 474:  # 475:  # 476:  # ZSH THEME=powerlevel10k/powerlevel10k 477:  # Uncomment the following line to use case-sensitive completion.
@??? 478:  # CASE SENSITIVE="true" 479:  # Uncomment the following line to disable bi-weekly auto-update checks.
@??? 480:  # DISABLE AUTO UPDATE="true" 481:  # Uncomment the following line to change how often to auto-update (in days).
@??? 482:  # export UPDATE ZSH DAYS=13 483:  # Uncomment the following line to disable colors in ls.
@??? 484:  # DISABLE LS COLORS="true" 485:  # Uncomment the following line to disable auto-setting terminal title.
@??? 486:  # DISABLE AUTO TITLE="true" 487:  # Uncomment the following line to enable command auto-correction.
@??? 488:    # ENABLE CORRECTION="true" 489:  # Uncomment the following line to display red dots whilst waiting for completion.
@??? 490:  #  COMPLETION WAITING DOTS="true" 491:  # Uncomment the following line if you want to disable marking untracked files 492:  # under VCS as dirty. 
492:++++ This makes repository status check for large repositories 493:  # much, much faster.
@??? 494:  # DISABLE UNTRACKED FILES DIRTY="true" 495:  # Uncomment the following line if you want to change the command execution time 496:  # stamp shown in the history command output.
@??? 497:  # The optional three formats: "mm/dd/yyyy"|"dd.
mm.
yyyy"|"yyyy-mm-dd" 498:  # HIST STAMPS="mm/dd/yyyy" 499:  # Would you like to use another custom folder than  ZSH/custom? 500:  # Which plugins would you like to load? (plugins can be found in ~/.
oh-my-zsh/plugins/*) 501:  # Custom plugins may be added to ~/.
oh-my-zsh/custom/plugins/ 502:  # Example format: plugins=(rails git textmate ruby lighthouse) 503:  # Add wisely, as too many plugins slow down shell startup.
@??? 504:  # plugins=(git zsh-syntax-highlighting zsh-autosuggestions zsh-vim-mode command-not-found github history-substring-search fzf-fasd) 505:  # alias nvim="/snap/bin/nvim" 506:  # Compilation flags 507:  # export ARCHFLAGS="-arch x86 64" 508:   509:  # ssh 510:   511:  # Set personal aliases, overriding those provided by oh-my-zsh libs, 512:  # plugins, and themes. 
512:++++ Aliases can be placed here, though oh-my-zsh 513:  # users are encouraged to define aliases within the ZSH CUSTOM folder.
@??? 514:  # For a full list of active aliases, run `alias`.
@??? 515:  # 516:  # Example aliases 517:  # alias zshconfig="mate ~/.
zshrc" 518:  # alias ohmyzsh="mate ~/.
oh-my-zsh" 519:   520:   521:   522:  # bind UP and DOWN arrow keys 523:  # zmodload zsh/terminfo 524:  # bindkey " terminfo[kcuu1]" history-substring-search-up 525:  # bindkey " terminfo[kcud1]" history-substring-search-down 526:  # # 527:  # # # bind P and N for EMACS mode 528:  # # bindkey -M emacs ' P' history-substring-search-up 529:  # # bindkey -M emacs ' N' history-substring-search-down 530:  # # 531:  # # # bind k and j for VI mode 532:  # bindkey -M vicmd 'k' history-substring-search-up 533:  # bindkey -M vicmd 'j' history-substring-search-down 534:  # User configuration 535:  source "  XDG CONFIG HOME:- HOME/.
config /lf-shellcd/lf-shellcd"  536:  fmz()   537:      tmp= (mktemp) 538:      command fmz --cd " tmp" " @" 539:      res= (tail -n 1 " tmp") 540:      if [ -d " res" ] && [ " res" != " PWD" ]; then 541:          echo cd " res" 542:          cd " res" || return 1 543:      fi 544:      rm " tmp" 545:    546:   547:  # Global Variables 548:  export ZSH SYSTEM CLIPBOARD USE WL CLIPBOARD=true 549:  export MANPAGER='nvim +Man!' 550:  export ANDROID HOME=/root/android-sdk-linux 551:  export LANG=en US.
UTF-8 552:  export XDG CONFIG HOME= HOME/.
config 553:  # export MANPATH="/usr/local/man: MANPATH" 554:  # You may need to manually set your language environment 555:  export LANG=en US.
UTF-8   556:  export PATH=" HOME/.
config/sway/modules: HOME/appimage:/home/linuxbrew/.
linuxbrew/bin:/usr/local/bin:/usr/sbin:/sbin:/bin: HOME/.
local/bin:/root/.
cabal/bin:/usr/bin/site perl:/usr/bin/vendor perl:/usr/bin/core perl: HOME/.
cabal/bin:/usr/bin/site perl:/usr/bin/vendor perl:/usr/bin/core perl: HOME/.
local/bin: HOME/.
local/bin/scripts: HOME/.
cargo/bin:/snap/bin:/data/data/com.
termux/files/usr/bin/applets:/data/data/com.
termux/files/usr/bin:bin:/usr/local/sbin:/usr/bin: HOME/.
local/share/nvim/lspinstall: HOME/skia-binaries: HOME/ninja" 557:  if [[ -n  SSH CONNECTION ]]; then 558:     export EDITOR='nvim' 559:   else 560:     export EDITOR='nvim' 561:   fi 562:  export vi="neovide" 563:   564:  if [ -e /home/yasha/.
nix-profile/etc/profile.
d/nix.
sh ]; then . 
564:++++ /home/yasha/.
nix-profile/etc/profile.
d/nix.
sh; fi # added by Nix installer 