1:  if [[ -r "  XDG CACHE HOME:- HOME/.
cache /p10k-instant-prompt-  ( ):- n .
zsh" ]]; then 2:  source "  XDG CACHE HOME:- HOME/.
cache /p10k-instant-prompt-  ( ):- n .
zsh" 3:  fi  4:   5:  export MOZ ENABLE WAYLAND=1 firefox 6:   7:  bindkey -rpM viins ' e' 8:  eval " (fasd --init auto)" 9:  # 10:   11:  # alias nvim="/snap/bin/nvim"    12:  # alias uapp="~/appimage/AppImageUpdate" 13:  alias rot="xrandr -o"   14:  alias fd="fdfind" 15:  alias p="paru" 16:  alias wifi="sudo wifi-menu -o"  17:  alias mod="xmodmap ~/.
Xmodmap" 18:  alias tmux d="tmux detach"  19:  alias svi="/snap/bin/nvim" 20:   21:  alias swrc="cd ~/dotfiles/config/sway/; neo config"  22:  alias lfrc="cd ~/dotfiles/config/lf; neo lfrc" 23:  # alias ls="lf"  24:  alias texi="pdflatex -file-line-error -synctex=1  -interaction=nonstopmode -recorder"  25:  alias latexi="latexmk -g -pdf -file-line-error -synctex=1  -interaction=nonstopmode -recorder -f" 26:  alias pvc="latexmk -pdf -pvc -file-line-error -synctex=1  -interaction=nonstopmode -recorder -f" 27:  alias lat="latexmk -pvc -pdf -file-line-error -synctex=1 -interaction=nonstopmode -recorder -f -g" 28:   29:  alias pushmod="git submodule foreach git add .
; git submodule foreach git commit -m -a;  30:  git submodule foreach git push origin master; git add .
; git commit -m -a; git push --all origin " 31:  alias push="git add .
; git commit -m -a; git push --all origin" 32:  alias pull="git pull --recurse-submodules; git submodule update --recursive --remote" 33:  alias pullmaster="git pull --recurse-submodules; git submodule update --recursive --remote; git submodule foreach git checkout master; git submodule foreach git pull --all" 34:  alias check="git checkout"  35:  alias pushgh="pandoc index.
md > index.
html ; git add .
; git commit -m -a; git push origin gh-pages" 36:  alias pandocd="pandoc index.
md > index.
html" 37:   38:  # <<<<<<< HEAD 39:  # alias hw="pandoc ~/web/classes/topology/topology2019.
md > ~/web/classes/topology/topology2019.
html; pandoc ~/web/CalcIII2019/analysis.
md > ~/web/CalcIII2019/analysis.
html; git add .
; git commit -m -a; git push origin gh-pages" 40:  # ======= 41:  alias hw="pandoc ~/web/classes/Spivak/hw2022.
md > ~/web/classes/Spivak/hw2022.
html; pandoc ~/web/classes/LinearAlgebra/hw2022.
md  > ~/web/classes/LinearAlgebra/hw2022.
html; cd ~/web; git add . 
41:++++ ;git commit -m -a; git push origin gh-pages" 42:  alias attach="tmux attach" 43:  # alias pdf="xpdf -geometry 1920x1080 -fullscreen" 44:  # alias pdf="mupdf" 45:   alias pdf="zathura" 46:  alias vnc="vncserver -kill :1; vncserver -geometry 1920x1080 :1" 47:  # alias vnc="vncserver -kill :3; vncserver -geometry 1600x2560 :1" 48:  alias drop="python ~/download?dl=packages 2Fdropbox.
py" 49:  alias j="z" 50:  # alias fzf="/root/dotfiles vim bundle fzf" 51:  alias pcm="sudo pacman" 52:  alias spcm="sudo pacman" 53:  alias zrc="cd ~/dotfiles; neo zshrc" 54:  alias pac="sudo packer" 55:  alias cprc="cp /root/.
zshrc /home/yasha/.
zshrc" 56:  alias pacup="packer -Syu --devel" 57:  # alias vifm='source ~/bin/vf' 58:  alias vrc="cd ~/dotfiles/config/nvim; neo init.
vim"  59:  alias snips="vi /root/dotfiles/vim/bundle/vim-snippets/UltiSnips/tex.
snippets" 60:  alias src="source ~/.
zshrc" 61:  #alias mux="tmux -f ~/.
tmux-conf" 62:  alias bib="j bib ; vi link.
bib" 63:  alias suya="su yasha; a" 64:  alias vis="rm /tmp/nvimsocket ; NVIM LISTEN ADDRESS=/tmp/nvimsocket nvim"  65:  # alias go= pslatex document.
tex; dvips document.
dvi; ps2pdf document.
ps 66:  alias suru="su root; a" 67:  alias rec="recoll -q" 68:  alias vi="nvim"    69:  alias ping="ping www.
google.
com" 70:  alias gone=" HOME/.
local/bin/goneovim/goneovim"  71:  alias neo=" HOME/.
local/bin/goneovim/goneovim"  72:  alias goneovim=" HOME/.
local/bin/goneovim/goneovim" 73:   74:  alias neov="neovide --frame NONE --maximized --wsl" 75:  # alias update="git submodule update --init --recursive ; git pull origin master" 76:  alias res="xrandr --newmode "1920x1080 60.
00"  173.
00  1920 2048 2248 2576  1080 1083 1088 1120; xrandr --addmode eDP-1 "1920x1080 60.
00"; 77:  xrandr -s 1920x1080" 78:   79:  alias res2="xrandr --newmode "1920x1080 144.
00"  452.
50  1920 2088 2296 2672  1080 1083 1088 1177; xrandr --addmode Virtual-1 "1920x1080 144.
00"; 80:  xrandr -s 1920x1080" 81:  alias res3="xrandr --newmode "3440x1440 100.
00"  728.
00  3440 3728 4104 4768  1440 1443 1453 1527 -hsync +vsync; xrandr --addmode HDMI-1 "3440x1440.
100.
00"; 82:  xrandr -s 3440x1440 83:  " 84:  alias config="cd ~/dotfiles/; push; cd ~/workspacemodules; pushmod; cd ~/workspace; push; cd web pushgh; pacman -Qqe >  HOME/dotfiles/pkglist.
txt" 85:  # alias apt="sudo apt-get install" 86:  # functions  87:  # alias nvr="" 88:  # nvru()   89:  # if [ -f  1 ]; then 90:  # nvr --nostart --servername   (<~/servername.
txt) --remote  1 > /dev/null 91:  # echo "trying to attach to server"  92:  # echo  ? 93:  # (( ? != 0)) &&  echo "server not running; starting server"; goneovim  1   94:  # else  95:  # echo "wrong file name" 96:  # fi 97:  #   98:   99:  gitcommitwithmessage()   100:      #do things with parameters like  1 such as 101:      git add .
@??? 102:      git commit -m " 1" 103:      git push origin master 104:        105:  alias message=gitcommitwithmessage 106:  brightnessfunction() 107:    108:      #do things with parameters like  1 such as 109:  xrandr --output eDP-1 --brightness  1  110:        111:  alias bright=brightnessfunction 112:   113:   114:  sendFunction()   115:  cwdb= (pwd) 116:  cd ~/web 117:  git pull 118:  git rm ~/web/papers/" 1"  119:  git add .
@??? 120:  git commit -m -a 121:  git push origin gh-pages 122:  cd  cwdb 123:  cp " 1" ~/web/papers 124:  cd ~/web 125:  git add .
@??? 126:  git commit -m -a 127:  git push origin gh-pages 128:  cd  cwdb 129:    130:  alias pulse="pulseaudio -k 131:  pulseaudio --start" 132:  alias send=sendFunction 133:  alias tff="xinput disable 13" 134:  alias ton="xinput enable 13" 135:  alias ubuntu="sudo apt-get update; sudo apt-get upgrade" 136:  alias arch="sudo pacman -Sy archlinux-keyring && pacman -Su" 137:  # set dual monitors 138:  dual ()   139:      xrandr --output eDP-1 --primary --left-of HDMI-1 --output HDMI-1 --auto 140:    141:   142:  # set single monitor 143:  single ()   144:      xrandr --output HDMI-1 --off 145:    146:  export KEYTIMEOUT=1 147:   148:  # alias vim="nvim" 149:  # export ZSH= HOME/.
oh-my-zsh 150:  # # Set name of the theme to load.
@??? 151:  # # Look in ~/.
oh-my-zsh/themes/ 152:  # # Optionally, if you set this to "random", it'll load a random theme each 153:  # # # time that oh-my-zsh is loaded.
@??? 154:  # ZSH THEME="sorin" 155:  # # robbyrussell 156:  # # Uncomment the following line to use case-sensitive completion.
@??? 157:  # # CASE SENSITIVE="true" 158:  # 159:  # # Uncomment the following line to disable bi-weekly auto-update checks.
@??? 160:  # # DISABLE AUTO UPDATE="true" 161:  # 162:  # # Uncomment the following line to change how often to auto-update (in days).
@??? 163:  # # export UPDATE ZSH DAYS=13 164:  # 165:  # # Uncomment the following line to disable colors in ls.
@??? 166:  # # DISABLE LS COLORS="true" 167:  # 168:  # # Uncomment the following line to disable auto-setting terminal title.
@??? 169:  # # DISABLE AUTO TITLE="true" 170:  # 171:  # # Uncomment the following line to enable command auto-correction.
@??? 172:  # # ENABLE CORRECTION="true" 173:  # 174:  # # Uncomment the following line to display red dots whilst waiting for completion.
@??? 175:  # # COMPLETION WAITING DOTS="true" 176:  # 177:  # # Uncomment the following line if you want to disable marking untracked files 178:  # # under VCS as dirty. 
178:++++ This makes repository status check for large repositories 179:  # # much, much faster.
@??? 180:  # # DISABLE UNTRACKED FILES DIRTY="true" 181:  # 182:  # # Uncomment the following line if you want to change the command execution time 183:  # # stamp shown in the history command output.
@??? 184:  # # The optional three formats: "mm/dd/yyyy"|"dd.
mm.
yyyy"|"yyyy-mm-dd" 185:  # # HIST STAMPS="mm/dd/yyyy" 186:  # 187:  # # Would you like to use another custom folder than  ZSH/custom? 188:  # # Which plugins would you like to load? (plugins can be found in ~/.
oh-my-zsh/plugins/*) 189:  # # Custom plugins may be added to ~/.
oh-my-zsh/custom/plugins/ 190:  # # Example format: plugins=(rails git textmate ruby lighthouse) 191:  # # Add wisely, as too many plugins slow down shell startup.
@??? 192:  # # Ensures that  terminfo values are valid and updates editor information when 193:  # # # the keymap changes.
@??? 194:  # 195:  # 196:  # 197:  # 198:  # #  terminfo down sc= terminfo[cud1] terminfo[cuu1] terminfo[sc] terminfo[cud1] 199:  # # 200:  # #  function zle-line-init zle-keymap-select   201:  # #      PS1 2="    KEYMAP/vicmd/-- NORMAL -- /(main|viins)/-- INSERT -- " 202:  # #         PS1="   terminfo down sc PS1 2 terminfo[rc]   ~  # " 203:  # #             zle reset-prompt 204:  # #            205:  # #          preexec ()   print -rn --  terminfo[el];   206:  # #          zle -N zle-line-init 207:  # #          zle -N zle-keymap-select 208:  # # 209:  #  210:  #  211:  # source  ZSH/oh-my-zsh.
sh 212:  # 213:  # # User configuration 214:  # 215:  # plugins=(git autojump vi-mode command-not-found github history-substring-search) 216:  # 217:  # # You may need to manually set your language environment 218:  # # export LANG=en US.
UTF-8 219:  # 220:  # # Preferred editor for local and remote sessions 221:  # # if [[ -n  SSH CONNECTION ]]; then 222:  # #   export EDITOR='vim' 223:  # # else 224:  # #   export EDITOR='mvim' 225:  # # fi 226:  # 227:  # # Compilation flags 228:  # # export ARCHFLAGS="-arch x86 64" 229:  # 230:  # # ssh 231:  # # export SSH KEY PATH="~/.
ssh/dsa id" 232:  # 233:  # # Set personal aliases, overriding those provided by oh-my-zsh libs, 234:  # # plugins, and themes. 
234:++++ Aliases can be placed here, though oh-my-zsh 235:  # # users are encouraged to define aliases within the ZSH CUSTOM folder.
@??? 236:  # # For a full list of active aliases, run `alias`.
@??? 237:  # # 238:  # # Example aliases 239:  # # alias zshconfig="mate ~/.
zshrc" 240:  # # alias ohmyzsh="mate ~/.
oh-my-zsh" 241:  # alias sudo='sudo ' 242:   243:  [ -f ~/.
fzf.
zsh ] && source ~/.
fzf.
zsh 244:  alias chmodWork sudo chmod -R ~/workspacemodules 245:  export DISPLAY=:0.
0 246:  alias wq='wmctrl -r 'Alacritty' -b toggle,fullscreen' 247:   248:  # VBoxClient-all 249:  # xrdb -merge ~/.
Xresources 250:  # setxkbmap -option caps:escape  251:  # xsetroot -cursor name left ptr &xmodmap -e "remove control = Control R" -e "add Mod3 = Control R" & 252:   253:  # To customize prompt, run `p10k configure` or edit ~/.
p10k.
zsh.
@??? 254:  [[ ! -f ~/.
p10k.
zsh ]] || source ~/.
p10k.
zsh 255:  typeset -g POWERLEVEL9K INSTANT PROMPT=quiet 256:   257:  ### Added by Zinit's installer 258:  if [[ ! -f  HOME/.
zinit/bin/zinit.
zsh ]]; then 259:      print -P " F 33 ▓▒░  F 220 Installing  F 33 DHARMA F 220  Initiative Plugin Manager ( F 33 zdharma/zinit F 220 )… f" 260:      command mkdir -p " HOME/.
zinit" && command chmod g-rwX " HOME/.
zinit" 261:      command git clone https://github.
com/zdharma-continuum/zinit " HOME/.
zinit/bin" &&   262:          print -P " F 33 ▓▒░  F 34 Installation successful. 
f b" ||   263:          print -P " F 160 ▓▒░ The clone has failed. 
f b" 264:  fi 265:   266:  source " HOME/.
zinit/bin/zinit.
zsh" 267:  autoload -Uz  zinit 268:  ((   + comps  )) &&  comps[zinit]= zinit 269:   270:  # Load a few important annexes, without Turbo 271:  # (this is currently required for annexes) 272:  # zinit light-mode for   273:      # zinit-zsh/z-a-rust   274:      # zinit-zsh/z-a-as-monitor   275:      # zinit-zsh/z-a-patch-dl   276:      # zinit-zsh/z-a-bin-gem-node 277:  zinit for   278:      light-mode  zsh-users/zsh-autosuggestions   279:      light-mode  zdharma-continuum/fast-syntax-highlighting   280:           zdharma-continuum/history-search-multi-word   281:      light-mode depth"1"   282:                  romkatv/powerlevel10k  283:  zinit light softmoth/zsh-vim-mode    284:  zinit ice wait'0' 285:  zinit light kutsan/zsh-system-clipboard 286:  zinit light wookayin/fzf-fasd 287:  zinit ice wait'0' 288:  zinit ice light b4b4r07/enhancd 289:  # zinit ice wait'0' 290:  # zinit light wfxr/forgit 291:  zinit ice wait"0b" lucid atload'bindkey " terminfo[kcuu1]" history-substring-search-up; bindkey " terminfo[kcud1]" history-substring-search-down' 292:  zinit light zsh-users/zsh-history-substring-search 293:  bindkey ' [[A' history-substring-search-up 294:  bindkey ' [[B' history-substring-search-down 295:  bindkey -M vicmd 'k' history-substring-search-up 296:  bindkey -M vicmd 'j' history-substring-search-down 297:   298:  bindkey -M vicmd '<right>' autosuggest-accept  299:  bindkey -M vicmd 'E' autosuggest-execute 300:   301:  zinit ice from"gh-r" as"program" bpick"*appimage*" ver"nightly" mv"nvim* ->  HOME/appimage/nvim" pick"nvim" 302:  zinit light neovim/neovim   303:   304:  zinit ice from"gh-r" as"program" bpick"*appimage*" ver"continuous" mv"AppImageUpdate* ->  HOME/appimage/update" pick"update" 305:  zinit light AppImage/AppImageUpdate  306:   307:   308:   309:  #programs 310:  # zinit ice from"gh-r" as"program" 311:  # zinit light clvv/fasd 312:  # 313:   # zinit snippet OMZ::plugins/history-substring-search/history-substring-search.
plugin.
zsh 314:  # zinit snippet OMZ::plugins/vi-mode/vi-mode.
plugin.
zsh 315:  zinit ice wait'0' lucid atload"unalias d" 316:  zinit snippet OMZ::plugins/fasd/fasd.
plugin.
zsh   317:  zinit ice lucid wait 318:  zinit snippet OMZP::fzf 319:  # zinit light jeffreytse/zsh-vi-mode 320:   321:  # 322:  bindkey -rpM viins ' e' 323:  # 324:  #  zinit from:OMZL 325:  # zinit load ohmyzsh/ohmyzsh/tree/master/plugins/vi-mode 326:  # 327:  # zinit "zsh-users/zsh-history-substring-search" 328:  # zinit "b4b4r07/enhancd", use:init.
sh 329:  # zinit "romkatv/powerlevel10k", as:theme, depth:1 330:  # zinit "softmoth/zsh-vim-mode" 331:  # zinit "zsh-users/zsh-autosuggestions", defer:2 332:  # zinit "zsh-users/zsh-syntax-highlighting", defer:2 333:  # zinit "wookayin/fzf-fasd" 334:  # zinit "plugins/git", from:oh-my-zsh 335:  # zinit "plugins/vi", from:oh-my-zsh 336:   337:   338:   339:  ### End of Zinit's installer chunk 340:  # vi-append-x-selection ()   RBUFFER= (xclip -o -p </dev/null) RBUFFER;   341:  # zle -N vi-append-x-selection 342:  # bindkey -a ' X' vi-append-x-selection 343:  # vi-yank-x-selection ()   print -rn --  CUTBUFFER | xclip -i -p;   344:  # zle -N vi-yank-x-selection 345:  # bindkey -a ' Y' vi-yank-x-selection 346:   347:  # function x11-clip-wrap-widgets()   348:  #     # NB: Assume we are the first wrapper and that we only wrap native widgets 349:  #     # See zsh-autosuggestions.
zsh for a more generic and more robust wrapper 350:  #     local copy or paste= 1 351:  #     shift 352:  #  353:  #     for widget in  @; do 354:  #         # Ugh, zsh doesn't have closures 355:  #         if [[  copy or paste == "copy" ]]; then 356:  #             eval " 357:  #             function  x11-clip-wrapped- widget()   358:  #                 zle . 
widget 359:  #                 xclip -in -selection clipboard <<<  CUTBUFFER 360:  #               361:  #             " 362:  #         else 363:  #             eval " 364:  #             function  x11-clip-wrapped- widget()   365:  #                 CUTBUFFER=  (xclip -out -selection clipboard) 366:  #                 zle . 
widget 367:  #               368:  #             " 369:  #         fi 370:  #  371:  #         zle -N  widget  x11-clip-wrapped- widget 372:  #     done 373:  #   374:  #  375:  #  376:  # local copy widgets=( 377:  #     vi-yank vi-yank-eol  378:  # ) 379:  # local paste widgets=( 380:  #     vi-put- before,after  381:  # ) 382:  #  383:  # # NB: can atm. 
383:++++ only wrap native widgets 384:  # x11-clip-wrap-widgets copy  copy widgets 385:  # x11-clip-wrap-widgets paste   paste widgets   386:   387:  MODE CURSOR VIINS="#00ff00 blinking bar" 388:  MODE CURSOR REPLACE=" MODE CURSOR VIINS #ff0000" 389:  MODE CURSOR VICMD="green block" 390:  MODE CURSOR SEARCH="#ff00ff steady underline" 391:  MODE CURSOR VISUAL="white block" 392:  MODE CURSOR VLINE=" MODE CURSOR VISUAL #00ffff" 393:   394:   395:  # lf stuff 396:   397:   zlf()   398:      emulate -L zsh 399:      local d= (mktemp -d) || return 1 400:        401:          mkfifo -m 600  d/fifo || return 1 402:          tmux split -bf zsh -c "exec  ZLE FIFO > d/fifo; export ZLE FIFO; exec lf" || return 1 403:          local fd 404:          exec  fd < d/fifo 405:          zle -Fw  fd  zlf handler 406:        always   407:          rm -rf  d 408:        409:    410:  zle -N  zlf 411:  bindkey ' ek'  zlf 412:   413:   zlf handler()   414:      emulate -L zsh 415:      local line 416:      if ! read -r line <& 1; then 417:          zle -F  1 418:          exec  1 <&- 419:          return 1 420:      fi 421:      eval  line 422:      zle -R 423:    424:  zle -N  zlf handler  425:  # Appends every command to the history file once it is executed 426:  setopt inc append history 427:  # Reloads the history whenever you use it 428:  setopt share history 429:  setopt banghist   430:  setopt correct                                                  # Auto correct mistakes 431:  setopt extendedglob                                             # Extended globbing. 
431:++++ Allows using regular expressions with * 432:  setopt nocaseglob                                               # Case insensitive globbing 433:  setopt rcexpandparam                                            # Array expension with parameters 434:  setopt nocheckjobs                                              # Don't warn about running processes when exiting 435:  setopt numericglobsort                                          # Sort filenames numerically when it makes sense 436:  setopt nobeep                                                   # No beep 437:  setopt appendhistory                                            # Immediately append history instead of overwriting 438:  setopt histignorealldups                                        # If a new command is a duplicate, remove the older one 439:  setopt autocd                                           440:  unsetopt BEEP 441:  setopt glob 442:  setopt GLOB COMPLETE 443:  setopt auto cd 444:  set shellopts '-euy' 445:  setopt INC APPEND HISTORY 446:  setopt hist ignore all dups 447:  setopt HIST REDUCE BLANKS 448:  setopt HIST VERIFY 449:  setopt CORRECT 450:  setopt CORRECT ALL 451:  HISTFILE=~/.
zsh history 452:  HISTSIZE=10000 453:  SAVEHIST=10000 454:  setopt appendhistory  455:  zstyle ':completion:*:manuals'    separate-sections true 456:  zstyle ':completion:*:manuals.
*'  insert-sections   true 457:  zstyle ':completion:*:man:*'      menu yes select 458:  # setxkbmap -option caps:escape  459:  # # xmodmap -e "keycode 133 = Escape"    460:  # xmodmap -e "keycode 37 = Control L"    461:  # xmodmap -e "keycode 151 = Control L"   462:  # xmodmap -e "remove control = Control R" -e "add Mod3 = Control R" 463:  # bindkey '" C-o":"lfcd C-m"' 464:  # source ~/.
zplug/init.
zsh 465:  # # # Make sure to use double quotes 466:  #  zplug "zsh-users/zsh-history-substring-search" 467:  #  zplug "b4b4r07/enhancd", use:init.
sh 468:  #  zplug "romkatv/powerlevel10k", as:theme, depth:1 469:  #  zplug "softmoth/zsh-vim-mode" 470:  #  zplug "zsh-users/zsh-autosuggestions", defer:2 471:  #  # zplug "zsh-users/zsh-syntax-highlighting", defer:2 472:  # #  zplug "https://github.
com/clvv/fasd.
git", as:program 473:  #  zplug "wookayin/fzf-fasd" 474:  #  zplug "plugins/git", from:oh-my-zsh 475:  #  zplug "plugins/vi", from:oh-my-zsh 476:  #  zplug "zdharma/fast-syntax-highlighting", defer:2 477:  #  zplug load  478:   # 479:  # 480:  # 481:  # ZSH THEME=powerlevel10k/powerlevel10k 482:  # Uncomment the following line to use case-sensitive completion.
@??? 483:  # CASE SENSITIVE="true" 484:  # Uncomment the following line to disable bi-weekly auto-update checks.
@??? 485:  # DISABLE AUTO UPDATE="true" 486:  # Uncomment the following line to change how often to auto-update (in days).
@??? 487:  # export UPDATE ZSH DAYS=13 488:  # Uncomment the following line to disable colors in ls.
@??? 489:  # DISABLE LS COLORS="true" 490:  # Uncomment the following line to disable auto-setting terminal title.
@??? 491:  # DISABLE AUTO TITLE="true" 492:  # Uncomment the following line to enable command auto-correction.
@??? 493:    # ENABLE CORRECTION="true" 494:  # Uncomment the following line to display red dots whilst waiting for completion.
@??? 495:  #  COMPLETION WAITING DOTS="true" 496:  # Uncomment the following line if you want to disable marking untracked files 497:  # under VCS as dirty. 
497:++++ This makes repository status check for large repositories 498:  # much, much faster.
@??? 499:  # DISABLE UNTRACKED FILES DIRTY="true" 500:  # Uncomment the following line if you want to change the command execution time 501:  # stamp shown in the history command output.
@??? 502:  # The optional three formats: "mm/dd/yyyy"|"dd.
mm.
yyyy"|"yyyy-mm-dd" 503:  # HIST STAMPS="mm/dd/yyyy" 504:  # Would you like to use another custom folder than  ZSH/custom? 505:  # Which plugins would you like to load? (plugins can be found in ~/.
oh-my-zsh/plugins/*) 506:  # Custom plugins may be added to ~/.
oh-my-zsh/custom/plugins/ 507:  # Example format: plugins=(rails git textmate ruby lighthouse) 508:  # Add wisely, as too many plugins slow down shell startup.
@??? 509:  # plugins=(git zsh-syntax-highlighting zsh-autosuggestions zsh-vim-mode command-not-found github history-substring-search fzf-fasd) 510:  # alias nvim="/snap/bin/nvim" 511:  # Compilation flags 512:  # export ARCHFLAGS="-arch x86 64" 513:   514:  # ssh 515:   516:  # Set personal aliases, overriding those provided by oh-my-zsh libs, 517:  # plugins, and themes. 
517:++++ Aliases can be placed here, though oh-my-zsh 518:  # users are encouraged to define aliases within the ZSH CUSTOM folder.
@??? 519:  # For a full list of active aliases, run `alias`.
@??? 520:  # 521:  # Example aliases 522:  # alias zshconfig="mate ~/.
zshrc" 523:  # alias ohmyzsh="mate ~/.
oh-my-zsh" 524:   525:   526:   527:  # bind UP and DOWN arrow keys 528:  # zmodload zsh/terminfo 529:  # bindkey " terminfo[kcuu1]" history-substring-search-up 530:  # bindkey " terminfo[kcud1]" history-substring-search-down 531:  # # 532:  # # # bind P and N for EMACS mode 533:  # # bindkey -M emacs ' P' history-substring-search-up 534:  # # bindkey -M emacs ' N' history-substring-search-down 535:  # # 536:  # # # bind k and j for VI mode 537:  # bindkey -M vicmd 'k' history-substring-search-up 538:  # bindkey -M vicmd 'j' history-substring-search-down 539:  # User configuration 540:  source "  XDG CONFIG HOME:- HOME/.
config /lf-shellcd/lf-shellcd"  541:  fmz()   542:      tmp= (mktemp) 543:      command fmz --cd " tmp" " @" 544:      res= (tail -n 1 " tmp") 545:      if [ -d " res" ] && [ " res" != " PWD" ]; then 546:          echo cd " res" 547:          cd " res" || return 1 548:      fi 549:      rm " tmp" 550:    551:   552:  # Global Variables 553:  export ZSH SYSTEM CLIPBOARD USE WL CLIPBOARD=true 554:  export MANPAGER='nvim +Man!' 555:  export ANDROID HOME=/root/android-sdk-linux 556:  export LANG=en US.
UTF-8 557:  export XDG CONFIG HOME= HOME/.
config 558:  # export MANPATH="/usr/local/man: MANPATH" 559:  # You may need to manually set your language environment 560:  export LANG=en US.
UTF-8   561:  export PATH="/opt: HOME/.
config/sway/modules: HOME/appimage:/home/linuxbrew/.
linuxbrew/bin:/usr/local/bin:/usr/sbin:/sbin:/bin: HOME/.
local/bin:/root/.
cabal/bin:/usr/bin/site perl:/usr/bin/vendor perl:/usr/bin/core perl: HOME/.
cabal/bin:/usr/bin/site perl:/usr/bin/vendor perl:/usr/bin/core perl: HOME/.
local/bin: HOME/.
local/bin/scripts: HOME/.
cargo/bin:/snap/bin:/data/data/com.
termux/files/usr/bin/applets:/data/data/com.
termux/files/usr/bin:bin:/usr/local/sbin:/usr/bin: HOME/.
local/share/nvim/lspinstall: HOME/skia-binaries: HOME/ninja" 562:  if [[ -n  SSH CONNECTION ]]; then 563:     export EDITOR='nvim' 564:   else 565:     export EDITOR='nvim' 566:   fi 567:  export vi="neovide"  568:   569:  if [ -e /home/yasha/.
nix-profile/etc/profile.
d/nix.
sh ]; then . 
569:++++ /home/yasha/.
nix-profile/etc/profile.
d/nix.
sh; fi # added by Nix installer  570:  export QT SCALE FACTOR=2  571:  export GDK SCALE=2  572:  export QT QPA PLATFORM=wayland 