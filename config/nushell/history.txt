cd ./workspacemodules/
ls
ls -l | where type==file
ls -l | where type=file
ls -l | where type="file" | echo
ls -l | where type=file | echo
ls -l | where type==file | echo
ls -l | where type
ls -l | where each |it.type|=file 
lf 
let $config = {<\n>    ...<\n>    edit_mode: emacs<\n>    ...<\n>  }
lf
cd ./workspacemodules/
psrc
powershell
ls -l | where $_ == file 
ls -l | where [it].Data == file 
ls -l | where type == file
ls -l --> where type==file 
ls -l --> where type == file 
ls -l -> where type == file 
ls -l | echo in.i
ls -l | echo $in.i
ls -l | echo $in.1
ls -l | echo $in
ls -l | echo 
ls -l | echo $in
ls -l | echo 
ls -l | echo $in + blah
ls -l | put $in + "blah"
ls -l | put $in.name + "blah"
ls -l | put $in.name 
ls -l | put $in.1
ls -l | echo $in.1
ls -l | echo $in.name
ls -l | echo $in | where $in.name==qt
ls -l | echo $in | where $in.name=="qt"
ls -l | echo $in | where "$in.name"=="qt"
ls -l | echo $in | where "$in.name" == "qt"
ls -l | echo $in | where $in.name == "qt"
ls -l | echo $in | where $in.name == "bim"
ls -l | echo $in | where $in.name == "bin"
ls -l | echo $in 
ls -l | echo $in | where $in.name == "web"
ls -l | echo $in | where $in.name == 'web'
ls -l | echo $in | where $in.name == web
ls -l | echo $in | where $in.num_links == 1
ls -l | echo $in | where $in.num_links == '1'
ls -l | echo $in | where $in.name contains web
ls -l | echo $in | where $in.type == dir
ls -l | where $in.type == dir
ls -l | where type == dir
ls -l | echo $in | where type == dir
let $a = ls -l 
echo $a.dir.0
echo $a.0
echo $a.0.name
foreach $a.i | echo $a.i.name
foreach $a | echo $a.i.name
let $b[]=a.#
let $b=a.#
let $b=a.name
let $b=$a.#
let $b=$a.name
ech $a.name
put $a.name
echo $a.name
let b = $a.name
let $b = $a.name
let b = $a.name
echo b
echo $b
foreach i in $b {echo $a.num_links}
(each i in $b) {echo $a.num_links.i}
(each $b) echo $a.num_links.i
ls -l | echo $in | where $it.type == dir
ls -l | where $it.type == dir | each { |it| $it + "blah"} | echo
ls -l | where $it.type == dir | each { |it| $it + "blah"} | put
ls -l | where $it.type == dir | each { |it| $it + "blah"} | print
ls -l | where $it.type == dir | each { |it| "$it" + "blah"} | echo
ls -l | where $it.type == dir | each { |it| ""$it" + "blah""} | echo
ls -l | where $it.type == dir 
ls -l | where $it.type == dir | each { |it| $it.name + "blah"} | echo $it.name
ls -l | where $in.type == dir | each { |it| $it.name + "blah"} | echo $it.name
ls -l | where $in.type == dir | each { |it| $it.name + "blah"} | echo $in.name
ls -l | where $in.type == dir 
ls -l | where $it.type == dir | each { |it| $it.name + "blah"} | echo $it.name
ls -l | where $it.type == dir 
ls -l | where $it.type == dir | echo in.name
ls -l | where $it.type == dir | echo $in.name
let a = ls -l | where $it.type == dir | each { |it| $it.name + "blah"} 
let a = (ls -l | where $it.type == dir | each { |it| $it.name + "blah"} )
echo $a
let a = (ls -l | where $it.type == dir | each { $it.name + "blah"} )
let a = (ls -l | where $it.type == dir | each { |it| $it.name + "blah"} )
let a = (ls -l | where $it.type == dir | each { |a| $a.name + "blah"} )
neovim
nvim
nurc
$env.VIMRUNTIME
$env.VIMRUNTIME = ~
$env.VIMRUNTIME
nvim
$env.VIMRUNTIME
$env.VIMRUNTIME=
$env.VIMRUNTIME =
$env.VIMRUNTIME = ''
nvim
vrc
nvim
vrc
nurc
nvim
j nushell
nvim config.nu
nvim
echo $env.VIMRUNTIME
nvim
lf
git status
rm CMakeLists.txt
lf
rm autoload
rm -r autoload
rm -r colors
rm -r compiler
rm -r delmenu.vim
rm -r doc
rm -r filetype.lua
rm -r pack
rm -r plugin
rm -r queries
rm -r synmenu.vim
rm -r syntax
rm -r tools
rm -r tutor
lf
j nushell
nvim config.nu
j neovim
ls
lf
cd ..
rm -r neovim
killn nvim
rm -r neovim
git clone https://github.com/neovim/neovim
cd neovim
nurc
nvim
nurc
nvim
nvy
which nvim
which nu
which nvim
nvim
echo $env.VIMRUNTIME
nurc
nvim
nushell
nurc
which cl
lf
nurc
nvim
which nvim
nurc
clang-cl
cl
nurc
cl
j neovim
which cl
cd ..
git clone https://github.com/neovim/neovim
git clone https://github.com/neovim/neovim neovim2
cd neovim2
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
cl
nvim
j neovim
lf
nurc
nvim
lf
nvim
nvim config.nu
vrc
which rustup
which cargo
cargo
which rustc
lf
scoop uninstall cargo
lf
scoop uninstall rust
lf
rm rustup\
rm -r rustup\
lf
scoop install rustup
scoop update rustup
scoop install cargo
rustup cargo
which rustup
lf
./rustup install cargo
lf
j texlab
lf
C:\Users\yasha\texlab
nvim
lf
which rustup
which rustc
nurc
cd ~
which rustc
cd C:\Users\yasha\scoop\apps\rustup\current\.cargo\bin
nurc
which rustc
j texlab
lf
j scripts
cd ~
mkdir executables
nurc
nvim
which nvy
nu C:\Users\yasha\OneDrive\dotfiles\scripts\neo.nu
nvim
lf
rm -r runtime
killn nvim
rm -r runtime
killn nvim
rm -r runtime
j neovim
make install
j execu
lf
j neovim
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build .deps --config Release
cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build build --config Release
which nvim
nvim
j neovim2
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
upscoop
lf
j nushell
nvim con
keybindings
keybindings list
> keybindings list -e -d
keybindings list -e -d
--keycodes, -k
keybindings list -e -d -k
j dotfiles
git status
push
git status
git add .
git commit -m -a
git push origin * windows.main.new
git push origin windows.main.new
nvy
neo
nurc
C:/Users/yasha/executables/nvy.exe
C:/Users/yasha/executables/nvy.exe --fullscreen \Users\yasha/OneDrive/dotfiles/config/nushell/config.nu
cd ~
C:/Users/yasha/executables/nvy.exe --fullscreen \Users\yasha/OneDrive/dotfiles/config/nushell/config.nu
C:/Users/yasha/executables/nvy.exe --fullscreen C:/Users/yasha/OneDrive/dotfiles/config/nushell/config.nu
nvy C:/Users/yasha/OneDrive/dotfiles/config/nushell/config.nu
cd  C:/Users/yasha/OneDrive/dotfiles/config/nushell
ls
which nvy
neo
nvim
j scripts
rm nvim.bat
nvim
neo
neovide -h
neovide --neovim-bin ~/neovim/build/bin/nvim
nvim
nvy
nvy --fullscreen
uploadGit 
uploadGit neovim
git checkout master
git status
push
git status
git push origin mybranch
git push mybranch
git push 
git remote
git push --set-upstream "https://yashamon:($credential)@github.com/yashamon/($name).git" mybranch
git push --set-upstream "https://yashamon@github.com/yashamon/neovim.git" mybranch
nvim
rm -r build
$env.Path="C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\bin\HostARM64\ARM64;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\VC\VCPackages;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer;C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\bin\Roslyn;C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\;C:\Program Files (x86)\HTML Help Workshop;C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\\arm64;C:\Program Files (x86)\Windows Kits\10\bin\\arm64;C:\Program Files\Microsoft Visual Studio\2022\Community\\MSBuild\Current\Bin\arm64;C:\Windows\Microsoft.NET\Framework64\v4.0.30319;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\;C:\Users\yasha\scoop\apps\pwsh\current;C:/Users/yasha/neovim/build/bin;C:/Users/yasha/executables;C:/Users/yasha/OneDrive/dotfiles/scripts;C:/Users/yasha/scoop/apps/python39/current;C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64;C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/Tools;C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/HostARM64/ARM64;C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/VC/VCPackages;C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow;C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer;C:/Program Files/Microsoft Visual Studio/2022/Community/MSBuild/Current/bin/Roslyn;C:/Program Files/Microsoft Visual Studio/2022/Community//MSBuild/Current/Bin/arm64;C:/Windows/Microsoft.NET/Framework64/v4.0.30319;C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/;C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/Tools/;C:/Users/yasha/scoop/apps/nodejs/current/bin;C:/Users/yasha/scoop/apps/nodejs/current;C:/Users/yasha/scoop/apps/latex/current/texmfs/install/miktex/bin/x64;C:/Program Files/PowerShell/7;C:/windows/system32;C:/windows;C:/windows/System32/Wbem;C:/windows/System32/WindowsPowerShell/v1.0;C:/windows/System32/OpenSSH;C:/Program Files/dotnet;C:/Program Files/PowerShell/7;C:/Users/yasha/AppData/Local/Microsoft/WindowsApps;C:/Users/yasha/scoop/apps/perl/current/perl/bin;C:/Users/yasha/scoop/apps/gcc/current/bin;C:\Users\yasha\scoop\apps\7zip\current;C:\Users\yasha\scoop\apps\Cascadia-Code\current;C:\Users\yasha\scoop\apps\CascadiaCode-Nf\current;C:\Users\yasha\scoop\apps\Monoid-NF-mono\current;C:\Users\yasha\scoop\apps\Oh-my-posh\current;C:\Users\yasha\scoop\apps\adb\current;C:\Users\yasha\scoop\apps\autohotkey\current;C:\Users\yasha\scoop\apps\bat\current;C:\Users\yasha\scoop\apps\bfg\current;C:\Users\yasha\scoop\apps\cacert\current;C:\Users\yasha\scoop\apps\cmake\current;C:\Users\yasha\scoop\apps\cwrsync\current;C:\Users\yasha\scoop\apps\dark\current;C:\Users\yasha\scoop\apps\deno\current;C:\Users\yasha\scoop\apps\diffutils\current;C:\Users\yasha\scoop\apps\dos2unix\current;C:\Users\yasha\scoop\apps\fd\current;C:\Users\yasha\scoop\apps\foobar2000\current;C:\Users\yasha\scoop\apps\foobar2000-encoders\current;C:\Users\yasha\scoop\apps\fvim\current;C:\Users\yasha\scoop\apps\fzf\current;C:\Users\yasha\scoop\apps\gawk\current;C:\Users\yasha\scoop\apps\gcc\current;C:\Users\yasha\scoop\apps\gh\current;C:\Users\yasha\scoop\apps\git\current;C:\Users\yasha\scoop\apps\grep\current;C:\Users\yasha\scoop\apps\gzip\current;C:\Users\yasha\scoop\apps\helix\current;C:\Users\yasha\scoop\apps\inkscape\current;C:\Users\yasha\scoop\apps\jetbrains-mono\current;C:\Users\yasha\scoop\apps\lazygit\current;C:\Users\yasha\scoop\apps\less\current;C:\Users\yasha\scoop\apps\lf\current;C:\Users\yasha\scoop\apps\llvm\current;C:\Users\yasha\scoop\apps\ln\current;C:\Users\yasha\scoop\apps\lua\current;C:\Users\yasha\scoop\apps\make\current;C:\Users\yasha\scoop\apps\neovide\current;C:\Users\yasha\scoop\apps\ninja\current;C:\Users\yasha\scoop\apps\nodejs\current;C:\Users\yasha\scoop\apps\ntop\current;C:\Users\yasha\scoop\apps\nu\current;C:\Users\yasha\scoop\apps\openssh\current;C:\Users\yasha\scoop\apps\pandoc\current;C:\Users\yasha\scoop\apps\perl\current;C:\Users\yasha\scoop\apps\pkg-config\current;C:\Users\yasha\scoop\apps\psfzf\current;C:\Users\yasha\scoop\apps\pwsh\current;C:\Users\yasha\scoop\apps\pwsh-beta\current;C:\Users\yasha\scoop\apps\qbittorent\current;C:\Users\yasha\scoop\apps\recycle-bin\current;C:\Users\yasha\scoop\apps\ripgrep\current;C:\Users\yasha\scoop\apps\rustup\current;C:\Users\yasha\scoop\apps\scoop\current;C:\Users\yasha\scoop\apps\sed\current;C:\Users\yasha\scoop\apps\sioyek\current;C:\Users\yasha\scoop\apps\starship\current;C:\Users\yasha\scoop\apps\sudo\current;C:\Users\yasha\scoop\apps\sumatrapdf\current;C:\Users\yasha\scoop\apps\tar\current;C:\Users\yasha\scoop\apps\tectonic\current;C:\Users\yasha\scoop\apps\telegram\current;C:\Users\yasha\scoop\apps\touch\current;C:\Users\yasha\scoop\apps\universal-ctags\current;C:\Users\yasha\scoop\apps\unzip\current;C:\Users\yasha\scoop\apps\vcredist2022\current;C:\Users\yasha\scoop\apps\vlc-nightly\current;C:\Users\yasha\scoop\apps\vscode\current;C:\Users\yasha\scoop\apps\wget\current;C:\Users\yasha\scoop\apps\which\current;C:\Users\yasha\scoop\apps\xournalpp\current;C:\Users\yasha\scoop\apps\yazi\current;C:\Users\yasha\scoop\apps\zoom\current;C:\Users\yasha\scoop\apps\zoxide\current;C:\Users\yasha\scoop\apps\cmake\current\bin;C:\Users\yasha\scoop\apps\cwrsync\current\bin;C:\Users\yasha\scoop\apps\dos2unix\current\bin;C:\Users\yasha\scoop\apps\gawk\current\bin;C:\Users\yasha\scoop\apps\gcc\current\bin;C:\Users\yasha\scoop\apps\gh\current\bin;C:\Users\yasha\scoop\apps\git\current\bin;C:\Users\yasha\scoop\apps\gzip\current\bin;C:\Users\yasha\scoop\apps\inkscape\current\bin;C:\Users\yasha\scoop\apps\llvm\current\bin;C:\Users\yasha\scoop\apps\lua\current\bin;C:\Users\yasha\scoop\apps\make\current\bin;C:\Users\yasha\scoop\apps\nodejs\current\bin;C:\Users\yasha\scoop\apps\scoop\current\bin;C:\Users\yasha\scoop\apps\tar\current\bin;C:\Users\yasha\scoop\apps\vscode\current\bin;C:\Users\yasha\scoop\apps\which\current\bin;C:\Users\yasha\scoop\apps\xournalpp\current\bin;C:/Users/yasha/scoop/shims;C:/Users/yasha/scoop/apps/rustup/current/.cargo/bin;C:/Users/yasha/scoop/apps/autohotkey/current/installer/AutoHotkeyU64.exe;C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\Llvm\ARM64\bin;C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\VC\Linux\bin\ConnectionManagerExe:C:/Users/yasha/neovim/build/bin:C:/Users/yasha/scoop/persist/nodejs/bin:C:/Windows/Microsoft.NET/Framework64/v4.0.30319:C:/Users/yasha/scoop/apps/rustup/current/.cargo/bin:C:/Users/yasha/scoop/shims:C:/Users/yasha/neovim/C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64:C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/Tools:C:\Users\yasha/.config/sway/modules:C:\Users\yasha/appimage:/home/linuxbrew/.linuxbrew/bin:/usr/local/bin:/usr/sbin:/sbin:/bin:C:\Users\yasha/.local/bin:/root/.cabal/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:C:\Users\yasha/.cabal/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:C:\Users\yasha/.local/bin:C:\Users\yasha/.local/bin/scripts:C:\Users\yasha/.cargo/bin:/snap/bin:/data/data/com.termux/files/usr/bin/applets:/data/data/com.termux/files/usr/bin:bin:/usr/local/sbin:/usr/bin:C:\Users\yasha/.local/share/nvim/lspinstall:C:\Users\yasha/skia-binaries:C:\Users\yasha/ninja:/home/yasha/.nix-profile:/home/yasha/dotfiles/scripts:/usr/bin:C:\Users\yasha/dotfiles/scripts:C:\Users\yasha/.local/bin/goneovim"
echo $env.PATH
cd build
cmake .. -GNinja
cd ~
cd nvy2
nvim test.c
C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c
cl test.c
which cl
"C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe" test.c
"C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe"
C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c
C:/Program\ Files/Microsoft\ Visual\ Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c
nu -c "C:/Program\ Files/Microsoft\ Visual\ Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c"
nu -c "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c"
nu -c 'C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c'
nu -c 'C:/Program\ Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c'
nu -c 'C:/Program\\ Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c'
nu -c 'C:\\Program\\ Files\\Microsoft Visual Studio\\2022\\Community/VC/Tools/MSVC/14.40.33807/bin/Hostarm64/arm64/cl.exe test.c'
echo "program files"
nu -c "nvim blah"
nu -c "nvim\ blah"
nu -c "nvim\\ blah"
nu -c "\"nvim blah\""
nvim blah
keybindings list -e -d -k
which cl
clang-cl
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build .deps --config Release
which cl
cl
rm -r build
$env.Path=''
$env.Path = ''
cmake --build .deps --config Release
nu
cd C:\Users\yasha\scoop\apps\nushell\
cd C:\Users\yasha\scoop\apps\nu
cd C:\Users\yasha\scoop\apps
ls
cd nu
ls
cd current
ls
cl
cmake
nurc
nvim C:\Users\yasha\AppData\Local\nushell\config.nu
cl
j neovim2
cmake --build .deps --config Release
git checkout master
lf
git patch BuildGettext.patch
git-patch BuildGettext.patch
git apply BuildGettext.patch
git status
nu
nu -c "nvim --server  \\.\pipe\nvm.4748.0 --remote-send a"
nu -c 'nvim --server  \\.\pipe\nvm.4748.0 --remote-send a'
nvim ~/filename.txt
neo
C:/Users/yasha/nvy/build/nvy --fullscreen --neovim-bin=C:/Users/yasha/neovim/build/bin/nvim.exe
nvy
:/Users/yasha/neovim/build/bin/nvim.exe
C:/Users/yasha/neovim/build/bin/nvim.exe
nvy
j neovim
lf
j web
git status
hw
vrc
nurc
hx
lf
nvim
nu
scoop update zoxide
pwsh
p
which zoxide
which nvim
echo $env.PATH
j web
which zoxide
j
echo $env.PATH
j web
nvim
scoop install zoxide
j web
chmod +x neo.nu
chmod +x neo.bat
./neo.bat
nu -c C:\users\yasha\onedrive\dotfiles\scripts\neo.nu
nu -c "C:\users\yasha\onedrive\dotfiles\scripts\neo.nu"
nu -c "C:/users/yasha/onedrive/dotfiles/scripts/neo.nu"
nu -c C:\Users\yasha\OneDrive\dotfiles\scripts\neo.bat<\n>
nu -c C:\Users\yasha\OneDrive\dotfiles\scripts\neo.bat
nu -c C:/Users/yasha/OneDrive/dotfiles/scripts/neo.bat
nu C:/Users/yasha/OneDrive/dotfiles/scripts/neo.bat
neo blah
nvim neo.nu
neo blah
nvim C:\Users\yasha\AppData\Local\nushell\config.nu
neo blah
./neo.bat 
nvim neo.nu
./neo.bat 
nvim neo.bat
./neo.bat blah
nvim neo.nu
C:/Users/yasha/neovim/build/bin/nvim.exe blah
nvim neo.nu
./neo.bat blah
nvim neo.nu
./neo.bat blah
nvim neo.bat
nu -c 'C:/users/yasha/onedrive/dotfiles/scripts/neo.nu' blah
nu C:/users/yasha/onedrive/dotfiles/scripts/neo.nu blah
nvim neo.nu
nu C:/users/yasha/onedrive/dotfiles/scripts/neo.nu blah
nvim neo.nu
./neo.bat blah
nvim ./neo.bat
which neo
neo
neo blah
j neovide
j nvyu
j nvy
cd build
./Nvy.exe --f blah
hw
j dotfiles
cd .git
ls
hw
nurc
hw
j dotfiles
cd .git
ls
rm index.lock
hw
rm index.lock
j dotfiles
hw
rm C:/Users/yasha/OneDrive/dotfiles/.git/index.lock
hw
cd ~
hw
j algtop
touch test
cd ~
hw
j algtop
rm text
rm test
do --ignore-errors {git add .}; do --ignore-errors {git commit -m -a}; do --ignore-errors {git push origin gh-pages}
touch test
do --ignore-errors {git commit -m -a}
do --ignore-errors {git push origin gh-pages}
rm test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages}
git status
do --ignore-errors {git add .; git commit -m -a; git push origin gh-pages}
git commit -m -a
git status
do --ignore-errors {git add .; git commit -m -a; git push origin gh-pages}; git push origin gh-page
do --ignore-errors {git add .; git commit -m -a; git push origin gh-pages}; git push origin gh-pages
touch test
do --ignore-errors {git add .; git commit -m -a; git push origin gh-pages}; git push origin gh-pages
git status
do --ignore-errors {git add .; git commit -m -a; git push origin gh-pages}; git push origin gh-pages
rm touch
rm test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages}
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages:gh-pages}
touch test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages:gh-pages}
rm test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages}
touch test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages}
rm test
git status
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages}
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages:gh-pages}
rm test
touch test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages:gh-pages}
rm test
do --ignore-errors {git add .; git commit -m -a}; do --ignore-errors {git push origin gh-pages:gh-pages}
nurc
j config
exit
nvim
j dotfiles
git status
nvim link.bib
git status
lazygit
nvim link.bib
j themat
lf
j dotfiles
nvim link.bib
git commit -m -a
git status
push
git status
nvim link.bib
exit
nvim
j config
cd ..
lf
j config
cd ~
cd OneDrive\dotfiles\config\
ls
cd nushell
lf
git status
git restore config.nu
git restore env.nu
lf
nvim config.nu
lf
j dotfiles
nvim test.tex
git status
nvim test.tex
git status
if ((git rev-parse --is-inside-work-tree) | into bool) do -i {git add .}; do -i {git diff --staged | save --force message.log}; do -i {git commit -F message.log}; do -i {git push --all origin}; do -i {echo "synced"}
if ((git rev-parse --is-inside-work-tree) | into bool) do -i {git add .}
if ((git rev-parse --is-inside-work-tree) | into bool) {do -i {git add .}}
git status
if ((git rev-parse --is-inside-work-tree) | into bool) {do -i {git add .}; do -i {git diff --staged | save --force message.log}; do -i {git commit -F message.log}; do -i {git push --all origin}; do -i {echo "synced"}}
git status
if ((git rev-parse --is-inside-work-tree) | into bool) {do -i {git add .}; do -i {git diff --staged | save --force message.log}; do -i {git commit -F message.log}; do -i {git push --all origin}; do -i {echo "synced"}}
if ((git rev-parse --is-inside-work-tree) | into bool) {echo "synced"}
git status
if ((git rev-parse --is-inside-work-tree) | into bool) {do -i {git add .}; do -i {git diff --staged | save --force message.log}; do -i {git commit -F message.log}; do -i {git push --all origin}; do -i {echo "synced"}}
git status
git add .
git status
nvim link.bib
git status
nvim .gitignore
git status
nvim .gitignore
git status
nvim .gitignore
git status
push
git status
nvim .gitignore
git status
nvim .gitignore
git status
push
git status
nurc
git status
nvim message.log
git diff --staged
do -i {git diff --staged | save --force message.log}
nvim message.log
rm message.log
git status
if ((git rev-parse --is-inside-work-tree) | into bool) {do -i {git add .}; do -i {git diff --staged | save --force message.log}; do -i {git commit -F message.log}; do -i {git push --all origin}; do -i {echo "synced"}}
git status
nvim message.log
git status
nvim message.log
git status
j dotfiles
