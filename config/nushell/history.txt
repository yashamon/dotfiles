cd ./workspacemodules/
ls
ls -l | where type==file
ls -l | where type=file
ls -l | where type="file" | echo
ls -l | where type=file | echo
ls -l | where type==file | echo
ls -l | where type
ls -l | where each |it.type|=file 
lf 
let $config = {<\n>    ...<\n>    edit_mode: emacs<\n>    ...<\n>  }
lf
cd ./workspacemodules/
psrc
powershell
ls -l | where $_ == file 
ls -l | where [it].Data == file 
ls -l | where type == file
ls -l --> where type==file 
ls -l --> where type == file 
ls -l -> where type == file 
ls -l | echo in.i
ls -l | echo $in.i
ls -l | echo $in.1
ls -l | echo $in
ls -l | echo 
ls -l | echo $in
ls -l | echo 
ls -l | echo $in + blah
ls -l | put $in + "blah"
ls -l | put $in.name + "blah"
ls -l | put $in.name 
ls -l | put $in.1
ls -l | echo $in.1
ls -l | echo $in.name
ls -l | echo $in | where $in.name==qt
ls -l | echo $in | where $in.name=="qt"
ls -l | echo $in | where "$in.name"=="qt"
ls -l | echo $in | where "$in.name" == "qt"
ls -l | echo $in | where $in.name == "qt"
ls -l | echo $in | where $in.name == "bim"
ls -l | echo $in | where $in.name == "bin"
ls -l | echo $in 
ls -l | echo $in | where $in.name == "web"
ls -l | echo $in | where $in.name == 'web'
ls -l | echo $in | where $in.name == web
ls -l | echo $in | where $in.num_links == 1
ls -l | echo $in | where $in.num_links == '1'
ls -l | echo $in | where $in.name contains web
ls -l | echo $in | where $in.type == dir
ls -l | where $in.type == dir
ls -l | where type == dir
ls -l | echo $in | where type == dir
let $a = ls -l 
echo $a.dir.0
echo $a.0
echo $a.0.name
foreach $a.i | echo $a.i.name
foreach $a | echo $a.i.name
let $b[]=a.#
let $b=a.#
let $b=a.name
let $b=$a.#
let $b=$a.name
ech $a.name
put $a.name
echo $a.name
let b = $a.name
let $b = $a.name
let b = $a.name
echo b
echo $b
foreach i in $b {echo $a.num_links}
(each i in $b) {echo $a.num_links.i}
(each $b) echo $a.num_links.i
ls -l | echo $in | where $it.type == dir
ls -l | where $it.type == dir | each { |it| $it + "blah"} | echo
ls -l | where $it.type == dir | each { |it| $it + "blah"} | put
ls -l | where $it.type == dir | each { |it| $it + "blah"} | print
ls -l | where $it.type == dir | each { |it| "$it" + "blah"} | echo
ls -l | where $it.type == dir | each { |it| ""$it" + "blah""} | echo
ls -l | where $it.type == dir 
ls -l | where $it.type == dir | each { |it| $it.name + "blah"} | echo $it.name
ls -l | where $in.type == dir | each { |it| $it.name + "blah"} | echo $it.name
ls -l | where $in.type == dir | each { |it| $it.name + "blah"} | echo $in.name
ls -l | where $in.type == dir 
ls -l | where $it.type == dir | each { |it| $it.name + "blah"} | echo $it.name
ls -l | where $it.type == dir 
ls -l | where $it.type == dir | echo in.name
ls -l | where $it.type == dir | echo $in.name
let a = ls -l | where $it.type == dir | each { |it| $it.name + "blah"} 
let a = (ls -l | where $it.type == dir | each { |it| $it.name + "blah"} )
echo $a
let a = (ls -l | where $it.type == dir | each { $it.name + "blah"} )
let a = (ls -l | where $it.type == dir | each { |it| $it.name + "blah"} )
let a = (ls -l | where $it.type == dir | each { |a| $a.name + "blah"} )
neovim
nvim
nurc
$env.VIMRUNTIME
$env.VIMRUNTIME = ~
$env.VIMRUNTIME
nvim
$env.VIMRUNTIME
$env.VIMRUNTIME=
$env.VIMRUNTIME =
$env.VIMRUNTIME = ''
nvim
vrc
nvim
vrc
nurc
nvim
j nushell
nvim config.nu
nvim
echo $env.VIMRUNTIME
nvim
lf
git status
rm CMakeLists.txt
lf
rm autoload
rm -r autoload
rm -r colors
rm -r compiler
rm -r delmenu.vim
rm -r doc
rm -r filetype.lua
rm -r pack
rm -r plugin
rm -r queries
rm -r synmenu.vim
rm -r syntax
rm -r tools
rm -r tutor
lf
j nushell
nvim config.nu
j neovim
ls
lf
cd ..
rm -r neovim
killn nvim
rm -r neovim
git clone https://github.com/neovim/neovim
cd neovim
nurc
nvim
nurc
nvim
nvy
which nvim
which nu
which nvim
nvim
echo $env.VIMRUNTIME
nurc
nvim
nushell
nurc
which cl
lf
nurc
nvim
which nvim
nurc
clang-cl
cl
nurc
cl
j neovim
which cl
cd ..
git clone https://github.com/neovim/neovim
git clone https://github.com/neovim/neovim neovim2
cd neovim2
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
cl
nvim
j neovim
lf
nurc
nvim
lf
nvim
nvim config.nu
vrc
which rustup
which cargo
cargo
which rustc
lf
scoop uninstall cargo
lf
scoop uninstall rust
lf
rm rustup\
rm -r rustup\
lf
scoop install rustup
scoop update rustup
scoop install cargo
rustup cargo
which rustup
lf
./rustup install cargo
lf
j texlab
lf
C:\Users\yasha\texlab
nvim
lf
which rustup
which rustc
nurc
cd ~
which rustc
cd C:\Users\yasha\scoop\apps\rustup\current\.cargo\bin
nurc
which rustc
j texlab
lf
j scripts
cd ~
mkdir executables
nurc
nvim
which nvy
nu C:\Users\yasha\OneDrive\dotfiles\scripts\neo.nu
nvim
lf
rm -r runtime
killn nvim
rm -r runtime
killn nvim
rm -r runtime
j neovim
make install
j execu
lf
j neovim
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build .deps --config Release
cmake -B build -G Ninja -D CMAKE_BUILD_TYPE=Release
cmake --build build --config Release
which nvim
nvim
j neovim2
cmake -S cmake.deps -B .deps -G Ninja -D CMAKE_BUILD_TYPE=Release
upscoop
lf
j nushell
nvim con
keybindings
keybindings list
> keybindings list -e -d
keybindings list -e -d
--keycodes, -k
keybindings list -e -d -k
j dotfiles
git status
push
git status
git add .
git commit -m -a
git push origin * windows.main.new
git push origin windows.main.new
nvy
neo
nurc
C:/Users/yasha/executables/nvy.exe
C:/Users/yasha/executables/nvy.exe --fullscreen \Users\yasha/OneDrive/dotfiles/config/nushell/config.nu
cd ~
C:/Users/yasha/executables/nvy.exe --fullscreen \Users\yasha/OneDrive/dotfiles/config/nushell/config.nu
C:/Users/yasha/executables/nvy.exe --fullscreen C:/Users/yasha/OneDrive/dotfiles/config/nushell/config.nu
nvy C:/Users/yasha/OneDrive/dotfiles/config/nushell/config.nu
cd  C:/Users/yasha/OneDrive/dotfiles/config/nushell
ls
which nvy
