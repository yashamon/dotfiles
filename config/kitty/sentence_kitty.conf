1:  # vim:fileencoding=utf-8:ft=conf:foldmethod=marker 2:   3:  #: Fonts     4:   5:  #: kitty has very powerful font management. 
5:++++ You can configure 6:  #: individual font faces and even specify special fonts for particular 7:  #: characters.
@??? 8:   9:  font family      Source Code Pro Light 10:  # bold font        auto 11:  # italic font      auto 12:  # bold italic font auto 13:   14:  #: You can specify different fonts for the bold/italic/bold-italic 15:  #: variants. 
15:++++ To get a full list of supported fonts use the `kitty 16:  #: list-fonts` command. 
16:++++ By default they are derived automatically, by 17:  #: the OSes font system. 
17:++++ Setting them manually is useful for font 18:  #: families that have many weight variants like Book, Medium, Thick, 19:  #: etc. 
19:++++ For example:: 20:   21:  #:     font family      Operator Mono Book 22:  #:     bold font        Operator Mono Medium 23:  #:     italic font      Operator Mono Book Italic 24:  #:     bold italic font Operator Mono Medium Italic 25:   26:  font size 22.
0 27:   28:  #: Font size (in pts) 29:   30:  # adjust line height  0 31:  # adjust column width 0 32:   33:  #: Change the size of each character cell kitty renders. 
33:++++ You can use 34:  #: either numbers, which are interpreted as pixels or percentages 35:  #: (number followed by  ), which are interpreted as percentages of the 36:  #: unmodified values. 
36:++++ You can use negative pixels or percentages less 37:  #: than 100  to reduce sizes (but this might cause rendering 38:  #: artifacts).
@??? 39:   40:  # symbol map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols 41:   42:  #: Map the specified unicode codepoints to a particular font. 
42:++++ Useful 43:  #: if you need special rendering for some symbols, such as for 44:  #: Powerline. 
44:++++ Avoids the need for patched fonts. 
44:++++ Each unicode code 45:  #: point is specified in the form U+<code point in hexadecimal>. 
45:++++ You 46:  #: can specify multiple code points, separated by commas and ranges 47:  #: separated by hyphens. 
47:++++ symbol map itself can be specified multiple 48:  #: times. 
48:++++ Syntax is:: 49:   50:  #:     symbol map codepoints Font Family Name 51:   52:  # disable ligatures never 53:   54:  #: Choose how you want to handle multi-character ligatures. 
54:++++ The 55:  #: default is to always render them. 
55:++++  You can tell kitty to not render 56:  #: them when the cursor is over them by using cursor to make editing 57:  #: easier, or have kitty never render them at all by using always, if 58:  #: you don't like them. 
58:++++ The ligature strategy can be set per-window 59:  #: either using the kitty remote control facility or by defining 60:  #: shortcuts for it in kitty.
conf, for example:: 61:   62:  #:     map alt+1 disable ligatures in active always 63:  #:     map alt+2 disable ligatures in all never 64:  #:     map alt+3 disable ligatures in tab cursor 65:   66:  # box drawing scale 0.
001, 1, 1.
5, 2 67:   68:  #: Change the sizes of the lines used for the box drawing unicode 69:  #: characters These values are in pts. 
69:++++ They will be scaled by the 70:  #: monitor DPI to arrive at a pixel value. 
70:++++ There must be four values 71:  #: corresponding to thin, normal, thick, and very thick lines.
@??? 72:   73:  #:     74:   75:  #: Cursor customization     76:   77:  # cursor #cccccc 78:   79:  #: Default cursor color 80:   81:  # cursor text color #111111 82:   83:  #: Choose the color of text under the cursor. 
83:++++ If you want it rendered 84:  #: with the background color of the cell underneath instead, use the 85:  #: special keyword: background 86:   87:  # cursor shape block 88:   89:  #: The cursor shape can be one of (block, beam, underline) 90:   91:  # cursor blink interval -1 92:   93:  #: The interval (in seconds) at which to blink the cursor. 
93:++++ Set to zero 94:  #: to disable blinking. 
94:++++ Negative values mean use system default. 
94:++++ Note 95:  #: that numbers smaller than repaint delay will be limited to 96:  #: repaint delay.
@??? 97:   98:  # cursor stop blinking after 15.
0 99:   100:  #: Stop blinking cursor after the specified number of seconds of 101:  #: keyboard inactivity. 
101:++++  Set to zero to never stop blinking.
@??? 102:   103:  #:     104:   105:  #: Scrollback     106:   107:  # scrollback lines 2000 108:   109:  #: Number of lines of history to keep in memory for scrolling back.
@??? 110:  #: Memory is allocated on demand. 
110:++++ Negative numbers are (effectively) 111:  #: infinite scrollback. 
111:++++ Note that using very large scrollback is not 112:  #: recommended as it can slow down resizing of the terminal and also 113:  #: use large amounts of RAM.
@??? 114:   115:  # scrollback pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT LINE NUMBER 116:   117:  scrollback pager /snap/bin/nvim -c "set norelativenumber nonumber nolist showtabline=0 foldcolumn=0" -c "autocmd TermOpen * normal G" -c "silent write! /tmp/kitty scrollback buffer | te cat /tmp/kitty scrollback buffer - " 118:   119:  #  scrollback pager /snap/bin/nvim -c "set nonumber nolist showtabline=0 foldcolumn=0 laststatus=0" -c "autocmd TermOpen * normal G" -c "silent write! /tmp/kitty scrollback buffer | te /usr/bin/head -c-1 /tmp/kitty scrollback buffer; rm /tmp/kitty scrollback buffer; cat" 120:   121:  # scrollback pager /snap/bin/nvim  -c "set nonumber nolist showtabline=0 foldcolumn=0" -c "autocmd TermOpen * normal G" -c "silent write /tmp/kitty scrollback buffer | te cat /tmp/kitty scrollback buffer - " 122:   123:  # scrollback pager /snap/bin/nvim -c "set nonumber nolist showtabline=0 foldcolumn=0" -c "autocmd TermOpen * normal G" -c "silent write /tmp/kitty scrollback buffer | te cat /tmp/kitty scrollback buffer - " 124:   125:   126:  #: Program with which to view scrollback in a new window. 
126:++++ The 127:  #: scrollback buffer is passed as STDIN to this program. 
127:++++ If you change 128:  #: it, make sure the program you use can handle ANSI escape sequences 129:  #: for colors and text formatting. 
129:++++ INPUT LINE NUMBER in the command 130:  #: line above will be replaced by an integer representing which line 131:  #: should be at the top of the screen.
@??? 132:   133:  # scrollback pager history size 0 134:   135:  #: Separate scrollback history size, used only for browsing the 136:  #: scrollback buffer (in MB). 
136:++++ This separate buffer is not available 137:  #: for interactive scrolling but will be piped to the pager program 138:  #: when viewing scrollback buffer in a separate window. 
138:++++ The current 139:  #: implementation stores one character in 4 bytes, so approximatively 140:  #: 2500 lines per megabyte at 100 chars per line. 
140:++++ A value of zero or 141:  #: less disables this feature. 
141:++++ The maximum allowed size is 4GB.
@??? 142:   143:  # wheel scroll multiplier 5.
0 144:   145:  #: Modify the amount scrolled by the mouse wheel. 
145:++++ Note this is only 146:  #: used for low precision scrolling devices, not for high precision 147:  #: scrolling on platforms such as macOS and Wayland. 
147:++++ Use negative 148:  #: numbers to change scroll direction.
@??? 149:   150:  touch scroll multiplier 1.
0 151:   152:  #: Modify the amount scrolled by a touchpad. 
152:++++ Note this is only used 153:  #: for high precision scrolling devices on platforms such as macOS and 154:  #: Wayland. 
154:++++ Use negative numbers to change scroll direction.
@??? 155:   156:  #:     157:   158:  #: Mouse     159:   160:  # mouse hide wait 3.
0 161:   162:  #: Hide mouse cursor after the specified number of seconds of the 163:  #: mouse not being used. 
163:++++ Set to zero to disable mouse cursor hiding.
@??? 164:  #: Set to a negative value to hide the mouse cursor immediately when 165:  #: typing text.
@??? 166:   167:  # url color #0087bd 168:  # url style curly 169:   170:  #: The color and style for highlighting URLs on mouse-over. 
170:++++ url style 171:  #: can be one of: none, single, double, curly 172:   173:  # open url modifiers kitty mod 174:   175:  #: The modifier keys to press when clicking with the mouse on URLs to 176:  #: open the URL 177:   178:  # open url with default 179:   180:  #: The program with which to open URLs that are clicked on. 
180:++++ The 181:  #: special value default means to use the operating system's default 182:  #: URL handler.
@??? 183:   184:  # copy on select no 185:   186:  #: Copy to clipboard or a private buffer on select. 
186:++++ With this set to 187:  #: clipboard, simply selecting text with the mouse will cause the text 188:  #: to be copied to clipboard. 
188:++++ Useful on platforms such as macOS that 189:  #: do not have the concept of primary selections. 
189:++++ You can instead 190:  #: specify a name such as a1 to copy to a private kitty buffer 191:  #: instead. 
191:++++ Map a shortcut with the paste from buffer action to paste 192:  #: from this private buffer. 
192:++++ For example:: 193:   194:  #:     map cmd+shift+v paste from buffer a1 195:   196:  #: Note that copying to the clipboard is a security risk, as all 197:  #: programs, including websites open in your browser can read the 198:  #: contents of the system clipboard.
@??? 199:   200:  strip trailing spaces always 201:   202:  #: Remove spaces at the end of lines when copying to clipboard. 
202:++++ A 203:  #: value of smart will do it when using normal selections, but not 204:  #: rectangle selections. 
204:++++ always will always do it.
@??? 205:   206:  # rectangle select modifiers ctrl+alt 207:   208:  #: The modifiers to use rectangular selection (i.
e. 
208:++++ to select text in 209:  #: a rectangular block with the mouse) 210:   211:  # select by word characters :@-.
/ ~?&= +# 212:   213:  #: Characters considered part of a word when double clicking. 
213:++++ In 214:  #: addition to these characters any character that is marked as an 215:  #: alpha-numeric character in the unicode database will be matched.
@??? 216:   217:  # click interval -1.
0 218:   219:  #: The interval between successive clicks to detect double/triple 220:  #: clicks (in seconds). 
220:++++ Negative numbers will use the system default 221:  #: instead, if available, or fallback to 0.
5.
@??? 222:   223:  # focus follows mouse no 224:   225:  #: Set the active window to the window under the mouse when moving the 226:  #: mouse around 227:   228:  #:     229:   230:  #: Performance tuning     231:   232:  repaint delay 5  233:   234:  #: Delay (in milliseconds) between screen updates. 
234:++++ Decreasing it, 235:  #: increases frames-per-second (FPS) at the cost of more CPU usage.
@??? 236:  #: The default value yields ~100 FPS which is more than sufficient for 237:  #: most uses. 
237:++++ Note that to actually achieve 100 FPS you have to either 238:  #: set sync to monitor to no or use a monitor with a high refresh 239:  #: rate.
@??? 240:   241:  input delay 0 242:   243:  #: Delay (in milliseconds) before input from the program running in 244:  #: the terminal is processed. 
244:++++ Note that decreasing it will increase 245:  #: responsiveness, but also increase CPU usage and might cause flicker 246:  #: in full screen programs that redraw the entire screen on each loop, 247:  #: because kitty is so fast that partial screen updates will be drawn.
@??? 248:   249:  # sync to monitor yes 250:   251:  #: Sync screen updates to the refresh rate of the monitor. 
251:++++ This 252:  #: prevents tearing (https://en.
wikipedia.
org/wiki/Screen tearing) 253:  #: when scrolling. 
253:++++ However, it limits the rendering speed to the 254:  #: refresh rate of your monitor. 
254:++++ With a very high speed mouse/high 255:  #: keyboard repeat rate, you may notice some slight input latency. 
255:++++ If 256:  #: so, set this to no.
@??? 257:   258:  #:     259:   260:  #: Terminal bell     261:   262:  # enable audio bell yes 263:   264:  #: Enable/disable the audio bell. 
264:++++ Useful in environments that require 265:  #: silence.
@??? 266:   267:  # visual bell duration 0.
0 268:   269:  #: Visual bell duration. 
269:++++ Flash the screen when a bell occurs for the 270:  #: specified number of seconds. 
270:++++ Set to zero to disable.
@??? 271:   272:  # window alert on bell yes 273:   274:  #: Request window attention on bell. 
274:++++ Makes the dock icon bounce on 275:  #: macOS or the taskbar flash on linux.
@??? 276:   277:  # bell on tab yes 278:   279:  #: Show a bell symbol on the tab if a bell occurs in one of the 280:  #: windows in the tab and the window is not the currently focused 281:  #: window 282:   283:  # command on bell none 284:   285:  #: Program to run when a bell occurs.
@??? 286:   287:  #:     288:   289:  #: Window layout     290:   291:  # remember window size  yes 292:  # initial window width  640 293:  # initial window height 400 294:   295:  #: If enabled, the window size will be remembered so that new 296:  #: instances of kitty will have the same size as the previous 297:  #: instance. 
297:++++ If disabled, the window will initially have size 298:  #: configured by initial window width/height, in pixels. 
298:++++ You can use a 299:  #: suffix of "c" on the width/height values to have them interpreted 300:  #: as number of cells instead of pixels.
@??? 301:   302:  enabled layouts  horizontal 303:   304:  #: The enabled window layouts. 
304:++++ A comma separated list of layout names.
@??? 305:  #: The special value all means all layouts. 
305:++++ The first listed layout 306:  #: will be used as the startup layout. 
306:++++ For a list of available 307:  #: layouts, see the 308:  #: https://sw.
kovidgoyal.
net/kitty/index.
html#layouts.
@??? 309:   310:  # window resize step cells 2 311:  # window resize step lines 2 312:   313:  #: The step size (in units of cell width/cell height) to use when 314:  #: resizing windows. 
314:++++ The cells value is used for horizontal resizing 315:  #: and the lines value for vertical resizing.
@??? 316:   317:  # window border width 1.
0 318:   319:  #: The width (in pts) of window borders. 
319:++++ Will be rounded to the 320:  #: nearest number of pixels based on screen resolution. 
320:++++ Note that 321:  #: borders are displayed only when more than one window is visible.
@??? 322:  #: They are meant to separate multiple windows.
@??? 323:   324:  # draw minimal borders yes 325:   326:  #: Draw only the minimum borders needed. 
326:++++ This means that only the 327:  #: minimum needed borders for inactive windows are drawn. 
327:++++ That is only 328:  #: the borders that separate the inactive window from a neighbor. 
328:++++ Note 329:  #: that setting a non-zero window margin overrides this and causes all 330:  #: borders to be drawn.
@??? 331:   332:  # window margin width 0.
0 333:   334:  #: The window margin (in pts) (blank area outside the border) 335:   336:  # single window margin width -1000.
0 337:   338:  #: The window margin (in pts) to use when only a single window is 339:  #: visible. 
339:++++ Negative values will cause the value of 340:  #: window margin width to be used instead.
@??? 341:   342:  # window padding width 0.
0 343:   344:  #: The window padding (in pts) (blank area between the text and the 345:  #: window border) 346:   347:  # placement strategy center 348:   349:  #: When the window size is not an exact multiple of the cell size, the 350:  #: cell area of the terminal window will have some extra padding on 351:  #: the sides. 
351:++++ You can control how that padding is distributed with 352:  #: this option. 
352:++++ Using a value of center means the cell area will be 353:  #: placed centrally. 
353:++++ A value of top-left means the padding will be on 354:  #: only the bottom and right edges.
@??? 355:   356:  # active border color #00ff00 357:   358:  #: The color for the border of the active window. 
358:++++ Set this to none to 359:  #: not draw borders around the active window.
@??? 360:   361:  # inactive border color #cccccc 362:   363:  #: The color for the border of inactive windows 364:   365:  # bell border color #ff5a00 366:   367:  #: The color for the border of inactive windows in which a bell has 368:  #: occurred 369:   370:  # inactive text alpha 1.
0 371:   372:  #: Fade the text in inactive windows by the specified amount (a number 373:  #: between zero and one, with zero being fully faded).
@??? 374:   375:  # hide window decorations no 376:   377:  #: Hide the window decorations (title-bar and window borders). 
377:++++ Whether 378:  #: this works and exactly what effect it has depends on the window 379:  #: manager/operating system.
@??? 380:   381:  # resize debounce time 0.
1 382:   383:  #: The time (in seconds) to wait before redrawing the screen when a 384:  #: resize event is received. 
384:++++ On platforms such as macOS, where the 385:  #: operating system sends events corresponding to the start and end of 386:  #: a resize, this number is ignored.
@??? 387:   388:  # resize draw strategy static 389:   390:  #: Choose how kitty draws a window while a resize is in progress. 
390:++++ A 391:  #: value of static means draw the current window contents, mostly 392:  #: unchanged. 
392:++++ A value of scale means draw the current window contents 393:  #: scaled. 
393:++++ A value of blank means draw a blank window. 
393:++++ A value of size 394:  #: means show the window size in cells.
@??? 395:   396:  #:     397:   398:  #: Tab bar     399:   400:  # tab bar edge bottom 401:   402:  #: Which edge to show the tab bar on, top or bottom 403:   404:  # tab bar margin width 0.
0 405:   406:  #: The margin to the left and right of the tab bar (in pts) 407:   408:  tab bar style hidden 409:    410:  #: The tab bar style, can be one of: fade, separator or hidden. 
410:++++ In the 411:  #: fade style, each tab's edges fade into the background color, in the 412:  #: separator style, tabs are separated by a configurable separator.
@??? 413:   414:  # tab bar min tabs 2 415:   416:  #: The minimum number of tabs that must exist before the tab bar is 417:  #: shown 418:   419:  # tab switch strategy previous 420:   421:  #: The algorithm to use when switching to a tab when the current tab 422:  #: is closed. 
422:++++ The default of previous will switch to the last used 423:  #: tab. 
423:++++ A value of left will switch to the tab to the left of the 424:  #: closed tab. 
424:++++ A value of last will switch to the right-most tab.
@??? 425:   426:  # tab fade 0.
25 0.
5 0.
75 1 427:   428:  #: Control how each tab fades into the background when using fade for 429:  #: the tab bar style. 
429:++++ Each number is an alpha (between zero and one) 430:  #: that controls how much the corresponding cell fades into the 431:  #: background, with zero being no fade and one being full fade. 
431:++++ You 432:  #: can change the number of cells used by adding/removing entries to 433:  #: this list.
@??? 434:   435:  # tab separator " ┇" 436:   437:  #: The separator between tabs in the tab bar when using separator as 438:  #: the tab bar style.
@??? 439:   440:  # tab title template  title  441:   442:  #: A template to render the tab title. 
442:++++ The default just renders the 443:  #: title. 
443:++++ If you wish to include the tab-index as well, use something 444:  #: like:  index :  title . 
444:++++ Useful if you have shortcuts mapped for 445:  #: goto tab N.
@??? 446:   447:  # active tab foreground   #000 448:  # active tab background   #eee 449:  # active tab font style   bold-italic 450:  # inactive tab foreground #444 451:  # inactive tab background #999 452:  # inactive tab font style normal 453:   454:  #: Tab bar colors and styles 455:   456:  #:     457:   458:  #: Color scheme     459:   460:  # foreground #dddddd 461:  # background #000000 462:   463:  #: The foreground and background colors 464:   465:  # background opacity 1.
0 466:   467:  #: The opacity of the background. 
467:++++ A number between 0 and 1, where 1 is 468:  #: opaque and 0 is fully transparent. 
468:++++  This will only work if 469:  #: supported by the OS (for instance, when using a compositor under 470:  #: X11). 
470:++++ Note that it only sets the default background color's 471:  #: opacity. 
471:++++ This is so that things like the status bar in vim, 472:  #: powerline prompts, etc. 
472:++++ still look good. 
472:++++  But it means that if you 473:  #: use a color theme with a background color in your editor, it will 474:  #: not be rendered as transparent. 
474:++++  Instead you should change the 475:  #: default background color in your kitty config and not use a 476:  #: background color in the editor color scheme. 
476:++++ Or use the escape 477:  #: codes to set the terminals default colors in a shell script to 478:  #: launch your editor. 
478:++++  Be aware that using a value less than 1.
0 is a 479:  #: (possibly significant) performance hit. 
479:++++  If you want to dynamically 480:  #: change transparency of windows set dynamic background opacity to 481:  #: yes (this is off by default as it has a performance cost) 482:   483:  # dynamic background opacity no 484:   485:  #: Allow changing of the background opacity dynamically, using either 486:  #: keyboard shortcuts (increase background opacity and 487:  #: decrease background opacity) or the remote control facility.
@??? 488:   489:  # dim opacity 0.
75 490:   491:  #: How much to dim text that has the DIM/FAINT attribute set. 
491:++++ One 492:  #: means no dimming and zero means fully dimmed (i.
e. 
492:++++ invisible).
@??? 493:   494:  # selection foreground #000000 495:   496:  #: The foreground for text selected with the mouse. 
496:++++ A value of none 497:  #: means to leave the color unchanged.
@??? 498:   499:  # selection background #fffacd 500:   501:  #: The background for text selected with the mouse.
@??? 502:   503:   504:  #: The 16 terminal colors. 
504:++++ There are 8 basic colors, each color has a 505:  #: dull and bright version. 
505:++++ You can also set the remaining colors from 506:  #: the 256 color table as color16 to color255.
@??? 507:   508:  # color0 #000000 509:  # color8 #767676 510:   511:  #: black 512:   513:  # color1 #cc0403 514:  # color9 #f2201f 515:   516:  #: red 517:   518:  # color2  #19cb00 519:  # color10 #23fd00 520:   521:  #: green 522:   523:  # color3  #cecb00 524:  # color11 #fffd00 525:   526:  #: yellow 527:   528:  # color4  #0d73cc 529:  # color12 #1a8fff 530:   531:  #: blue 532:   533:  # color5  #cb1ed1 534:  # color13 #fd28ff 535:   536:  #: magenta 537:   538:  # color6  #0dcdcd 539:  # color14 #14ffff 540:   541:  #: cyan 542:   543:  # color7  #dddddd 544:  # color15 #ffffff 545:   546:  #: white 547:   548:  #:     549:   550:  #: Advanced     551:   552:  # shell .
@??? 553:   554:  #: The shell program to execute. 
554:++++ The default value of . 
554:++++ means to use 555:  #: whatever shell is set as the default shell for the current user.
@??? 556:  #: Note that on macOS if you change this, you might need to add 557:  #: --login to ensure that the shell starts in interactive mode and 558:  #: reads its startup rc files.
@??? 559:   560:  # editor .
@??? 561:   562:  #: The console editor to use when editing the kitty config file or 563:  #: similar tasks. 
563:++++ A value of . 
563:++++ means to use the environment variable 564:  #: EDITOR. 
564:++++ Note that this environment variable has to be set not just 565:  #: in your shell startup scripts but system-wide, otherwise kitty will 566:  #: not see it.
@??? 567:   568:  # close on child death no 569:   570:  #: Close the window when the child process (shell) exits. 
570:++++ If no (the 571:  #: default), the terminal will remain open when the child exits as 572:  #: long as there are still processes outputting to the terminal (for 573:  #: example disowned or backgrounded processes). 
573:++++ If yes, the window 574:  #: will close as soon as the child process exits. 
574:++++ Note that setting it 575:  #: to yes means that any background processes still using the terminal 576:  #: can fail silently because their stdout/stderr/stdin no longer work.
@??? 577:   578:  # allow remote control no 579:   580:  #: Allow other programs to control kitty. 
580:++++ If you turn this on other 581:  #: programs can control all aspects of kitty, including sending text 582:  #: to kitty windows, opening new windows, closing windows, reading the 583:  #: content of windows, etc. 
583:++++ Note that this even works over ssh 584:  #: connections.
@??? 585:   586:  # env  587:   588:  #: Specify environment variables to set in all child processes. 
588:++++ Note 589:  #: that environment variables are expanded recursively, so if you 590:  #: use:: 591:   592:  #:     env MYVAR1=a 593:  #:     env MYVAR2=  MYVAR1 /  HOME /b 594:   595:  #: The value of MYVAR2 will be a/<path to home directory>/b.
@??? 596:   597:  # update check interval 24 598:   599:  #: Periodically check if an update to kitty is available. 
599:++++ If an update 600:  #: is found a system notification is displayed informing you of the 601:  #: available update. 
601:++++ The default is to check every 24 hrs, set to zero 602:  #: to disable.
@??? 603:   604:  # startup session none 605:   606:  #: Path to a session file to use for all kitty instances. 
606:++++ Can be 607:  #: overridden by using the kitty --session command line option for 608:  #: individual instances. 
608:++++ See 609:  #: https://sw.
kovidgoyal.
net/kitty/index.
html#sessions in the kitty 610:  #: documentation for details. 
610:++++ Note that relative paths are interpreted 611:  #: with respect to the kitty config directory. 
611:++++ Environment variables 612:  #: in the path are expanded.
@??? 613:   614:  # clipboard control write-clipboard write-primary 615:   616:  #: Allow programs running in kitty to read and write from the 617:  #: clipboard. 
617:++++ You can control exactly which actions are allowed. 
617:++++ The 618:  #: set of possible actions is: write-clipboard read-clipboard write- 619:  #: primary read-primary. 
619:++++ You can additionally specify no-append to 620:  #: disable kitty's protocol extension for clipboard concatenation. 
620:++++ The 621:  #: default is to allow writing to the clipboard and primary selection 622:  #: with concatenation enabled. 
622:++++ Note that enabling the read 623:  #: functionality is a security risk as it means that any program, even 624:  #: one running on a remote server via SSH can read your clipboard.
@??? 625:   626:  # term xterm-kitty 627:   628:  #: The value of the TERM environment variable to set. 
628:++++ Changing this 629:  #: can break many terminal programs, only change it if you know what 630:  #: you are doing, not because you read some advice on Stack Overflow 631:  #: to change it. 
631:++++ The TERM variable is used by various programs to get 632:  #: information about the capabilities and behavior of the terminal. 
632:++++ If 633:  #: you change it, depending on what programs you run, and how 634:  #: different the terminal you are changing it to is, various things 635:  #: from key-presses, to colors, to various advanced features may not 636:  #: work.
@??? 637:   638:  #:     639:   640:  #: OS specific tweaks     641:   642:  # macos titlebar color system 643:   644:  #: Change the color of the kitty window's titlebar on macOS. 
644:++++ A value 645:  #: of system means to use the default system color, a value of 646:  #: background means to use the background color of the currently 647:  #: active window and finally you can use an arbitrary color, such as 648:  #: #12af59 or red. 
648:++++ WARNING: This option works by using a hack, as 649:  #: there is no proper Cocoa API for it. 
649:++++ It sets the background color 650:  #: of the entire window and makes the titlebar transparent. 
650:++++ As such it 651:  #: is incompatible with background opacity. 
651:++++ If you want to use both, 652:  #: you are probably better off just hiding the titlebar with 653:  #: hide window decorations.
@??? 654:   655:  # macos option as alt no 656:   657:  #: Use the option key as an alt key. 
657:++++ With this set to no, kitty will 658:  #: use the macOS native Option+Key = unicode character behavior. 
658:++++ This 659:  #: will break any Alt+key keyboard shortcuts in your terminal 660:  #: programs, but you can use the macOS unicode input technique. 
660:++++ You 661:  #: can use the values: left, right, or both to use only the left, 662:  #: right or both Option keys as Alt, instead.
@??? 663:   664:  # macos hide from tasks no 665:   666:  #: Hide the kitty window from running tasks (Option+Tab) on macOS.
@??? 667:   668:  # macos quit when last window closed no 669:   670:  #: Have kitty quit when all the top-level windows are closed. 
670:++++ By 671:  #: default, kitty will stay running, even with no open windows, as is 672:  #: the expected behavior on macOS.
@??? 673:   674:  # macos window resizable yes 675:   676:  #: Disable this if you want kitty top-level (OS) windows to not be 677:  #: resizable on macOS.
@??? 678:   679:  # macos thicken font 0 680:   681:  #: Draw an extra border around the font with the given width, to 682:  #: increase legibility at small font sizes. 
682:++++ For example, a value of 683:  #: 0.
75 will result in rendering that looks similar to sub-pixel 684:  #: antialiasing at common font sizes.
@??? 685:   686:  # macos traditional fullscreen no 687:   688:  #: Use the traditional full-screen transition, that is faster, but 689:  #: less pretty.
@??? 690:   691:  # macos show window title in menubar yes 692:   693:  #: Show the title of the currently active window in the macOS menu- 694:  #: bar, making use of otherwise wasted space.
@??? 695:   696:  # macos custom beam cursor no 697:   698:  #: Enable/disable custom mouse cursor for macOS that is easier to see 699:  #: on both light and dark backgrounds. 
699:++++ WARNING: this might make your 700:  #: mouse cursor invisible on dual GPU machines.
@??? 701:   702:  # linux display server auto 703:   704:  #: Choose between Wayland and X11 backends. 
704:++++ By default, an appropriate 705:  #: backend based on the system state is chosen automatically. 
705:++++ Set it 706:  #: to x11 or wayland to force the choice.
@??? 707:   708:  #:     709:   710:  #: Keyboard shortcuts     711:   712:  #: For a list of key names, see: GLFW keys 713:  #: <https://www.
glfw.
org/docs/latest/group  keys.
html>. 
713:++++ The name to 714:  #: use is the part after the GLFW KEY  prefix. 
714:++++ For a list of modifier 715:  #: names, see: GLFW mods 716:  #: <https://www.
glfw.
org/docs/latest/group  mods.
html> 717:   718:  #: On Linux you can also use XKB key names to bind keys that are not 719:  #: supported by GLFW. 
719:++++ See XKB keys 720:  #: <https://github.
com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon- 721:  #: keysyms.
h> for a list of key names. 
721:++++ The name to use is the part 722:  #: after the XKB KEY  prefix. 
722:++++ Note that you should only use an XKB key 723:  #: name for keys that are not present in the list of GLFW keys.
@??? 724:   725:  #: Finally, you can use raw system key codes to map keys. 
725:++++ To see the 726:  #: system key code for a key, start kitty with the kitty --debug- 727:  #: keyboard option. 
727:++++ Then kitty will output some debug text for every 728:  #: key event. 
728:++++ In that text look for ``native code`` the value of that 729:  #: becomes the key name in the shortcut. 
729:++++ For example: 730:   731:  #: .
. 
731:++++ code-block:: none 732:   733:  #:     on key input: glfw key: 65 native code: 0x61 action: PRESS mods: 0x0 text: 'a' 734:   735:  #: Here, the key name for the A key is 0x61 and you can use it with:: 736:   737:  #:     map ctrl+0x61 something 738:   739:  #: to map ctrl+a to something.
@??? 740:   741:  #: You can use the special action no op to unmap a keyboard shortcut 742:  #: that is assigned in the default configuration.
@??? 743:   744:  #: You can combine multiple actions to be triggered by a single 745:  #: shortcut, using the syntax below:: 746:   747:  #:     map key combine <separator> action1 <separator> action2 <separator> action3 .
.
.
@??? 748:   749:  #: For example:: 750:   751:  #:     map kitty mod+e combine : new window : next layout 752:   753:  #: this will create a new window and switch to the next available 754:  #: layout 755:   756:  #: You can use multi-key shortcuts using the syntax shown below:: 757:   758:  #:     map key1>key2>key3 action 759:   760:  #: For example:: 761:   762:  #:     map ctrl+f>2 set font size 20 763:   764:  # kitty mod ctrl+shift 765:   766:  #: The value of kitty mod is used as the modifier for all default 767:  #: shortcuts, you can change it in your kitty.
conf to change the 768:  #: modifiers for all the default shortcuts.
@??? 769:   770:  # clear all shortcuts no 771:   772:  #: You can have kitty remove all shortcut definition seen up to this 773:  #: point. 
773:++++ Useful, for instance, to remove the default shortcuts.
@??? 774:   775:  #: Clipboard     776:   777:  # map kitty mod+c copy to clipboard 778:   779:  #: There is also a copy or interrupt action that can be optionally 780:  #: mapped to Ctrl+c. 
780:++++ It will copy only if there is a selection and 781:  #: send an interrupt otherwise.
@??? 782:   783:  # map kitty mod+v  paste from clipboard 784:  # map kitty mod+s  paste from selection 785:  # map shift+insert paste from selection 786:  # map kitty mod+o  pass selection to program 787:   788:  #: You can also pass the contents of the current selection to any 789:  #: program using pass selection to program. 
789:++++ By default, the system's 790:  #: open program is used, but you can specify your own, the selection 791:  #: will be passed as a command line argument to the program, for 792:  #: example:: 793:   794:  # map kitty mod+y kitten kitty grab/grab.
py 795:  # map Alt+i kitten kitty grab/grab.
py 796:   797:  #:     map kitty mod+o pass selection to program firefox 798:   799:  #: You can pass the current selection to a terminal program running in 800:  #: a new kitty window, by using the @selection placeholder:: 801:   802:  #:     map kitty mod+y new window less @selection 803:   804:  #:     805:   806:  #: Scrolling     807:   808:  # map kitty mod+up        scroll line up 809:  # map kitty mod+k         scroll line up 810:  # map kitty mod+down      scroll line down 811:  # map kitty mod+j         scroll line down 812:  # map kitty mod+page up   scroll page up 813:  # map kitty mod+page down scroll page down 814:  # map kitty mod+home      scroll home 815:  # map kitty mod+end       scroll end 816:  map kitty mod+h         show scrollback 817:   818:  #: You can pipe the contents of the current screen + history buffer as 819:  #: STDIN to an arbitrary program using the ``pipe`` function. 
819:++++ For 820:  #: example, the following opens the scrollback buffer in less in an 821:  #: overlay window:: 822:   823:  #:     map f1 pipe @ansi overlay less +G -R 824:   825:  #: For more details on piping screen and buffer contents to external 826:  #: programs, see pipe.
@??? 827:   828:  #:     829:   830:  #: Window management     831:   832:  # map kitty mod+enter new window 833:   834:  #: You can open a new window running an arbitrary program, for 835:  #: example:: 836:   837:  #:     map kitty mod+y      new window mutt 838:   839:  #: You can open a new window with the current working directory set to 840:  #: the working directory of the current window using:: 841:   842:  #:     map ctrl+alt+enter    new window with cwd 843:   844:  #: You can open a new window that is allowed to control kitty via the 845:  #: kitty remote control facility by prefixing the command line with @.
@??? 846:  #: Any programs running in that window will be allowed to control 847:  #: kitty. 
847:++++ For example:: 848:   849:  #:     map ctrl+enter new window @ some program 850:   851:  # map kitty mod+n new os window 852:  # map kitty mod+w close window 853:  # map kitty mod+] next window 854:  # map kitty mod+[ previous window 855:  # map kitty mod+f move window forward 856:  # map kitty mod+b move window backward 857:  # map kitty mod+` move window to top 858:  # map kitty mod+r start resizing window 859:  # map kitty mod+1 first window 860:  # map kitty mod+2 second window 861:  # map kitty mod+3 third window 862:  # map kitty mod+4 fourth window 863:  # map kitty mod+5 fifth window 864:  # map kitty mod+6 sixth window 865:  # map kitty mod+7 seventh window 866:  # map kitty mod+8 eighth window 867:  # map kitty mod+9 ninth window 868:  # map kitty mod+0 tenth window 869:  #:     870:   871:  #: Tab management     872:   873:  # map kitty mod+right next tab 874:  # map kitty mod+left  previous tab 875:  # map kitty mod+t     new tab 876:  # map kitty mod+q     close tab 877:  # map kitty mod+. 
877:++++     move tab forward 878:  # map kitty mod+,     move tab backward 879:  # map kitty mod+alt+t set tab title 880:   881:  #: You can also create shortcuts to go to specific tabs, with 1 being 882:  #: the first tab, 2 the second tab and -1 being the previously active 883:  #: tab:: 884:   885:  #:     map ctrl+alt+1 goto tab 1 886:  #:     map ctrl+alt+2 goto tab 2 887:   888:  #: Just as with new window above, you can also pass the name of 889:  #: arbitrary commands to run when using new tab and use 890:  #: new tab with cwd. 
890:++++ Finally, if you want the new tab to open next to 891:  #: the current tab rather than at the end of the tabs list, use:: 892:   893:  #:     map ctrl+t new tab !neighbor [optional cmd to run] 894:  #:     895:   896:  #: Layout management     897:   898:  # map kitty mod+l next layout 899:   900:  #: You can also create shortcuts to switch to specific layouts:: 901:   902:  #:     map ctrl+alt+t goto layout tall 903:  #:     map ctrl+alt+s goto layout stack 904:   905:  #: Similarly, to switch back to the previous layout:: 906:   907:  #:    map ctrl+alt+p last used layout 908:  #:     909:   910:  #: Font sizes     911:   912:  #: You can change the font size for all top-level kitty OS windows at 913:  #: a time or only the current one.
@??? 914:   915:  # map kitty mod+equal     change font size all +2.
0 916:  # map kitty mod+minus     change font size all -2.
0 917:  # map kitty mod+backspace change font size all 0 918:   919:  #: To setup shortcuts for specific font sizes:: 920:   921:  #:     map kitty mod+f6 change font size all 10.
0 922:   923:  #: To setup shortcuts to change only the current OS window's font 924:  #: size:: 925:   926:  #:     map kitty mod+f6 change font size current 10.
0 927:  #:     928:   929:  #: Select and act on visible text     930:   931:  #: Use the hints kitten to select text and either pass it to an 932:  #: external program or insert it into the terminal or copy it to the 933:  #: clipboard.
@??? 934:   935:  # map kitty mod+e kitten hints 936:   937:  #: Open a currently visible URL using the keyboard. 
937:++++ The program used 938:  #: to open the URL is specified in open url with.
@??? 939:   940:  # map kitty mod+p>f kitten hints --type path --program - 941:   942:  #: Select a path/filename and insert it into the terminal. 
942:++++ Useful, for 943:  #: instance to run git commands on a filename output from a previous 944:  #: git command.
@??? 945:   946:  # map kitty mod+p>shift+f kitten hints --type path 947:   948:  #: Select a path/filename and open it with the default open program.
@??? 949:   950:  # map kitty mod+p>l kitten hints --type line --program - 951:   952:  #: Select a line of text and insert it into the terminal. 
952:++++ Use for the 953:  #: output of things like: ls -1 954:   955:  # map kitty mod+p>w kitten hints --type word --program - 956:   957:  #: Select words and insert into terminal.
@??? 958:   959:  # map kitty mod+p>h kitten hints --type hash --program - 960:   961:  #: Select something that looks like a hash and insert it into the 962:  #: terminal. 
962:++++ Useful with git, which uses sha1 hashes to identify 963:  #: commits 964:   965:   966:  #: The hints kitten has many more modes of operation that you can map 967:  #: to different shortcuts. 
967:++++ For a full description see kittens/hints.
@??? 968:  #:     969:   970:  #: Miscellaneous     971:   972:  # map kitty mod+f11    toggle fullscreen 973:  # map kitty mod+f10    toggle maximized 974:  # map kitty mod+u      kitten unicode input 975:  # map kitty mod+f2     edit config file 976:  # map kitty mod+escape kitty shell window 977:   978:  #: Open the kitty shell in a new window/tab/overlay/os window to 979:  #: control kitty using commands.
@??? 980:   981:  # map kitty mod+a>m    set background opacity +0.
1 982:  # map kitty mod+a>l    set background opacity -0.
1 983:  # map kitty mod+a>1    set background opacity 1 984:  # map kitty mod+a>d    set background opacity default 985:  # map kitty mod+delete clear terminal reset active 986:   987:  #: You can create shortcuts to clear/reset the terminal. 
987:++++ For example:: 988:   989:  #:     # Reset the terminal 990:  #:     map kitty mod+f9 clear terminal reset active 991:  #:     # Clear the terminal screen by erasing all contents 992:  #:     map kitty mod+f10 clear terminal clear active 993:  #:     # Clear the terminal scrollback by erasing it 994:  #:     map kitty mod+f11 clear terminal scrollback active 995:  #:     # Scroll the contents of the screen into the scrollback 996:  #:     map kitty mod+f12 clear terminal scroll active 997:   998:  #: If you want to operate on all windows instead of just the current 999:  #: one, use all instead of :italic`active`.
@??? 1000:   1001:  #: It is also possible to remap Ctrl+L to both scroll the current 1002:  #: screen contents into the scrollback buffer and clear the screen, 1003:  #: instead of just clearing the screen:: 1004:   1005:  #:     map ctrl+l combine : clear terminal scroll active : send text normal,application  x0c 1006:   1007:   1008:  #: You can tell kitty to send arbitrary (UTF-8) encoded text to the 1009:  #: client program when pressing specified shortcut keys. 
1009:++++ For example:: 1010:   1011:  #:     map ctrl+alt+a send text all Special text 1012:   1013:  #: This will send "Special text" when you press the ctrl+alt+a key 1014:  #: combination. 
1014:++++  The text to be sent is a python string literal so you 1015:  #: can use escapes like  x1b to send control codes or  u21fb to send 1016:  #: unicode characters (or you can just input the unicode characters 1017:  #: directly as UTF-8 text). 
1017:++++ The first argument to send text is the 1018:  #: keyboard modes in which to activate the shortcut. 
1018:++++ The possible 1019:  #: values are normal or application or kitty or a comma separated 1020:  #: combination of them. 
1020:++++  The special keyword all means all modes. 
1020:++++ The 1021:  #: modes normal and application refer to the DECCKM cursor key mode 1022:  #: for terminals, and kitty refers to the special kitty extended 1023:  #: keyboard protocol.
@??? 1024:   1025:  #: Another example, that outputs a word and then moves the cursor to 1026:  #: the start of the line (same as pressing the Home key):: 1027:   1028:  #:     map ctrl+alt+a send text normal Word x1b[H 1029:  #:     map ctrl+alt+a send text application Word x1bOH 1030:   1031:  #:     1032:   1033:  #     