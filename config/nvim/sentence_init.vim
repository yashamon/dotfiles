1:  call plug#begin('~/.
vim/plugged')       2:  "Plug 'TimUntersberger/neogit'  3:  "Plug 'tpope/vim-fugitive'  4:  "Plug 'junegunn/gv.
vim' 5:  Plug 'cohama/agit.
vim' 6:  Plug 'kabouzeid/nvim-lspinstall',   'branch': 'main'   7:  Plug 'preservim/nerdcommenter'     8:  "Plug 'pope/vim-obsession' 9:  "Plug 'xolox/vim-easytags' 10:  Plug 'nvim-lua/plenary.
nvim' 11:  Plug 'windwp/nvim-spectre' 12:  Plug 'xolox/vim-misc' 13:  "Plug 'terrortylor/nvim-comment',   'branch': 'main'   14:  Plug 'kevinhwang91/nvim-bqf' 15:  Plug 'justinhoward/fzf-neoyank'  16:  Plug 'stefanhepp/pplatex' 17:  " lua require("lsp config") 18:  Plug 'hrsh7th/vim-vsnip' 19:  Plug 'svermeulen/vim-cutlass' 20:  Plug 'kristijanhusak/completion-tags' 21:  Plug 'kyazdani42/nvim-web-devicons' " for file icons 22:  Plug 'kyazdani42/nvim-tree.
lua',  23:  Plug 'nvim-lua/completion-nvim' 24:  Plug 'hrsh7th/vim-vsnip-integ' 25:  Plug 'neovim/nvim-lspconfig' 26:  Plug 'nvim-lua/diagnostic-nvim' 27:  " Plug 'rafamadriz/friendly-snippets'   28:  " Make sure you use single quotes 29:  " Shorthand notation; fetches https://github.
valid git URL is allowed 32:  " Plug 'https://github.
com/junegunn/vim-github-dashboard.
git' 33:  " Group dependencies, vim-snippets depends on ultisnips  34:   Plug 'tpope/vim-surround' 35:  " Plug 'neovim/node-host' 36:  Plug 'projekt0n/github-nvim-theme',    'branch': 'main'   37:  Plug 'rktjmp/lush.
nvim',   'branch': 'main'   38:  " Plug 'brennier/quicktex' 39:  " Plug 'ellisonleao/gruvbox.
nvim',   'branch': 'main'   40:  " Plug 'cyansprite/Extract' 41:  Plug 'gioele/vim-autoswap' 42:  Plug 'nvim-treesitter/nvim-treesitter',  'do': ':TSUpdate'   43:  " Plug 't9md/vim-smalls' 44:  Plug 'skywind3000/asyncrun.
vim' 45:  Plug 'kevinhwang91/nvim-bqf',   'branch': 'main'   46:  " if you install fzf as system package like `pacman -S fzf` in ArchLinux, 47:  " please comment next line 48:  Plug 'junegunn/fzf',   'do':   -> fzf#install()     49:  " highly recommended 50:  Plug 'sindrets/diffview.
nvim',   'branch': 'main'    51:  " Plug 'sindrets/diffview.
nvim',   'branch': 'main'    52:  "Plug 'rmagatti/auto-session',   'branch': 'main'   53:  Plug 'kyazdani42/nvim-web-devicons' 54:  Plug 'justinmk/vim-sneak' 55:  Plug 'kyazdani42/blue-moon' 56:  Plug 'Shougo/neoyank.
vim'  57:  if has('nvim') 58:     Plug 'Shougo/denite.
nvim',   'do': ':UpdateRemotePlugins'   59:   else 60:     Plug 'Shougo/denite.
nvim' 61:     Plug 'roxma/nvim-yarp' 62:     Plug 'roxma/vim-hug-neovim-rpc' 63:   endif 64:  " Plug 'SirVer/ultisnips'  a;sldfkjsfls jfkj 65:  Plug 'tpope/vim-fugitive' 66:  Plug 'eugen0329/vim-esearch' 67:  " Plug 'haya14busa/incsearch.
vim' 68:  " Plug 'haya14busa/incsearch-fuzzy.
vim' 69:  Plug 'Raimondi/vim search objects' 70:  Plug 'terryma/vim-multiple-cursors' 71:  " " On-demand loading 72:  Plug 'junegunn/goyo.
vim' 73:  " " Plug 'Shougo/deoplete.
nvim',   'do': ':UpdateRemotePlugins'   74:  Plug 'equalsraf/neovim-gui-shim' 75:   76:  "  Plug 'morhetz/gruvbox' 77:  Plug 'sainnhe/gruvbox-material' 78:  Plug 'vim-pandoc/vim-pandoc' 79:  Plug 'vim-pandoc/vim-pandoc-syntax'  80:   81:  "  Plug 'scrooloose/nerdtree',   'on': 'NERDTreeFind'   82:   83:   " Plugin outside ~/.
vim/plugged with post-update hook 84:  Plug 'junegunn/fzf',   'do': '.
/install --all'   85:  Plug 'junegunn/fzf.
vim' 86:  " 87:  " 88:  "  Plug 'ervandew/supertab' 89:  " Plug 'Shougo/vimproc.
vim' 90:   91:  Plug 'easymotion/vim-easymotion' 92:   93:  Plug 'mbbill/undotree',   'on': 'UndotreeToggle'   94:   '  95:   96:  Plug 'lifepillar/vim-solarized8' 97:   98:  Plug 'vim-scripts/AutoTag' 99:   100:  Plug 'vim-scripts/vim-auto-save' 101:   102:  Plug 'vim-pandoc/vim-pandoc' 103:   104:  Plug 'yashamon/vim-snippets' 105:   106:  Plug 'lervag/vimtex' 107:  " colorschemes 108:  " 109:  Plug 'altercation/vim-colors-solarized' 110:   111:  Plug 'reedes/vim-colors-pencil' 112:   113:  Plug 'vim-scripts/oceanlight' 114:   115:  Plug 'gosukiwi/vim-atom-dark' 116:   117:  Plug 'dracula/vim' 118:   119:  Plug 'flazz/vim-colorschemes' 120:   121:  Plug 'NLKNguyen/papercolor-theme' 122:   123:  " Unmanaged plugin (manually installed and updated) 124:  " Plug '~/my-prototype-plugin' 125:  " Add plugins to &runtimepath 126:  call plug#end() 127:  "syntax on   128:  " filetype plugin indent on 129:  "  General Settings   130:  " 131:  set switchbuf=newtab 132:  set t ut= 133:  " let g:python3 host prog='/usr/bin/python3.
9' 134:  " let g:python3 host prog='/usr/bin/python3.
9' 135:   136:  set clipboard+=unnamedplus	" yank to the system register (*) by default 137:  " TAB setting  138:     set expandtab        "replace <TAB> with spaces 139:     set softtabstop=3  140:     set shiftwidth=3   141:     set termguicolors 142:  set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50 143:  		   ,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor 144:  		   ,sm:block-blinkwait175-blinkoff150-blinkon175 145:  " au GUIEnter * set fullscreen 146:  " if has("gui running") 147:    " set fuoptions=maxvert,maxhorz 148:    " au GUIEnter * set fullscreen 149:     " set foldcolumn=10 150:     " set formatoptions=ant 151:  " set wrapmargin=0 152:  " set nohlsearch 153:  " " set tags= ~/.
tags 154:  " highlight SignColumn guibg=bg 155:  "       endif     156:  " if has("autocmd") 157:  "   au BufReadPost * if line("' "") > 1 && line("' "") <= line(" ") | exe "normal! g' "" | endif 158:  " endif 159:    " autocmd BufWinLeave *.
* mkview 160:    " autocmd BufWinEnter *.
* silent loadview 161:     " set foldcolumn=2 162:  "  highlight foldcolumn ctermfg=256 ctermbg=bg 163:  " autocmd Colorscheme * highlight FoldColumn guifg=black guibg=bg 164:  au VIMEnter set spell 165:   set timeout 166:     set timeoutlen=0 167:       set ttimeoutlen=0 168:   169:         "NeoVim handles ESC keys as alt+key set this to solve the 170:         "problem 171:           if has('nvim') 172:                set ttimeout 173:                     set ttimeoutlen=0 174:                       endif 175:    au VIMEnter * let g:surround 108 =   176:        'q':  " `` r''" 177:           178:  let g:tex flavor = "latex" 179:  let g:tex isk = '@,48-57,58, ,192-255' 180:  let g:tex conceal = "" 181:   182:  set tags+=~/texmf/bibtex/bib/tags 183:  "set tags+=~/Dropbox/workspace/tags 184:    " set formatoptions=ant 185:    " set wrapmargin=1 186:  " set tw=80 187:  " set shada="NONE" 188:  set wrap 189:  set linebreak 190:  " set breakat=" " 191:  " set list  " list disables linebreak 192:  set textwidth=0 193:  set wrapmargin=0 194:  set hid 195:  set autochdir 196:  set guioptions-=r  197:  set guioptions-=l 198:  set inccommand=split 199:  set mouse= 200:  set bs=2		" allow backspacing over everything in insert mode  201:  set undofile                " Save undo's after file closes 202:  set undodir=~/workspace/undo " where to save undo histories 203:  set undolevels=100000         " How many undos 204:  set undoreload=10000		 205:  set ruler		" show the cursor position all the time 206:  set autoread		" auto read when file is changed from outside 207:  set nohlsearch 208:  set noswapfile 209:  set showmatch		" Cursor shows matching ) and   210:  set nocursorline 211:  set showmode		" Show current mode 212:  set wildchar=<TAB>	" start wild expansion in the command line using <TAB> 213:  set wildmenu            " wild char completion menu 214:  let maplocalleader = "  " 215:  " ignore these files while expanding wild chars 216:  set wildignore=*.
o,*.
class,*.
pyc 217:   218:  "set autoindent		" auto indentation 219:  set incsearch		" incremental search 220:  set nobackup		" no *~ backup files 221:  set copyindent		" copy the previous indentation on autoindenting 222:  set ignorecase		" ignore case when searching 223:  set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise 224:  "set smarttab		" insert tabs on the start of a line according to context 225:   226:  " disable sound on errors 227:  set noerrorbells 228:  set novisualbell 229:  set tm=500 230:  " set macmeta 231:  " auto reload vimrc when editing it 232:  " autocmd! bufwritepost ~/.
config/nvim/init.
vim source ~/.
config/nvim/init.
vim 233:  syntax on		" syntax highlight 234:  " set hlsearch		" search highlighting 235:  " 236:  if has("gui running")	" GUI color and font settings 237:    set guifont=Source  Code  Pro  Regular:h16 238:    set background=dark  239:  "  set cursorline        " highlight current line 240:    " colorscheme gruvbox  241:    highlight CursorLine  guibg=#003853 ctermbg=24  gui=none cterm=none 242:  else 243:  " terminal color settings 244:  set background=dark 245:    " set t Co=256          " 256 color mode 246:  " Example config in VimScript 247:  let g:github function style = "italic" 248:  let g:github sidebars = ["qf", "vista kind", "terminal", "packer"] 249:   250:  " Change the "hint" color to the "orange" color, and make the "error" color bright red 251:  " let g:github colors = [hint = "orange", error = "#ff0000"] 252:  " Load the colorscheme 253:  " colorscheme github dark  254:  set background=dark 255:  colorscheme blue-moon 256:  " colorscheme gruvbox  257:  " highlight Normal ctermbg=none 258:  hi clear SpellBad 259:  hi SpellBad cterm=underline 260:  " Set style for gVim 261:  hi SpellBad gui=undercurl 262:  hi MatchParen cterm=undercurl ctermbg=none ctermfg=magenta 263:  endif 264:   265:  "Autocommands 266:  " 267:   268:   269:  autocmd BufReadPost * if @  !~# ' .
git[ /  ]COMMIT EDITMSG ' && line("' "") > 1 && line("' "") <= line(" ") | exe "normal! g` "" | endif  270:  au FileType Makefile set noexpandtab  271:  au FileType tex set spell   272:  au FileType tex silent execute "!echo " . 
272:++++ v:servername . 
272:++++ " > ~/servername.
txt"    273:  au FileType tex hi SpellBad cterm=undercurl 274:  au Filetype tex vmap q xi<CR><CR><CR><CR><ESC>kkicom<tab><esc>p<A-j> 275:   276:  " au FileType tex set background=dark  277:  au TextYankPost * lua vim.
highlight.
on yank  higroup="IncSearch", timeout=150, on visual=true   278:  au TextYankPost * call neoyank# append() 279:  " au TextDeletePost * lua vim.
highlight.
on delete  higroup="IncSearch", timeout=150, on visual=true  ;a;sldfjasl fj slj a;slfjasdfj 280:   281:  "au FileType tex autocmd User SneakLeave set syntax=tex 282:  "au FileType tex autocmd User SneakEnter set syntax=text 283:  " 284:  " 285:  " FUNCTIONS 286:  " 287:  " I haven't found how to hide this function (yet) 288:  " function! RestoreRegister() 289:  "   let @" = s:restore reg 290:  "   return '' 291:  " endfunction 292:  " 293:  " function! s:Repl() 294:  "     let s:restore reg = @" 295:  "     return "p@=RestoreRegister() <cr>" 296:  " endfunction 297:  " 298:  " " NB: this supports "rp that replaces the selection by the contents of @r 299:  " vnoremap <silent> <expr> p <sid>Repl() 300:   301:  " " Change Color when entering 302:  " Insert Mode augroup CursorLine 303:  "    au! 304:  "  if has("gui running") 305:  "  else 306:  "      au InsertEnter * setlocal cursorline 307:  "        au InsertLeave * setlocal nocursorline 308:  "     endif 309:  "        augroup END 310:  " function! DelTagOfFile(file) 311:  "   let fullpath = a:file 312:  "   let cwd = getcwd() 313:  "   let tagfilename = cwd . 
313:++++ "/tags" 314:  "   let f = substitute(fullpath, cwd . 
314:++++ "/", "", "") 315:  "   let f = escape(f, '.
/') 316:  "   let cmd = 'sed -i "/' . 
316:++++ f . 
316:++++ '/d" "' . 
316:++++ tagfilename . 
316:++++ '"' 317:  "   let resp = system(cmd) 318:  " endfunction 319:  function! Break() 320:   let n=130-virtcol('.
') 321:   <Esc>ni <Esc><Esc> 322:  endfunction 323:   324:   325:  function Gitview() 326:     cd /root/web2 ; git add . 
326:++++ ; git commit -m -a ; git push origin gh-pages 327:  endfunction 328:  function Light() 329:  set background=light 330:  colorscheme gruvbox 331:  set background=light 332:     " highlight Normal ctermfg=black 333:  " highlight  CursorLine cterm=NONE ctermbg=black ctermfg=none 334:  " hi MatchParen cterm=underline ctermbg=none ctermfg=magenta 335:  endfunction 336:  function Pencil() 337:     set background=light 338:     colorscheme pencil 339:     " highlight Normal ctermfg=black 340:  " highlight  CursorLine cterm=NONE ctermbg=black ctermfg=none 341:  " hi MatchParen cterm=underline ctermbg=none ctermfg=magenta 342:  endfunction 343:   344:   345:  function Dark() 346:     set background=dark 347:     colorscheme gruvbox 348:  " highlight SpellBad cterm=underline 349:  " hi MatchParen cterm=underline ctermbg=none ctermfg=magenta 350:     " highlight Normal guibg=#848484 351:     " highlight normal guifg=grey 352:  endfunction 353:   354:  " Default Colors for CursorLine  355:  " highlight  CursorLine cterm=NONE ctermbg=black ctermfg=none 356:  " autocmd InsertEnter * set cursorline *  357:  " " Revert Color to default when leaving Insert Mode 358:  "  autocmd InsertLeave * highlight  CursorLine ctermbg=none ctermfg=None 359:  " if &term =~ "xterm  |rxvt" 360:  "   " use an orange cursor in insert mode 361:  "      let &t SI = " <Esc>]12;orange x7" 362:  "   "     " use a red cursor otherwise 363:  "          let &t EI = " <Esc>]12;white x7" 364:  "            silent !echo -ne " 033]12;red 007" 365:  "   "           " reset cursor when vim exits 366:  "                autocmd VimLeave * silent !echo -ne " 033]112 007" 367:  "   "               " use  003]12;gray 007 for gnome-terminal 368:  "                  endif 369:  " TAB setting  370:     set expandtab        "replace <TAB> with spaces 371:     set softtabstop=3  372:     set shiftwidth=3  373:   374:     "       							 375:   376:  function! CurDir() 377:      let curdir = substitute(getcwd(),  HOME, "~", "") 378:      return curdir 379:  endfunction 380:   381:  function! HasPaste() 382:      if &paste 383:          return '[PASTE]' 384:      else 385:          return '' 386:      endif 387:  endfunction 388:  " status line   389:  set laststatus=2 390:  set statusline=    HasPaste()  < -15.
25( f ) m r h   w     391:  set statusline+=      [  &ff / Y]  392:  set statusline+=       < 20.
30(  hostname() :  CurDir()  )   393:  set statusline+= = -10.
( l, c V )   p  / L 394:   395:   396:  "  397:   398:   399:   400:   401:  "---------------------------------------------------------------------------  402:  " USEFUL SHORTCUTS 403:  "---------------------------------------------------------------------------  404:  " set leader to ;  405:  let mapleader=';' 406:  let g:mapleader=';' 407:   408:  " open the error console 409:  " move to next error 410:  map <leader>] :cn<CR> 411:  " move to the prev error 412:  map <leader>[ :cp<CR> 413:   414:  " --- move around splits   415:  " move to and maximize the below split  416:  map <C-J> <C-W>j<C-W>  417:  " 418:  "move to and maximize the above split  419:  map <C-K> <C-W>k<C-W>  420:  " move to and maximize the left split  421:  nmap <c-h> <c-w>h<c-w><bar> 422:  " move to and maximize the right split   423:  nmap <c-l> <c-w>l<c-w><bar> 424:  set wmw=0                     " set the min width of a window to 0 so we can maximize others  425:  set wmh=0                     " set the min height of a window to 0 so we can maximize others 426:  "   427:   428:  " move around tabs. 
428:++++ conflict with the original screen top/bottom 429:  " comment them out if you want the original H/L 430:  " go to prev tab  431:  "map <S-H> gT 432:  " go to next tab 433:  "map <S-L> gt 434:  " new tab 435:  " map <leader>t :tabnew<CR> 436:  " close tab 437:  " map <leader>c :tabclose<CR>  438:  " ,/ turn off search highlighting 439:  "nmap <leader>/ :nohl<CR> 440:   441:  " Bash like keys for the command line 442:  cnoremap <C-A>      <Home> 443:  cnoremap <C-E>      <End> 444:  cnoremap <C-K>      <C-U> 445:   446:  " ,p toggles paste mode 447:  nmap <leader>p :set paste!<BAR>set paste?<CR> 448:   449:  " allow multiple indentation/deindentation in visual mode 450:  vnoremap < <gv 451:  vnoremap > >gv 452:   453:  " :cd. 
453:++++ change working directory to that of the current file 454:  cmap cd. 
454:++++ lcd  :p:h 455:   456:   457:   458:   459:  " Enable omni completion. 
459:++++ (Ctrl-X Ctrl-O) 460:  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags 461:  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS 462:  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete 463:  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags 464:  autocmd FileType css set omnifunc=csscomplete#CompleteCSS 465:  autocmd FileType c set omnifunc=ccomplete#Complete 466:  autocmd FileType java set omnifunc=javacomplete#Complete 467:  autocmd Filetype tex setlocal fo=nt 468:  autocmd Filetype tex setlocal wrapmargin=0 469:  " use syntax complete if nothing else available 470:  if has("autocmd") && exists("+omnifunc") 471:    autocmd Filetype * 472:                 	if &omnifunc == "" | 473:                 		setlocal omnifunc=syntaxcomplete#Complete | 474:                 	endif 475:  endif 476:   477:  set cot-=preview "disable doc preview in omnicomplete 478:   479:  " make CSS omnicompletion work for SASS and SCSS 480:  autocmd BufNewFile,BufRead *.
scss             set ft=scss.
css 481:  autocmd BufNewFile,BufRead *.
sass             set ft=sass.
css 482:   483:  "---------------------------------------------------------------------------  484:  " ENCODING SETTINGS 485:  "---------------------------------------------------------------------------  486:  set encoding=utf-8                                   487:  set termencoding=utf-8 488:  set fileencoding=utf-8 489:  set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1 490:   491:   492:   493:  "---------------------------------------------------------------------------  494:  " PLUGIN SETTINGS 495:  "---------------------------------------------------------------------------  496:   497:           "Easy Motion 498:  " change the default EasyMotion shading to something more readable with Solarized 499:  " hi link EasyMotionTarget ErrorMsg 500:  " hi link EasyMotionShade  Comment 501:  " easymotion highlight colors 502:  hi link EasyMotionTarget Search 503:  hi link EasyMotionTarget2First Search 504:  hi link EasyMotionTarget2Second Search 505:  hi link EasyMotionShade Comment 506:   507:   508:   509:  " --- AutoClose - Inserts matching bracket, paren, brace or quote  510:  " fixed the arrow key problems caused by AutoClose 511:  "if !has("gui running")	 512:     "set term=linux 513:     "imap OA <ESC>ki 514:     "imap OB <ESC>ji 515:     "imap OC <ESC>li 516:     "imap OD <ESC>hi 517:   518:     "nmap OA k 519:     "nmap OB j 520:     "nmap OC l 521:     "nmap OD  522:  "YankRing 523:  " " --- Command-T 524:  " let g:CommandTMaxHeight = 15  525:  " -- SuperTab 526:  " let g:SuperTabDefaultCompletionType = "context" 527:  " let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover'] 528:  " let g:SuperTabContextDiscoverDiscovery= ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>"] 529:     530:  "--NerdTree 531:  let g:NERDTreeMapUpdir="<S-h>" 532:  " General mappings, remaps, maps 533:  " 534:  " 'tComment' 535:  " let g:tcommentMapLeaderOp1=';'  536:  " "map <leader>c <Leader>    537:  noremap q <nop>  538:  map <leader>q q 539:  nnoremap <leader>sv :source  MYVIMRC<CR> 540:  nnoremap <leader>e :NvimTreeToggle<CR> 541:   542:   543:  vnoremap <m-s> :s///gc<left><left><left><left>  544:  inoremap <m-s> <esc>: s///gc<left><left><left><left> 545:  nnoremap <m-s> : s///gc<left><left><left>  546:  vmap <M-.
> t.
<CR>h 547:  nmap <M-.
> t.
<CR>h 548:  map <up> <nop> 549:  imap <up> <nop> 550:  imap <down> <nop> 551:  map <down> <nop> 552:  noremap <ScrollWheelUp>      <nop> 553:  noremap <S-ScrollWheelUp>    <nop> 554:  noremap <C-ScrollWheelUp>    <nop> 555:  noremap <ScrollWheelDown>    <nop> 556:  noremap <S-ScrollWheelDown>  <nop> 557:  noremap <C-ScrollWheelDown>  <nop> 558:  noremap <ScrollWheelLeft>    <nop> 559:  noremap <S-ScrollWheelLeft>  <nop> 560:  noremap <C-ScrollWheelLeft>  <nop> 561:  noremap <ScrollWheelRight>   <nop> 562:  noremap <S-ScrollWheelRight> <nop> 563:  noremap <C-ScrollWheelRight> <nop> 564:  inoremap   / 565:  inoremap /   566:  vnoremap p "0dP    567:  noremap D "0D 568:  nnoremap dd "0dd 569:  noremap c "0c 570:  noremap C " C 571:  noremap s " x 572:  noremap x "+x 573:  vnoremap y "+y  574:  nnoremap y "+y  575:  nnoremap p "+p  576:  nnoremap q p 577:  " Softwrap  578:  nmap D "0dg  579:  nmap V vg  580:  nmap A g a  581:  map 0 g  582:  map 9 g  583:   584:  " map p <Plug>(miniyank-startput) 585:  " map P <Plug>(miniyank-startPut) 586:  " nmap p Plug>(miniyank-autoPut) 587:  " vmap p <Plug>(miniyank-autoput) 588:  " vmap P <Plug>(miniyank-autoPut) 589:   590:  map <Leader>n <Plug>(miniyank-cycle) 591:  nnoremap <Left> :bnext<CR> 592:  nnoremap <Right> :bprevious<CR> 593:  " tnoremap <Esc> <C- >  594:  nnoremap < :tabp<CR> 595:  nnoremap > :tabn<CR> 596:  " nnoremap <leader>n :tabedit  <CR> 597:  imap <M-j> <C-j> 598:  map <S-w> /  <CR> 599:  map <S-b> ?  <CR> 600:  map <A-w> / <CR> 601:  map <A-b> ? <CR> 602:   603:  map <C-q> <Esc>:Goyo<cr>:qa!<CR>  604:  map <m-q> <esc>:Goyo<cr>:qa<cr> 605:  map <M-d> <Esc>:bdelete<CR> 606:  noremap f / 607:  noremap F ? 608:  " inoremap .
<Esc> .
<CR><Esc><leader>j 609:  " inoremap .
<Space> .
<CR><Esc><leader>j 610:  " noremap S :S  611:  " 612:  " 613:  " function! Sneak() 614:  "     syntax off 615:  "     hi! link Sneak Normal 616:  "     hi! link SneakScope Normal 617:  "     execute 'normal!  <Plug>Sneak s' 618:  "     syntax on 619:  " endfunction 620:  " map n <Plug>Sneak ; 621:  " map N <Plug>Sneak , 622:  " map t <Plug>(smalls-excursion) 623:  " let g:smalls auto jump=1 624:  " let g:smalls auto jump timeout=0 625:   626:   627:   628:      " xmap t <Plug>Sneak s 629:      " xmap T <Plug>Sneak S 630:      " omap t <Plug>Sneak s 631:      " omap T <Plug>Sneak S 632:  noremap   /  <CR>hv?  <CR>l 633:  noremap # /  <CR>v?  <CR> 634:  noremap @ / <CR>v? <CR> 635:  map j gj 636:  map k gk 637:  noremap <Space> .
@??? 638:  noremap <S-Space> t<Space><enter> 639:  nmap <S-h> <C-w>h 640:  nmap <S-l> <C-w>l 641:  noremap <leader>r <C-r> 642:  noremap <S-k> <C-u> 643:  noremap <S-j> <C-d> 644:  nnoremap <leader>j J 645:  nnoremap <leader>k K 646:  map ' " 647:  nnoremap <Backspace> i<Backspace><Esc> 648:  noremap <leader>c <leader>c<Space> 649:  map <A-/> <Leader>   650:  map <A-r>  <C-r> 651:  map <C-c> gc 652:  nnoremap ` ~ 653:  nnoremap . 
653:++++ ` 654:  nmap 1 <C-o> 655:  nmap 2 <C-i> 656:  nmap <S-CR> k  657:   658:  noremap <D-d> <C-d> 659:  map ;s <Esc>:w<CR> 660:  noremap <A-d> <C-d> 661:  noremap <M-d> <C-d> 662:  noremap <D-u> <C-u> 663:  noremap <A-u> <C-u> 664:  map <Leader>tt :term CR; etags -R 665:  " this mapping Enter key to <C-y> to chose the current highlight item  666:  " and close the selection list, same as other IDEs.
@??? 667:  " CONFLICT with some plugins like tpope/Endwise 668:  inoremap <expr> <CR> pumvisible() ? " <C-y>" : " <C-g>u <CR>" 669:  nnoremap <silent> <Leader>y :YRGetElem<CR> 670:  map ' " 671:  inoremap <D-]> <C-x><C-]> 672:  inoremap <C-]> <C-x><C-]> 673:  " text editting mappings 674:   675:  "Extract mappings 676:  " " mappings for putting 677:          " nmap p <Plug>(extract-put) 678:          " nmap P <Plug>(extract-Put) 679:          " " mappings for cycling 680:          " map <leader>p <Plug>(extract-sycle) 681:          " map <leader>S <Plug>(extract-Sycle) 682:          " map <c-s> <Plug>(extract-cycle) 683:          " " mappings for visual 684:          " vmap p <Plug>(extract-put) 685:          " vmap P <Plug>(extract-Put) 686:          " " mappings for insert 687:          " imap <m-v> <Plug>(extract-completeReg) 688:          " imap <c-v> <Plug>(extract-completeList) 689:          " imap <c-s> <Plug>(extract-cycle) 690:          " imap <m-s> <Plug>(extract-sycle) 691:          " imap <m-S> <Plug>(extract-Sycle)  692:   693:  " " au FileType tex,text,md noremap <CR> <Esc>a<Space><Esc>80i <Esc><Esc>vg0di 694:  " <<<<<<< HEAD 695:  " au FileType tex,text,md inoremap <CR> <Space><Space><Esc>80i <Esc><Esc>vg0di 696:  " ======= 697:  " 698:  " "  au FileType tex,text,md inoremap <CR> <Space><Space><Esc>80i <Esc><Esc>vg0di 699:  " 700:  " " au FileType tex,text,md inoremap <CR> <Space><Space><Esc>80i <Esc><Esc>vg0di 701:  " 702:  " >>>>>>> d28191cda0221ed8f5d2a044c7f97c403c6ed642 703:   704:  au FileType tex,text,md nmap 0 g  705:  au FileType tex,text,md noremap 9 g  706:  " au FileType tex,text,md nmap A g a 707:  au FileType tex,text,md nnoremap dd " g dg g  708:  " au FileType tex,text,md inoremap <A-i> <CR> 709:  " au FileType tex,text,md nnoremap <A-i> a<CR> 710:  " au FileType tex,text,md nnoremap <CR> J0 711:   712:  au FileType tex,text,md inoremap <A><CR> <CR> 713:  " au FileType tex,text,md inoremap <CR> <Esc><CR> 714:  " au FileType tex,text,md inoremap . 
714:++++ .
<CR><ESC>J0i 715:  " au FileType tex,text,md inoremap <leader>. 
715:++++ .
@??? 716:   717:  " au FileType tex,text,md inoremap .
<CR> .
<CR><ESC>J0 718:  " au FileType tex,text,md inoremap .
<Space> .
<CR><ESC>J0 719:  " au FileType tex,text,md inoremap .
<ESC> .
<CR><ESC>J0 720:  au FileType tex,text,md inoremap <leader>cr <CR> 721:  au FileType tex,text,md noremap map o gj0i<CR><ESC>gki  722:  nnoremap <C-j> a<CR><Esc>k   723:   724:  "Neovim mappings 725:  :tnoremap <S-h> <C- ><C-n><C-w>h 726:  :tnoremap <S-j> <C- ><C-n><C-w>j 727:  :tnoremap <S-k> <C- ><C-n><C-w>k 728:  :tnoremap <S-l> <C- ><C-n><C-w>l 729:  tnoremap <Left> :tbnext<CR> 730:  tnoremap <Right> :tbprevious<CR> 731:  tnoremap <Leader>e <C- ><C-n>  732:  " imap <Backspace>   733:   734:  "  Sneak 735:  let g:sneak#use ic scs = 1 736:   737:  map t <Plug>Sneak s 738:  " map t <ESC>:syntax off <CR>t: syntax on<CR> 739:  "  map t :syntaxoff <Plug>Sneak s 740:  map T <Plug>Sneak S 741:  let g:sneak#s next = 1 742:   let g:sneak#label = 1 743:   744:  " FZF a;lskdfjsalfj slfjs f;lsajdf ;alskdjf;salk jfsld;f j;k ajsd;kj 745:  " 746:  noremap <m-t> :BTags<cr> 747:  noremap S <Esc>:BLines<CR>     748:  noremap L <Esc>:AsyncRun sentence.
sh  ;nvr sentence  <CR> 749:  noremap <m-l> viwhy<esc>:bdelete<cr>:<c-r>+<cr>:Goyo x<cr> 750:  noremap <m-b> <Esc>:Buffers<CR>  751:  noremap F <Esc>:GFiles<CR>  752:  map <A-e> :FZF ~<CR> 753:   754:  " vimtex settings 755:  " 756:  " 757:  " 758:  " let g:vimtex view general viewer 759:  "            = '/Applications/Skim.
app/Contents/SharedSupport/displayline' 760:  " let g:vimtex view general options = '-r @line @pdf @tex' 761:  let g:latex view general viewer = 'zathura' 762:  let g:vimtex view method = "zathura" 763:  let g:vimtex indent enabled =0  764:  let g:vimtex syntax enabled=0  765:  function! ToggleQuickFix() 766:      if empty(filter(getwininfo(), 'v:val.
quickfix')) 767:          VimtexErrors 768:      else 769:          cclose 770:          Goyo x 771:      endif 772:  endfunction 773:   774:  au filetype tex nnoremap <silent> <leader>s :call ToggleQuickFix()<cr> 775:   776:  " let g:vimtex quickfix method='pplatex'  777:  " let g:vimtex latexmk callback hooks = ['UpdateSkim'] 778:  "    function! UpdateSkim(status) 779:  "      if !a:status | return | endif 780:  " 781:  "      let l:out = b:vimtex.
out() 782:  "      let l:tex = expand(' :p') 783:  "      let l:cmd = [g:vimtex view general viewer, '-r'] 784:  "      if !empty(system('pgrep Skim')) 785:  "        call extend(l:cmd, ['-g']) 786:  "      endif 787:  "      if has('nvim') 788:  "        call jobstart(l:cmd + [line('.
'), l:out, l:tex]) 789:  "      elseif has('job') 790:  "        call job start(l:cmd + [line('.
'), l:out, l:tex]) 791:  "      else 792:  "        call system(join(l:cmd + [line('.
'), shellescape(l:out), shellescape(l:tex)], ' ')) 793:  "      endif 794:  "    endfunction 795:  " let g:vimtex latexmk build dir = '.
/build' 796:  "   'build dir' : '.
/build', 797:   798:      let g:vimtex compiler latexmk =   799:        'background' : 0, 800:            'callback' : 1, 801:        'continuous' : 1, 802:        'options' : [ 803:          '-pdf', 804:          '-verbose', 805:          '-file-line-error', 806:          '-synctex=1', 807:          '-interaction=nonstopmode', 808:        ], 809:         810:  let g:vimtex compiler progname = 'nvr' 811:  nmap  <leader>v <Esc>:w<CR>:VimtexView<CR> 812:  let g:vimtex quickfix mode = 0 813:  let g:vimtex fold enabled = 1  814:  let g:vimtex fold manual = 1  815:   816:   817:  let g:vimtex fold types=   818:              'preamble' :   , 819:              'items' :   , 820:              'comments' :  'enabled' : 1 , 821:              'envs' :   822:                'blacklist' : [],    823:                'whitelist' : [],    824:               , 825:              'env options' :   , 826:              'markers' :   , 827:              'sections' :   828:                'parse levels' : 0, 829:                'sections' : [       830:                  ' (add)?part', 831:                  ' (chapter|addchap)', 832:                  ' (section|addsec)', 833:                  'subsection', 834:                  'subsubsection', 835:                ], 836:                'parts' : [          837:                  'appendix', 838:                  'frontmatter', 839:                  'mainmatter', 840:                  'backmatter', 841:                ], 842:               , 843:              'cmd single' :   844:                'cmds' : [          845:                  'hypersetup', 846:                  'tikzset', 847:                  'pgfplotstableread', 848:                  'lstset', 849:                ], 850:               , 851:              'cmd single opt' :   852:                'cmds' : [           853:                  'usepackage', 854:                  'includepdf', 855:                ], 856:               , 857:              'cmd multi' :   858:                'cmds' : [           859:                  ' (re)?new (command|environment)', 860:                  'providecommand', 861:                  'presetkeys', 862:                  'Declare (Multi|Auto)?CiteCommand', 863:                  'Declare (Index)? (Field|List|Name) (Format|Alias)', 864:                ], 865:               , 866:              'cmd addplot' :   867:                'cmds' : [           868:                  'addplot[+3]?', 869:                ], 870:               , 871:               872:   873:   874:   875:  " let  g:vimtex fold types defaults = 'preamble, sections, comments' 876:  " nmap <leader>l :silent execute "AsyncRun latexmk -pvc -pdf -file-line-error -synctex=1 -interaction=nonstopmode -recorder  "<CR> 877:  nmap <leader>l :VimtexCompile<CR> 878:  " nmap <leader>s <Esc>:VimtexErrors<CR> 879:  " nmap <leader>x <C-w><up><Esc>:VimtexErrors<CR>:Goyo x<CR> 880:  nmap <leader>g :Goyo x<CR> 881:  nmap <leader>G :Goyo<CR> 882:  nmap <leader>p :Denite neoyank -default-action=append<CR> 883:   884:  " NB: this supports "rp that replaces the selection by the contents of @r 885:  " Auto updating Ctags 886:  " autocmd VimLeave * exe ":silent ! ctags -R" 887:  map :tags  exe ":silent ! /usr/local/bin/ctags -R" 888:   889:  "Nerd Tree 890:  " map <leader>e :NERDTreeFind<CR> 891:  " map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR> 892:  " 893:  " 894:  " 895:  "Vifm 896:  let g:vifmLiveCwd=1 897:  let g:vifmUseCurrent=1 898:   899:  "Autosave and autocommit   alsdfj 900:   901:  let g:auto save = 1   902:  "au FileType vim let g:autosave = 0 903:  let g:auto save in insert mode = 0 904:  let g:auto save silent = 0 905:  autocmd BufWritePost * silent execute 'AsyncRun if git rev-parse --is-inside-work-tree || git rev-parse --git-dir > /dev/null 2>&1 ; then git add   ; git commit -m -a ; git push --all origin; fi' 906:   907:  " let inside git repo=" (git rev-parse --is-inside-work-tree 2>/dev/null)" 908:  " autocmd BufWritePost * silent execute 'AsyncRun if git rev-parse --is-inside-work-tree 2>/dev/null ; then git add   ; git commit -m -a ; git push --all origin; fi' 909:  " autocmd BufWritePost * <Esc>:AsyncRun 'if [ -d .
git ] || git rev-parse --git-dir > /dev/null 2>&1 ; then git add   ; git commit -m ; git push --all origin; fi' 910:  " "Highlight 911:  " hi MatchParen cterm=underline ctermbg=none ctermfg=none 912:  " hi MatchParen guibg=NONE guifg=green gui=NONE 913:      " 914:      " 915:      " 916:      " UndoTree   917:          noremap <Leader>u :UndotreeToggle<CR> 918:          " If undotree is opened, it is likely one wants to interact with it.
@??? 919:          let g:undotree SetFocusWhenToggle=1 920:          noremap <D-z> u 921:          noremap <S-C-z> <C-r> 922:          " noremap <C-z> u 923:      "   924:  nnoremap <C-e> :let g:ctrlp match window = 925:             'bottom,order:btt,min:1,max:1000,results:1000'<CR>:CtrlPTag<CR> 926:   927:  autocmd FileType qf nnoremap <buffer> <Enter> <C-W><Enter><C-W>T:Goyo x<CR> 928:  autocmd FileType qf nnoremap  <buffer> <A>-q :q:Goyo x<CR> 929:   930:  " Latex shortcuts 931:  "Latex compile.
@??? 932:  "them to an external terminal and run there.
@??? 933:  " map <Leader>l :tabe  <CR><Esc>:term ; latexmk -pvc -pdf -file-line-error -synctex=1 -interaction=nonstopmode -recorder  <CR><leader>e 934:  "Zathura forward search 935:  " map <Leader>v <Esc>:silent !zathura --synctex-forward <Ctrl+R>=line('.
'):1: :p  :p:h/build/ :r.
pdf<CR><CR> 936:  "source ~/.
anyname   937:  "au filetype tex filetype indent off 938:  "  GUI Stuff    939:  command -nargs=? Guifont call rpcnotify(0, 'Gui', 'SetFont', " <args >") | let g:Guifont="<args>" 940:  let g:Guifont="Source Code Pro Light:h16" 941:   942:  " Deoplete 943:   944:  " map <silent> <leader>g :silent execute "!(cd /root/web2 ; git add . 
944:++++ ; git commit -m -a ; git push origin gh-pages) > /dev/null"<CR> 945:  set directory= HOME/Downloads 946:  let g:goyo width=60 947:  " fuzzy search 948:  " function! s:config fuzzyall(.
.
.
) abort 949:  "   return extend(copy(  950:  "       'converters': [ 951:  "         incsearch#config#fuzzy#converter(), 952:  "         incsearch#config#fuzzyspell#converter() 953:  "       ], 954:  "      ), get(a:, 1,   )) 955:  " endfunction 956:  " noremap <silent><expr> f incsearch#go(<SID>config fuzzyall()) 957:  " noremap <silent><expr> F  incsearch#go(<SID>config fuzzyall( 'command': '?' )) 958:  " noremap <silent><expr> gF incsearch#go(<SID>config fuzzyall( 'is stay': 1 )) 959:  " map f <Plug>(incsearch-fuzzyspell-/) 960:  " map F <Plug>(incsearch-fuzzyspell-?) 961:  " map gF <Plug>(incsearch-fuzzyspell-stay) 962:  " map <silent> <leader>g :silent !cd /root/web2<CR>:silent !git add .
<CR>:silent !git commit -m -a<CR>:silent !git push origin gh-pages<CR> 963:  " let g:deoplete#enable at startup = 1 964:  " map <silent> <leader>g :silent call Gitview() 965:  " map <silent> <leader>g :silent !cd /root/web2 ; git add .
<CR>:silent git commit -m -a ; silent !git push origin gh-pages<CR> 966:  " This is how I use PDFViewer with Neovim and LaTexBox.
@??? 967:  " 968:  "Load some useful plugins with vundle 969:  " 970:  " 971:  " hi! link Sneak Normal 972:  " hi! link SneakScope Normal 973:   974:  "LUA 975:  lua <<EOF 976:  require'nvim-tree'.
setup() 977:  EOF 978:  lua <<EOF 979:  require'nvim-treesitter.
configs'.
setup    980:      -- 981:      --highlight =   enable = true  , 982:      incremental selection =   enable = true  , 983:      textobjects =   enable = true  , 984:      indent =   enable = true  , 985:    986:  EOF 987:   988:  lua <<EOF 989:  require'nvim-treesitter.
configs'.
setup   990:    incremental selection =   991:      enable = true, 992:      keymaps =   993:        init selection = "gnn", 994:        node incremental = "grn", 995:        scope incremental = "grc", 996:        node decremental = "grm", 997:       , 998:     , 999:    1000:  EOF 1001:  " set foldlevel=20 1002:  " set foldmethod=expr 1003:  " set foldexpr=nvim treesitter#foldexpr() 1004:  " set foldmethod=expr foldexpr=getline(v:lnum)=~'  s*'.
&commentstring[0] 1005:   1006:   1007:  " Quicktex 1008:  " let g:quicktex trigger=" t" 1009:  " let g:quicktex tex =   1010:  "      ' ' : " <ESC>:call search('<+.
*+>') <CR> " c/+>/e <CR>", 1011:  "      'm'   : ' ( <+++>  ) <++>', 1012:  "      'prf' : "  begin proof  <CR><+++> <CR>  end proof ", 1013:  "    1014:  " 1015:  " let g:quicktex math =   1016:  "      ' ': " <ESC>:call search('<+.
*+>') <CR> " c/+>/e <CR>", 1017:  "      'fr'   : ' mathcal R  ', 1018:  "      'eq'   : '= ', 1019:  "      'set'  : '   <+++>    <++>', 1020:  "      'frac' : ' frac <+++>  <++>  <++>', 1021:  "      'one'  : '1 ', 1022:  "      'st'   : ': ', 1023:  "      'in'   : ' in ', 1024:  "      'bn'   : ' mathbb N  ', 1025:  "    1026:  " 1027:  " NOTE: You can use other key to expand snippet.
@??? 1028:   1029:  " vsnip stuff  1030:  " 1031:  " Use <Tab> and <S-Tab> to navigate through popup menu 1032:  inoremap <expr> <up> pumvisible() ? " <C-n>" : " <Tab>" 1033:  inoremap <expr> <down> pumvisible() ? " <C-p>" : " <S-Tab>" 1034:   1035:  " Set completeopt to have a better completion experience 1036:  set completeopt=menuone,noinsert,noselect 1037:   1038:  " Avoid showing message extra message when using completion 1039:  set shortmess+=c 1040:  " imap <tab> <Plug>(completion smart tab) 1041:  " imap <s-tab> <Plug>(completion smart s tab) 1042:  let g:completion enable snippet = 'vim-vsnip' 1043:  let g:vsnip snippet dir = ' HOME/dotfiles/snippets'  1044:   1045:  " completion nvim 1046:  " 1047:  " 1048:  " 1049:  function! PackagerInit() 1050:    call packager#add('kristijanhusak/vim-packager') 1051:    call packager#add('nvim-lua/completion-nvim') 1052:    call packager#add('hrsh7th/vim-vsnip-integ') 1053:  endfunction 1054:   1055:  " let g:completion chain complete list =   1056:  "         'default': [ 1057:  "             'complete items': ['lsp'] , 1058:  "             'complete items': ['tags'] , 1059:  "             'complete items': ['snippet'] ,  1060:  "            ]  1061:   1062:  " Or combine with lsp 1063:  let g:completion chain complete list =   1064:          'default': [ 1065:              'complete items': ['snippet', 'tags', 'lsp'] , 1066:           ]  1067:  let g:completion enable auto popup = 0 1068:  imap <silent> <M-Space> <Plug>(completion trigger) 1069:   1070:  let g:vsnip snippet dir = '~/dotfiles/snippets' 1071:  imap <expr> <Tab>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>' 1072:  smap <expr> <Tab>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>' 1073:   1074:  " Expand or jump 1075:  imap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>' 1076:  smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>' 1077:   1078:  " Jump forward or backward 1079:    imap <expr> <M-j>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>' 1080:    smap <expr> <M-j>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>' 1081:  imap <expr> <M-k> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>' 1082:  smap <expr> <M-k> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>' 1083:   1084:  " Select or cut text to use as  TM SELECTED TEXT in the next snippet.
@??? 1085:  " See https://github.
com/hrsh7th/vim-vsnip/pull/50 1086:  " 1087:  lua << EOF 1088:  require'lspconfig'.
texlab.
setup   1089:   1090:  EOF 1091:  lua << EOF 1092:  require'lspconfig'.
jsonls.
setup   1093:  EOF 1094:   1095:   1096:   1097:  lua << EOF 1098:  require'lspconfig'.
rust analyzer.
setup   1099:  EOF 1100:  " set foldexpr=nvim treesitter#foldexpr() 1101:  " 1102:  lua << EOF 1103:  local nvim lsp = require('lspconfig') 1104:  -- Use an on attach function to only map the following keys 1105:  -- after the language server attaches to the current buffer 1106:  local on attach = function(client, bufnr) 1107:    local function buf set keymap(.
.
.
) vim.
api.
nvim buf set keymap(bufnr, .
.
.
) end 1108:    local function buf set option(.
.
.
) vim.
api.
nvim buf set option(bufnr, .
.
.
) end 1109:   1110:    -- Enable completion triggered by <c-x><c-o> 1111:    buf set option('omnifunc', 'v:lua.
vim.
lsp.
omnifunc') 1112:   1113:    -- Mappings.
@??? 1114:    local opts =   noremap=true, silent=true   1115:   1116:    -- See `:help vim.
lsp.
*` for documentation on any of the below functions 1117:    buf set keymap('n', 'gD', '<cmd>lua vim.
lsp.
buf.
declaration()<CR>', opts) 1118:    buf set keymap('n', 'gd', '<cmd>lua vim.
lsp.
buf.
definition()<CR>', opts) 1119:    buf set keymap('n', 'K', '<cmd>lua vim.
lsp.
buf.
hover()<CR>', opts) 1120:    buf set keymap('n', 'gi', '<cmd>lua vim.
lsp.
buf.
implementation()<CR>', opts) 1121:    buf set keymap('n', '<C-k>', '<cmd>lua vim.
lsp.
buf.
signature help()<CR>', opts) 1122:    buf set keymap('n', '<space>wa', '<cmd>lua vim.
lsp.
buf.
add workspace folder()<CR>', opts) 1123:    buf set keymap('n', '<space>wr', '<cmd>lua vim.
lsp.
buf.
remove workspace folder()<CR>', opts) 1124:    buf set keymap('n', '<space>wl', '<cmd>lua print(vim.
inspect(vim.
lsp.
buf.
list workspace folders()))<CR>', opts) 1125:    buf set keymap('n', '<space>D', '<cmd>lua vim.
lsp.
buf.
type definition()<CR>', opts) 1126:    buf set keymap('n', '<space>rn', '<cmd>lua vim.
lsp.
buf.
rename()<CR>', opts) 1127:    buf set keymap('n', '<space>ca', '<cmd>lua vim.
lsp.
buf.
code action()<CR>', opts) 1128:    buf set keymap('n', 'lr', '<cmd>lua vim.
lsp.
buf.
references()<CR>', opts) 1129:    buf set keymap('n', '<space>e', '<cmd>lua vim.
lsp.
diagnostic.
show line diagnostics()<CR>', opts) 1130:    buf set keymap('n', '[d', '<cmd>lua vim.
lsp.
diagnostic.
goto prev()<CR>', opts) 1131:    buf set keymap('n', ']d', '<cmd>lua vim.
lsp.
diagnostic.
goto next()<CR>', opts) 1132:    buf set keymap('n', '<space>q', '<cmd>lua vim.
lsp.
diagnostic.
set loclist()<CR>', opts) 1133:    buf set keymap('n', '<space>f', '<cmd>lua vim.
lsp.
buf.
formatting()<CR>', opts) 1134:   1135:  end 1136:   1137:  -- Use a loop to conveniently call 'setup' on multiple servers and 1138:  -- map buffer local keybindings when the language server attaches 1139:  local servers =   'pyright', 'rust analyzer', 'tsserver', 'texlab', 'jsonls'  1140:  for  , lsp in ipairs(servers) do 1141:    nvim lsp[lsp].
setup   1142:      on attach = on attach, 1143:      flags =   1144:        debounce text changes = 150, 1145:        1146:      1147:  end 1148:  EOF 1149:   1150:  lua require'lspconfig'.
texlab.
setup on attach=require'completion'.
on attach  1151:   1152:  "Lsp install 1153:   1154:  lua << EOF 1155:  local function setup servers() 1156:    require'lspinstall'.
setup() 1157:    local servers = require'lspinstall'.
installed servers() 1158:    for  , server in pairs(servers) do 1159:      require'lspconfig'[server].
setup   1160:    end 1161:  end 1162:   1163:  setup servers() 1164:   1165:  -- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim 1166:  require'lspinstall'.
post install hook = function () 1167:    setup servers() -- reload installed servers 1168:    vim.
cmd("bufdo e") -- this triggers the FileType autocmd that starts the server 1169:  end 1170:  EOF 1171:   1172:  nnoremap <leader>y :FZFNeoyank<cr> 1173:  nnoremap <leader>Y :FZFNeoyank  P<cr> 1174:  vnoremap <leader>y :FZFNeoyankSelection<cr> 1175:   1176:  nnoremap <leader>p :FZFNeoyank +<cr>  1177:  nnoremap <leader>1 :FZFNeoyank 1<cr> 1178:  nnoremap <leader>P :FZFNeoyank " P+<cr> 1179:  vnoremap <leader>p :FZFNeoyankSelection +<cr> 1180:  unmap <leader>c 1181:  map <leader>c <Plug>NERDCommenterToggle 1182:   1183:  " Replace the default dictionary completion with fzf-based fuzzy completion 1184:   1185:  inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')   1186:   1187:   1188:  let g:agit enable auto refresh = 1 1189:  let g:agit max author name width =1 1190:  let g:agit log width = 10 
