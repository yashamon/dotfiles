0: call plug#begin('~/.vim/plugged')@ 1: Plug 'tzachar/cmp-fuzzy-buffer'@ 2: Plug 'ggandor/leap.nvim'@ 3: Plug 'ibhagwan/fzf-lua',   'branch': 'main' @ 4: Plug 'tzachar/fuzzy.nvim'@ 5: Plug 'romgrk/fzy-lua-native'@ 6: Plug 'vijaymarupudi/nvim-fzf'@ 7: Plug 'kyazdani42/nvim-web-devicons'@ 8: Plug 'metalelf0/nvim-floatedit',    'branch': 'main' @ 9: Plug 'phaazon/hop.nvim'@ 10: Plug 'ggandor/lightspeed.nvim'@ 11: Plug 'glacambre/firenvim',   'do':   _ -> firenvim#install(0)  @ 12: Plug 'is0n/fm-nvim'@ 13: Plug 'williamboman/mason.nvim'@ 14: Plug 'williamboman/mason-lspconfig.nvim'@ 15: Plug 'neovim/nvim-lspconfig'@ 16: Plug 'williamboman/nvim-lsp-installer',   'branch': 'main' @ 17: Plug 'famiu/feline.nvim'@ 18: Plug 'hrsh7th/nvim-cmp',   'branch': 'main' @ 19: Plug 'hrsh7th/cmp-buffer',   'branch': 'main' @ 20: Plug 'hrsh7th/cmp-vsnip',   'branch': 'main'  @ 21: Plug 'hrsh7th/vim-vsnip'@ 22: Plug 'hrsh7th/vim-vsnip-integ'@ 23: Plug 'hrsh7th/cmp-nvim-lsp',   'branch': 'main'  @ 24: Plug 'ray-x/cmp-treesitter'@ 25: Plug 'quangnguyen30192/cmp-nvim-tags',    'branch': 'main'   @ 26: Plug 'voldikss/vim-floaterm'@ 27: Plug 'terrortylor/nvim-comment',   'branch': 'main' @ 28: Plug 'justinhoward/fzf-neoyank'@ 29: Plug 'rakr/vim-one'@ 30: Plug 'nvim-treesitter/nvim-treesitter',  'do': ':TSUpdate'  @ 31: Plug 'Shougo/neoyank.vim' @ 32: Plug 'Shougo/denite.nvim',   'do': ':UpdateRemotePlugins'  @ 33: Plug 'skywind3000/asyncrun.vim'         @ 34: Plug 'junegunn/fzf',   'do':   -> fzf#install()   @ 35: Plug 'neovim/nvim-lspconfig'@ 36: Plug 'junegunn/fzf.vim'@ 37: Plug 'mbbill/undotree',   'on': 'UndotreeToggle' @ 38: Plug 'lewis6991/spellsitter.nvim'@ 39: Plug 'ggVGc/vim-fuzzysearch'@ 40: Plug 'hrsh7th/vim-searchx'@ 41: Plug 'Pocco81/true-zen.nvim',   'branch': 'main' @ 42: @ 43: " Plug 'folke/zen-mode.nvim',   'branch': 'main'  @ 44: " Plug 'karb94/neoscroll.nvim'@ 45: " Plug 'rlane/pounce.nvim'@ 46: " Plug 'vim-scripts/AutoTag'@ 47: " Plug 'rebelot/kanagawa.nvim'@ 48: " Plug 'reedes/vim-pencil' @ 49: " Plug 'folke/which-key.nvim',   'branch': 'main' @ 50: " Plug 'folke/zen-mode.nvim',    'branch': 'main'  @ 51: " Plug 'radenling/vim-dispatch-neovim'  @ 52: " Plug 'tpope/vim-dispatch'@ 53: " Plug 'sheerun/vim-polyglot' @ 54: " Plug 'https://gitlab.com/yorickpeterse/nvim-dd.git',    'branch': 'main' @ 55: " Plug 'luukvbaal/stabilize.nvim' @ 56: " Plug 'nvim-lua/plenary.nvim'@ 57: " Plug 'nvim-telescope/telescope.nvim',@ 58: " Plug 'nvim-treesitter/playground@ 59: " Plug 'glepnir/lspsaga.nvim'@ 60: " If you are using Vim-Plug@ 61: " " Plug 'kdheepak/cmp-latex-symbols',   'branch': 'main'  @ 62: " " Plug 'kabouzeid/nvim-lspinstall',   'branch': 'main' @ 63: " "Plug 'pope/vim-obsession'@ 64: " " Plug 'nvim-lua/plenary.nvim'@ 65: " " Plug 'windwp/nvim-spectre'@ 66: " " For luasnip user .@
@@ 67: " Plug 'L3MON4D3/LuaSnip'@ 68: " " Plug 'saadparwaiz1/cmp_luasnip'@ 69: " "Plug 'steelsojka/completion-buffers'@ 70: " " Plug 'neovim/node-host'@ 71: " Plug 'projekt0n/github-nvim-theme',    'branch': 'main' @ 72: " Plug 'rktjmp/lush.nvim',   'branch': 'main' @ 73: " " Plug 'cyansprite/Extract'@ 74: " Plug 'gioele/vim-autoswap'@ 75: " " Plug 't9md/vim-smalls'@ 76: " Plug 'kevinhwang91/nvim-bqf',   'branch': 'main' @ 77: " " if you install fzf as system package like `pacman -S fzf` in ArchLinux,@ 78: " " please comment next line@ 79: " " Plug 'sindrets/diffview.nvim',   'branch': 'main'  @ 80: " " Plug 'rmagatti/auto-session',    'branch': 'main'@ 81: " " Plug 'justinmk/vim-sneak'@ 82: " " Plug 'SirVer/ultisnips'  @ 83: " " Plug 'tpope/vim-fugitive'@ 84: " Plug 'eugen0329/vim-esearch'@ 85: " Plug 'haya14busa/incsearch.vim'@ 86: " Plug 'haya14busa/incsearch-fuzzy.vim'@ 87: " Plug 'Raimondi/vim_search_objects'@ 88: " " Plug 'terryma/vim-multiple-cursors'@ 89: " " " On-demand loading@ 90: " " Plug 'junegunn/goyo.vim'@ 91: " " " Plug 'Shougo/deoplete.nvim',   'do': ':UpdateRemotePlugins' @ 92: " "  Plug 'morhetz/gruvbox'@ 93: " Plug 'sainnhe/gruvbox-material'@ 94: " " Plug 'vim-pandoc/vim-pandoc'@ 95: " " Plug 'vim-pandoc/vim-pandoc-syntax' @ 96: " " Plugin outside ~/.vim/plugged with post-update hook@ 97: " Plug 'junegunn/fzf',   'do': './install --all' @ 98: "  '@ 99: " Plug 'lifepillar/vim-solarized8'@ 100: " " Plug 'vim-scripts/vim-auto-save'@ 101: " " Plug 'vim-pandoc/vim-pandoc'@ 102: "@ 103: " " Plug 'yashamon/vim-snippets'@ 104: " " colorschemes@ 105: " " @ 106: " Plug 'kyazdani42/blue-moon'  @ 107: " Plug 'marko-cerovac/material.nvim',   'branch': 'main' @ 108: "@ 109: " Plug 'reedes/vim-colors-pencil'@ 110: "@ 111: " Plug 'vim-scripts/oceanlight'@ 112: "@ 113: " Plug 'gosukiwi/vim-atom-dark'@ 114: "@ 115: " Plug 'dracula/vim'@ 116: " " Plug 'kevinhwang91/nvim-bqf'@ 117: " " Plug 'svermeulen/vim-cutlass'@ 118: " Plug 'kyazdani42/nvim-web-devicons' " for file icons@ 119: " " Plug 'kyazdani42/nvim-tree.lua', @ 120: " "Plug 'nvim-lua/completion-nvim'@ 121: " Plug 'neovim/nvim-lspconfig'@ 122: " " Plug 'nvim-lua/diagnostic-nvim'@ 123: " " Plug 'rafamadriz/friendly-snippets'  @ 124:  "  " Plug 'tpope/vim-surround'@ 125: " Unmanaged plugin (manually installed and updated)@ 126: " Plug '~/my-prototype-plugin'@ 127: " Add plugins to &runtimepath @ 128: call plug#end()@ 129: @ 130: "Neovide @ 131: "@ 132: " let g:neovide_maximized=v:true @ 133: let g:neovide_fullscreen=v:true@ 134: " let g:neovide_transparency=0.15@ 135: @ 136: "General Settings    @ 137: set title@ 138: " set titlestring@ 139: " set noshowmode@ 140: " set noruler       @ 141: " set laststatus=1 @ 142: set noshowcmd    @ 143: set autoindent@ 144: set indentexpr=@ 145: set autoindent@ 146: set noshowmatch@ 147: set wrap@ 148: " set pb=10@ 149: " set winbl=10@ 150: set switchbuf=newtab@ 151: " let g:python3_host_prog='/usr/bin/python3.9'@ 152: " let g:python3_host_prog='/usr/bin/python3.9'@ 153: @ 154: set clipboard+=unnamedplus	" yank to the system register (*) by default@ 155: " TAB setting @ 156: set expandtab        "replace <TAB> with spaces@ 157: set softtabstop=3@ 158: set shiftwidth=3@ 159: " set shell="C: Program Files PowerShell 7 pwsh.EXE"@ 160: set termguicolors@ 161: @ 162: set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50@ 163:  		   ,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor@ 164:  		   ,sm:block-blinkwait175-blinkoff150-blinkon175@ 165: set spelllang=en_us@ 166: set timeoutlen=0@ 167: function! OnUIEnter(event)@ 168: 	let l:ui = nvim_get_chan_info(a:event.chan)@ 169: 	if has_key(l:ui, 'client') && has_key(l:ui.client, 'name')@ 170: 		if l:ui.client.name ==# 'Firenvim'@ 171: 			set guifont=Fira  Code:h20@ 172:                         set lines=100@ 173:                         set columns=100@ 174:                         noremap q <esc>:wq<cr>@ 175: 		endif@ 176: 	endif@ 177: endfunction@ 178: autocmd UIEnter * call OnUIEnter(deepcopy(v:event))@ 179: @ 180: @ 181: @ 182: "remember cursor location@ 183: autocmd BufReadPost * if @% !~# ' .git[ /  ]COMMIT_EDITMSG ' && line("' "") > 1 && line("' "") <= line(" ") | exe "normal! g` "" | endif@ 184: @ 185: au VIMEnter * let g:surround_108 =  @ 186:       'q':  " `` r''"@ 187:        @ 188: au VIMEnter * let g:buffmain=bufname()@ 189: nnoremap <m-y> viwy:buffer g:buffmain<cr>:<c-r>+<cr><cr>@ 190: let g:tex_flavor = "latex"@ 191: let g:tex_isk = '@,48-57,58,_,192-255,:' @ 192: au FileType tex setlocal iskeyword+=:@ 193: au Filetype tex,text,md set tw=50@ 194: au FileType tex setlocal indentexpr=@ 195: au FileType tex setlocal foldmethod=expr foldexpr=getline(v:lnum)=~'^ s*'.&commentstring[0]@ 196: @ 197: @ 198: let g:tex_conceal = ""@ 199: set tags+=~/workspacemodules/tags@ 200: set tags+=~ workspacemodules tags@ 201: set tags+=. tags@ 202: set tags+=./tags@ 203: "set +=~/Dropbox/workspace/tags@ 204: " set wrapmargin=1@ 205: " set shada="NONE"  @ 206: set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣@ 207: set linebreak @ 208: set formatoptions+=w " set breakat=" "@ 209: " set list  " list disables linebreak whitespace@ 210: " set textwidth=0@ 211: " set wrapmargin=-1@ 212: set hid@ 213: set autochdir@ 214: set guioptions-=r@ 215: set guioptions-=l@ 216: set inccommand=split@ 217: set mouse=n@ 218: noremap! <LeftDrag> <nop>@ 219: noremap! <RightDrag> <nop>@ 220: noremap! <LeftDrag> <nop>@ 221: " set selectmode=mouse, key@ 222: set bs=2		" allow backspacing over everything in insert mode @ 223: set undofile                " Save undo's after file closes@ 224: set undodir=~/.undo " where to save undo histories@ 225: set undolevels=1000000         " How many undos@ 226: set undoreload=1000000		@ 227: set ruler		" show the cursor position all the time@ 228: set autoread		" auto read when file is changed from outside@ 229: set nohlsearch@ 230: " set noswapfile@ 231: " set showmatch		" Cursor shows matching ) and @ 232: set nocursorline@ 233: set showmode		" Show current mode@ 234: set wildchar=<TAB>	" start wild expansion in the command line using <TAB>@ 235: set wildmenu            " wild char completion menu@ 236: let maplocalleader = "  "@ 237: " ignore these files while expanding wild chars@ 238: set wildignore=*.o,*.class,*.pyc@ 239: set incsearch		" incremental search@ 240: set nobackup		" no *~ backup files@ 241: set ignorecase		" ignore case when searching@ 242: set smartcase		" ignore case if search pattern is all lowercase,case-sensitive otherwise@ 243: set smarttab		" insert tabs on the start of a line according to context@ 244: set spell   @ 245: @ 246: " disable sound on errors@ 247: set noerrorbells@ 248: " set novisualbell @ 249: " set font=Fira  Code:h18@ 250: colorscheme one@ 251: " colorscheme material  @ 252: " let g:material_style = 'palenight'  @ 253: " let g:material_style = 'lighter'@ 254: " highlight Normal ctermbg=none@ 255: set tm=1000@ 256: " set macreta @ 257: hi SpellBad cterm=underline@ 258: " Set style for gVim@ 259: hi SpellBad gui=underline@ 260: "@ 261: "Autocommands, au@ 262: au FileType Makefile set noexpandtab@ 263: au FileType tex,text set spelllang=en_us@ 264: au FileType tex,text,md set indentexpr=@ 265: au FileType vim,md set list@ 266: " au FileType tex,text,md silent execute "!echo "    .@

@266:+++v:servername    .@

@266:+++" > ~/servername.txt"    @ 267: au FileType * silent execute "!echo "    .@

@267:+++v:servername    .@

@267:+++" > ~/servername.txt"@ 268: au UIEnter silent execute "!echo "    .@

@268:+++v:servername    .@

@268:+++" > ~/servername.txt"@ 269: function Server()@ 270:    silent execute "!echo "    .@

@270:+++v:servername    .@

@270:+++" > ~/servername.txt"@ 271: endfunction@ 272: nmap <leader>nn :call Server()@ 273: @ 274: au Filetype tex,text,md vmap q xi<CR><CR><CR><CR><ESC>kki/begin comment<cr><cr>/end comment<esc>kp  @ 275: @ 276: " au Filetype tex,text,md set fo=tc@ 277: " au FileType tex set background=dark @ 278: au TextYankPost * lua vim.highlight.on_yank  higroup="IncSearch", timeout=150, on_visual=true@ 279: au TextYankPost * call neoyank#_append()@ 280: @ 281: set expandtab        "replace <TAB> with spaces@ 282: set softtabstop=3@ 283: set shiftwidth=3@ 284: @ 285: "--------------------------------------------------------------------------- @ 286: " USEFUL SHORTCUTS@ 287: "--------------------------------------------------------------------------- @ 288: " set leader to ; @ 289: let mapleader=';'@ 290: let g:mapleader=';'@ 291: @ 292: " open the error console@ 293: " move to next error@ 294: @ 295: " Bash like keys for the command line@ 296: cnoremap <C-A>      <Home>@ 297: cnoremap <C-E>      <End>@ 298: cnoremap <C-K>      <C-U>@ 299: @ 300: " ,p toggles paste mode@ 301: " nmap <leader>p :set paste!<BAR>set paste?<CR>@ 302: @ 303: " allow multiple indentation/deindentation in visual mode@ 304: vnoremap < <gv@ 305: vnoremap > >gv@ 306: @ 307: " :cd   .@

@307:+++change working directory to that of the current file@ 308: cmap cd   .@

@308:+++lcd %:p:h@ 309: autocmd Filetype tex setlocal wrapmargin=0@ 310: " use syntax complete if nothing else available@ 311: if has("autocmd") && exists("+omnifunc")@ 312:   autocmd Filetype *@ 313:                	if &omnifunc == "" |@ 314:                		setlocal omnifunc=syntaxcomplete#Complete |@ 315:                	endif@ 316: endif@ 317: @ 318: set cot-=preview "disable doc preview in omnicomplete@ 319: @ 320: " make CSS omnicompletion work for SASS and SCSS@ 321: " autocmd BufNewFile,BufRead *.scss             set ft=scss.css@ 322: " autocmd BufNewFile,BufRead *.sass             set ft=sass.css@ 323: @ 324: "--------------------------------------------------------------------------- @ 325: " ENCODING SETTINGS@ 326: "--------------------------------------------------------------------------- @ 327: set encoding=utf-8                                  @ 328: set termencoding=utf-8@ 329: set fileencoding=utf-8@ 330: @ 331: "maps remaps mappings  @ 332: "@ 333: " terminal stuff @ 334: autocmd TermClose * if v:event.status ==1 || v:event.status ==0  | exe 'bdelete! '..expand('<abuf>') | endif@ 335: tnoremap <m-d> <C- ><C-n>:bdelete!<cr>@ 336: tnoremap <A-`> <C- ><C-n>@ 337: tnoremap <A-Esc> <C- ><C-n>@ 338: nmap <A-S-t> :te<cr>@ 339: " other mappings @ 340: vnoremap <Leader>U ""y:%s/<C-r>"@ 341: noremap <leader>r :w<cr>:e<cr> @ 342: " inoremap    .@

@342:+++.<esc>:w<cr>a@ 343: noremap <leader>hh :set tw=50<cr>@ 344: noremap <leader>w :set tw=0<cr> @ 345: map q :q<cr>@ 346: noremap <leader>q q@ 347: nmap <m-7> :ZenMode<cr>:mksession!<cr>@ 348: nnoremap <leader>rr :w<cr>:source  MYVIMRC<CR>@ 349: nnoremap <leader>u :lua require("true-zen.ataraxis") .off()<cr>:UndotreeToggle<CR>@ 350: nnoremap <leader>e :silent execute "!echo "    .@

@350:+++v:servername    .@

@350:+++' > C:/Users/yasha/servername.txt'<cr>:silent te pwsh -c lf<cr>i@ 351: nnoremap <leader>tt :FloatermToggle<cr>@ 352: nnoremap <leader>t :silent execute "!echo "    .@

@352:+++v:servername    .@

@352:+++' > C:/Users/yasha/servername.txt'<cr>:edit term://pwsh<cr>@ 353: nnoremap <c-,> :cprevious<cr>@ 354: nnoremap <c-.> :cnext<cr> @ 355: vnoremap <m-s> :s///gc<left><left><left><left>@ 356: inoremap <m-s> <esc>:%s///gc<left><left><left><left>@ 357: nnoremap <m-s> :%s///gc<left><left><left><left>@ 358: vmap <M-.> t.<CR>h@ 359: nmap <M-.> t.<CR>h@ 360: nnoremap <up> 1<C-U>@ 361: imap <up> <nop>@ 362: nnoremap <down> 1<C-D>@ 363: imap <down> <nop>@ 364: noremap <ScrollWheelUp>      <nop>@ 365: noremap <S-ScrollWheelUp>    <nop>@ 366: noremap <C-ScrollWheelUp>    <nop>@ 367: noremap <ScrollWheelDown>    <nop>@ 368: noremap <S-ScrollWheelDown>  <nop>@ 369: noremap <C-ScrollWheelDown>  <nop>@ 370: noremap <ScrollWheelLeft>    <nop>@ 371: noremap <S-ScrollWheelLeft>  <nop>@ 372: noremap <C-ScrollWheelLeft>  <nop>@ 373: noremap <ScrollWheelRight>   <nop>@ 374: noremap <S-ScrollWheelRight> <nop>@ 375: noremap <C-ScrollWheelRight> <nop>@ 376: inoremap   /@ 377: inoremap /  @ 378: @ 379: " Movement@ 380: inoremap <m-d> <C-w>@ 381: noremap W /  <CR>@ 382: noremap B ?  <CR>@ 383: noremap <m-w>m /  <CR>@ 384: noremap <m-b>m ?  <CR>@ 385: noremap <m-w>o /(  |)<CR>@ 386: noremap <m-b>o /(  |)<CR>@ 387: noremap <m-w>b /   |<CR>@ 388: noremap <m-b>b ?   |<CR>@ 389: noremap <m-w>w /   |<CR>@ 390: noremap <m-b>w ?   |<CR>@ 391: noremap <m-w>c /[  |]<CR>@ 392: noremap <m-b>c ?[  |]<CR>@ 393: " noremap <m-w> /   |<CR>@ 394: " noremap <m-b> ?   |<CR>@ 395: " noremap <m-W> /(  |)<CR>@ 396: " noremap <m-B> ?(  |)<CR>@ 397: @ 398: @ 399: " copy paste stuff @ 400: " @ 401: vnoremap p "_dP@ 402: inoremap <C-p> <C-r>"+@ 403: " noremap D "0D:wa<cr>@ 404: noremap d "_d@ 405: nnoremap dd "_dd@ 406: noremap c "_c@ 407: noremap c "_c@ 408: noremap s "_s@ 409: noremap C "_C@ 410: noremap x "_x@ 411: vnoremap x "+x@ 412: vnoremap d "_d@ 413: vnoremap c "_c@ 414: vnoremap y "+y@ 415: nnoremap y "+y@ 416: nnoremap p "+p@ 417: nnoremap <leader>q q@ 418: " map cr@ 419: inoremap <cr> <esc> a<cr><space><esc>"_s@ 420: inoremap <m-cr> <cr><space><esc>"_s@ 421: @ 422: " Softwrap  @ 423: @ 424: nmap D "0dg @ 425: nmap V vg @ 426: nmap A g a@ 427: map 0 g^@ 428: map 9 g @ 429: nmap <m-8> :set laststatus=0<cr>:set lines=100<cr>:set guifont=Fira  Code:h18<cr>:set columns=100<cr>@ 430: nnoremap <c-l> :bnext<CR>@ 431: nnoremap <c-h> :bprevious<CR>@ 432: " tnoremap <Esc> <C- > @ 433: " nnoremap < :tabp<CR>@ 434: " nnoremap > :tabn<CR>@ 435: " nnoremap <leader>n :tabedit %<CR>@ 436: imap <M-j> <C-j>@ 437: " map <M-m> <cmd>HopChar1<cr> @ 438: " map <S-b> ?  <CR>@ 439: map q: nop@ 440: map <S-C-q> <Esc>:qa!<CR>@ 441: map <m-q> <esc>:wq<cr>@ 442: map <m-Q> <esc>:q<cr>@ 443: map <m-c> :close<cr>@ 444: map <m-d> <Esc>:w<CR>:bdelete<CR>@ 445: map <m-D> <Esc>:w<CR>:bdelete!<CR>@ 446: noremap gf gq@ 447: noremap f /@ 448: noremap F ?@ 449: noremap # /  <CR>v?  <CR>@ 450: noremap   /  <CR>gev?  <CR>l@ 451: noremap @ /<CR>v? <CR>@ 452: map j gj@ 453: map k gk@ 454: noremap <Space>  .@
 455: vnoremap <Space> t <cr>@ 456: map K <C-u>@ 457: map J <C-d>@ 458: " map <C-j> zz@ 459: " map <C-k> zb@ 460: map <C-j> <C-e>jj@ 461: map <C-k> <C-y>kk@ 462: nnoremap <leader>j J@ 463: nnoremap <leader>k K@ 464: map ' "@ 465: nnoremap <Backspace> i<Backspace><Esc>@ 466: nmap <leader>c gc@ 467: noremap <A-r> <C-r>@ 468: nnoremap ` ~@ 469: nnoremap    .@

@469:+++`@ 470: noremap <m-1> <C-o>@ 471: noremap <m-2> <C-i>@ 472: inoremap <m-d> <C-d>@ 473: noremap ;w <Esc>:w<CR>@ 474: noremap <C-t> <Esc>:AsyncRun ctags -R<CR>@ 475: noremap <D-u> <C-u>@ 476: noremap <A-u> <C-u>@ 477: " windows stuff, comment out on windows@ 478: " nnoremap ;ww :%s/@ 479: //gc@ 480: " this mapping Enter key to <C-y> to chose the current highlight item @ 481: " and close he selection list, same as other IDEs .@
 482: inoremap <expr> <CR> pumvisible() ? " <C-y>" : " <C-g>u <CR>"@ 483: nnoremap <silent> <Leader>y :YRGetElem<CR>@ 484: map ' "@ 485: inoremap <D-]> <C-x><C-]>@ 486: inoremap <C-]> <C-x><C-]>@ 487: @ 488: au FileType tex,text,md nmap 0 g^@ 489: au FileType tex,text,md noremap 9 g @ 490: " au FileType tex,text,md nnoremap dd "_g^dg g^@ 491: @ 492: "Neovim mappings@ 493: " :tnoremap <S-h> <C- ><C-n><C-w>h@ 494: " :tnoremap <S-j> <C- ><C-n><C-w>j@ 495: " :tnoremap <S-k> <C- ><C-n><C-w>k@ 496: " :tnoremap <S-l> <C- ><C-n><C-w>l@ 497: " tnoremap <Left> :tbnext<CR>@ 498: " tnoremap <Right> :tbprevious<CR>@ 499: " tnoremap <Leader>e <C- ><C-n> @ 500: " imap <Backspace>  @ 501: map t <Plug>Lightspeed_s@ 502: " map <C-t> <cmd>HopChar1@ 503: map T <Plug>Lightspeed_S@ 504: " map <S-m-Space> <cmd>HopWord<cr>@ 505: " map t <ESC>:syntax off <CR>t: syntax on<CR>@ 506: @ 507: " FZF @ 508: let g:fzf_layout =   'window':   'width': 1, 'height': 1  @ 509: " let g:fzf_preview_window = []@ 510: noremap <m-t> :BTags<cr>@ 511: noremap S <Esc> :BLinesB<CR>@ 512: "noremap L <Esc>:AsyncRun sentence.sh %;nvr sentence_%<cr>:echo 'press any key'<cr>:execute 'call getchar()' | BLines<cr>@ 513: " Line search mapping @ 514: " function! Jumpback() @ 515: "   K=bufname()@ 516: "   normal viwhy<esc>:bdelete<cr>:buffer K<c-r>+<cr>:ZenMode<cr>@ 517: " endfunction@ 518: noremap <m-b> <Esc>:Buffers<CR>@ 519: " noremap F <Esc>:GFiles<CR>@ 520: map <A-e> :FZF ~<CR> @ 521: map <m-f> :FZF ~<CR> @ 522: @ 523: "miscellaneous@ 524: nmap <leader>g :TZAtaraxis<CR>@ 525: " nmap <leader>p :Denite neoyank -default-action=append<CR>@ 526: @ 527: " Latex stuff@ 528: " @ 529: noremap <leader>ss :w<cr>:source  MYVIMRC<cr> @ 530: noremap <c-e> viwy:cclose<cr>:<c-r>+<cr><cr>@ 531: noremap <c-p> :<c-r>+<cr>@ 532: noremap <m-l> viwy:bdelete<cr>:execute "buffer" g:buf<cr>:<c-r>+<cr><cr>@ 533: " noremap <m-l> viwy<esc>:bp<cr>:<c-r>+<cr>@ 534: @ 535: "FZF Neoyank yank     @ 536: "@ 537: nnoremap <leader>y :FZFNeoyank<cr>@ 538: nnoremap <leader>Y :FZFNeoyank  P<cr>@ 539: vnoremap <leader>y :FZFNeoyankSelection<cr>@ 540: @ 541: nnoremap <leader>p :FZFNeoyank +<cr> @ 542: @ 543: nnoremap <leader>1 :FZFNeoyank 1<cr>@ 544: nnoremap <leader>P :FZFNeoyank " P+<cr>@ 545: vnoremap <leader>p :FZFNeoyankSelection +<cr>@ 546: @ 547: "Pounce@ 548: map t <Plug>(leap-forward)@ 549: map T <Plug>(leap-backward)@ 550: " " nmap S <cmd>PounceRepeat<CR>@ 551: " vmap t <cmd>Pounce<CR>@ 552: " omap gt <cmd>Pounce<CR>@ 553: " 's' is used by vim-surround@ 554: @ 555: " Replace the default dictionary completion with fzf-based fuzzy completion@ 556: @ 557: inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')  @ 558: @ 559: @ 560: "Functions@ 561: @ 562: function Light()@ 563: set background=light@ 564: " colorscheme oceanlight @ 565: colorscheme one @ 566: " highlight Normal ctermfg=black@ 567: " highlight  CursorLine cterm=NONE ctermbg=black ctermfg=none@ 568: " hi MatchParen cterm=underline ctermbg=none ctermfg=magenta@ 569: endfunction   @ 570: @ 571: " function Light()@ 572: " set background=light@ 573: " " colorscheme oceanlight @ 574: " colorscheme material @ 575: " let g:material_style = 'lighter'  @ 576: "    " highlight Normal ctermfg=black@ 577: " " highlight  CursorLine cterm=NONE ctermbg=black ctermfg=none@ 578: " " hi MatchParen cterm=underline ctermbg=none ctermfg=magenta@ 579: " endfunction   @ 580: function Bluemoon()@ 581:    set background=dark@ 582:    colorscheme blue-moon@ 583:    " colorscheme material  @ 584: endfunction@ 585: @ 586: function Deepocean()@ 587:    set background=dark@ 588:    colorscheme material  @ 589:    let g:material_style = 'deep ocean'  @ 590: endfunction@ 591: @ 592: function Palenight()@ 593:    set background=dark@ 594:    " colorscheme blue-moon@ 595:    colorscheme material  @ 596:    let g:material_style = 'palenight'  @ 597: endfunction@ 598: function Lighter()@ 599:    set background=light@ 600:    " colorscheme blue-moon@ 601:    colorscheme material@ 602:    let g:material_style = 'lighter'@ 603: endfunction@ 604: @ 605: function Dark()@ 606:    set background=dark@ 607:    colorscheme one@ 608: endfunction@ 609: @ 610: function! Profile()@ 611: profile start profile.log@ 612: profile func *@ 613: profile file *@ 614: endfunction@ 615: @ 616: command! -bang -nargs=* BLinesB@ 617:       call fzf#vim#grep(@ 618:         'rg --with-filename --line-number --no-heading --smart-case    .@

@618:+++'.fnameescape(expand('%')),1,@ 619:         fzf#vim#with_preview( 'options': '--keep-right --layout reverse --query '.shellescape(<q-args>).' --preview "bat -p --color always  "', 'up:50%'))@ 620: @ 621: " nnoremap H :LinesWithPreview<CR>@ 622: " command! -bang -nargs=* BLinesB@ 623: "       call fzf#vim#grep(@ 624: "         'rg --with-filename --column --line-number --no-heading --smart-case    .@

@624:+++'.fnameescape(expand('%:p')), 1,@ 625: "         fzf#vim#with_preview( 'options': '--keep-right --delimiter : --nth 4.   .@

@625:+++--preview "bat -p --color always  "', 'right:50%' ))@ 626: @ 627: " command! -bang -nargs=* BLinesB@ 628: "        call fzf#vim#grep(@ 629: "          'rg --with-filename --column --line-number --no-heading --smart-case    .@

@629:+++'.fnameescape(expand('%:p')),,@ 630: " "         fzf#vim#with_preview( 'options': '--layout reverse --query '.shellescape(<q-args>).' --with-nth=4.   .@

@630:+++--delimiter=":"', 'right:0%'))@ 631:     "     fzf#vim#with_preview( 'options': '--layout reverse  --with-nth=-1.   .@

@631:+++--delimiter="/"', 'right:50%'))@ 632: function Sentence()@ 633:   let g:buf = bufname()@ 634:   " silent execute "!bash /mnt/c/Users/yasha/dotfiles/scripts/sentence.sh %"@ 635:   silent execute "!pwsh -c sentence.ps1 %"@ 636:   " silent call getchar()@ 637:   e sentence_%@ 638:   sleep 1@ 639:   " let b:paste = system('pwsh -c Get-Clipboard')@ 640:   call feedkeys(":BLinesB  <c-r>+ <cr>")@ 641: endfunction@ 642: noremap LL :lua require("true-zen.ataraxis") .off()<cr>:call Sentence()<cr>@ 643: " noremap L :TZAtaraxisOff<cr><cr>:call Sentence()<cr>@ 644: function GitAsync()@ 645: silent execute "!echo "    .@

@645:+++v:servername    .@

@645:+++' > ~/servername.txt'@ 646: let g:bufdude = bufname()@ 647: silent te pwsh -c if ( (git rev-parse --is-inside-work-tree) -and (git rev-parse --git-dir) )   git add    .@

@647:+++; git commit -m -a; git push --all origin; ctags -R @ 648: execute "buffer" g:bufdude@ 649: endfunction@ 650:   @ 651: " " AsyncRun -silent if git rev-parse --is-inside-work-"tree @ 652: "|| git rev- parse --git-dir > /dev/null 2>&1 ; then git "add @ 653: "   .@

@653:+++; git commit -m -a ; git push --all origin; "fi  */@ 654: " te if ( (git rev-parse --is-inside-work-tree) -and (git @ 655: "rev-parse --git-dir) )   git add    .@

@655:+++; git commit -m -a ; "git push --all origin  */@ 656: " endfunction */@ 657: @ 658: function ToggleQuickFix()@ 659:       if empty(filter(getwininfo(), 'v:val.quickfix'))@ 660:       exec "w"@ 661:         echo bufname()@ 662:         lua require("true-zen.ataraxis") .off()@ 663:         " lua require("zen-mode").close()@ 664:         echo bufname()@ 665:         let b:filenamedir=expand('%:p:h')@ 666:         echo b:filenamedir@ 667:         let b:filename=expand('%:t:r')@ 668:         let b:errors=b:filenamedir    .@

@668:+++"/build/"    .@

@668:+++b:filename .".log"@ 669:         echo b:errors@ 670:         exec "caddf" b:errors@ 671:         copen@ 672:         sleep 1@ 673:         exec "wincmd j"@ 674:         exec "/error"@ 675:     else@ 676:         exec "cclose"@ 677:         sleep 1@ 678:         endif@ 679: endfunction@ 680: @ 681: nnoremap <leader>s :silent call ToggleQuickFix()<CR>@ 682: function! ClearLatex()@ 683:   silent !rm ./build/* @ 684: endfunction @ 685: @ 686: function! CompileLatex()@ 687:   " silent call ClearLatex()@ 688:   let buf=bufname()@ 689:   silent te pwsh -c latexmk -pvc -halt-on-error -synctex=1 -file-line-error -f -output-directory="build" %@ 690:   execute "buffer" buf@ 691:   call ViewPdf()@ 692: endfunction@ 693: @ 694: function! ViewPdf() @ 695: wa@ 696: let g:buffmain=bufname()@ 697: silent execute "!echo "    .@

@697:+++v:servername    .@

@697:+++' > C:/Users/yasha/servername.txt'@ 698: let buf=bufname()@ 699: let linenumber=line(".")@ 700: let colnumber=col(".")@ 701: let b:filenamedir=expand('%:p:h')@ 702: let filenametex=expand('%:p:t')@ 703: let filenametexwhole=expand('%:p')@ 704: let filenameroot=expand('%:t:r')@ 705: " let filenamePDF=filename[:-4]."pdf"@ 706: let filenamePDFLinux=b:filenamedir    .@

@706:+++"/buildback/"    .@

@706:+++filenameroot    .@

@706:+++".pdf"@ 707: let b:filenamePDFWindows="build  "    .@

@707:+++filenameroot    .@

@707:+++".pdf"@ 708: " echo b:filenamePDFWindows@ 709: let execstrLinux="silent te zathura --synctex-forward "    .@

@709:+++linenumber    .@

@709:+++":"    .@

@709:+++colnumber    .@

@709:+++":"    .@

@709:+++filenametexwhole    .@

@709:+++" "    .@

@709:+++filenamePDFLinux@ 710: let execstrWindows="silent te pwsh -c C:/Users/yasha/scoop/shims/sumatrapdf.EXE -reuse-instance "    .@

@710:+++b:filenamePDFWindows    .@

@710:+++" -forward-search "    .@

@710:+++filenametex    .@

@710:+++" "    .@

@710:+++linenumber@ 711: exec execstrWindows@ 712: execute "buffer" buf@ 713: endfunction@ 714: nmap <leader>v :call ViewPdf()<cr><cr>@ 715: map <m-v> <esc>:call ViewPdf()<cr><cr>@ 716: @ 717: " nmap <leader>v :VimtexView<cr>@ 718: " let  g:vimtex_fold_types_defaults = 'preamble, sections, comments'@ 719: nmap <leader>ll :call CompileLatex()<cr>@ 720: nmap <leader>cl :call ClearLatex()<cr>@ 721: " nmap <leader>m :silent ! cp % backup;  pandoc  backup -s --webtex -o backup.html;  cp backup.html %<cr>:e %<cr>@ 722: @ 723: " nmap <leader>m :silent ! cp % backup;  pandoc  backup -s --mathjax[=https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js] -o backup.html;  cp backup.html %<cr>:e %<cr>:w<cr>:qa<cr> @ 724: "" mathml shenanigans@ 725: @ 726: nmap <leader>m :w<cr>:silent ! cat % >> ~/workspace/email.txt; cp % /tmp/temp; make4ht /tmp/temp "mathml,mathjax"; pandoc /tmp/temp.html --from html --to markdown_strict -o /tmp/temp.md; mv /tmp/temp.md %<cr>:e %<cr>:w<cr>:qa<cr>@ 727: @ 728: @ 729: @ 730: @ 731: @ 732: @ 733: "Autosave and autocommit   @ 734: " let g:updatetime = 10000@ 735: let g:auto_save = 0@ 736: " .vimrc@ 737: let g:auto_save_events = ["CursorHold"]@ 738: "au FileType vim let g:autosave = 0@ 739: let g:auto_save_in_insert_mode = 0@ 740: let g:auto_save_silent = 1@ 741: @ 742: "Git autocommit  (private git repo)@ 743: autocmd BufWritePost * call GitAsync()@ 744: " vsnip stuff @ 745: " Use <Tab> and <S-Tab> to navigate through popup menu@ 746: " inoremap <expr> <Tab> pumvisible() ? " <C-n>" : " <Tab>"@ 747: " inoremap <expr> <S-Tab> pumvisible() ? " <C-p>" : " <S-Tab>"@ 748: @ 749: " Set completeopt to have a better completion experience@ 750: set completeopt=menuone,noinsert,noselect@ 751: @ 752: " Avoid showing message extra message when using completion@ 753: set shortmess+=c@ 754: let g:vsnip_snippet_dir = '~/dotfiles/snippets'  @ 755: @ 756: " imap <expr> <m-space>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'@ 757: " smap <expr> <m-space>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'@ 758: " @ 759: " " Expand or jump@ 760: " imap <expr> <m-space>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'@ 761: " smap <expr> <m-space>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'@ 762: @ 763: " Jump forward or backward@ 764: imap <expr> <M-j>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-l>'@ 765:   smap <expr> <M-j>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<C-l>'@ 766: imap <expr> <M-k> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'@ 767: smap <expr> <M-k> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'@ 768: @ 769: "@ 770: " set foldexpr=nvim_treesitter#foldexpr()@ 771: "@ 772: @ 773: lua <<EOF@ 774: require("nvim-lsp-installer").setup  @ 775:     local lspconfig = require("lspconfig")@ 776: @ 777:     local function on_attach(client, bufnr)@ 778:         -- set up buffer keymaps, etc .@
 779:     end@ 780: @ 781:     lspconfig.sumneko_lua.setup   on_attach = on_attach @ 782:     lspconfig.tsserver.setup   on_attach = on_attach @ 783:     lspconfig.vimls.setup   on_attach = on_attach @ 784:     lspconfig.ltex.setup   on_attach = on_attach @ 785:     lspconfig.texlab.setup   on_attach = on_attach @ 786: EOF@ 787: lua << EOF@ 788: local nvim_lsp = require('lspconfig')@ 789: -- Use an on_attach function to only map the following keys@ 790: -- after the language server attaches to the current buffer@ 791: local on_attach = function(client, bufnr)@ 792: local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end@ 793:  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end@ 794: -- Enable completion triggered by <c-x><c-o>@ 795:   buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')@ 796: @ 797:   -- Mappings .@
 798:   local opts =   noremap=true, silent=true @ 799: @ 800:   -- See `:help vim.lsp.*` for documentation on any of the below functions@ 801:   buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)@ 802:   buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)@ 803:   --buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)@ 804:   buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)@ 805:   buf_set_keymap('n', '<S-C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)@ 806:   buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)@ 807:   buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)@ 808:   buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)@ 809:   buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)@ 810:   buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)@ 811:   buf_set_keymap('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)@ 812:   --buf_set_keymap('n', 'lr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)@ 813:   buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)@ 814:   buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)@ 815:   buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)@ 816:   buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)@ 817:   buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)@ 818: @ 819: end@ 820: EOF@ 821: nnoremap <silent> g? <cmd>lua vim.diagnostic.open_float()<CR>@ 822: "Lsp instal @ 823: "@ 824: " inoremap <cr> <cr> <backspace>@ 825: @ 826: set completeopt=menu,menuone,noselect@ 827: @ 828: lua <<EOF@ 829:   -- Setup cmp .@
 830: @ 831: local has_words_before = function()@ 832:   if vim.api.nvim_buf_get_option(0, "buftype") == "prompt" then@ 833:     return false@ 834:   end@ 835:   local line, col = unpack(vim.api.nvim_win_get_cursor(0))@ 836:   return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil@ 837: end@ 838: @ 839: local feedkey = function(key, mode)@ 840:   vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)@ 841: end@ 842: @ 843: local cmp = require'cmp'@ 844: cmp.setup ( @ 845: snippet =  @ 846:       expand = function(args)@ 847:         -- For `vsnip` user .@
 848:         vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` user .@
 849:   -- ..   .@

@849:+++Your other configuration .. .@
 850: end,@ 851: ,@ 852: @ 853: mapping = cmp.mapping.preset.insert( @ 854:         ["<C-p>"] = cmp.mapping.select_prev_item(),@ 855:         ["<C-n>"] = cmp.mapping.select_next_item(),@ 856:        ['<C-d>'] = cmp.mapping.scroll_docs(-4),@ 857:       ['<C-f>'] = cmp.mapping.scroll_docs(4),@ 858:       ['<C-x>'] = cmp.mapping.complete(),@ 859:       ['<C-e>'] = cmp.mapping.close(),@ 860:       ['<CR>'] = cmp.mapping.confirm(  select = true ),@ 861: -- ..   .@

@861:+++Your other mappings .. .@
 862: ["<Tab>"] = cmp.mapping(function(fallback) @ 863:       if vim.fn["vsnip#expandable"]() == 1@ 864:         then@ 865:         feedkey("<Plug>(vsnip-expand)", "")@ 866:      elseif cmp.visible() then@ 867:         cmp.select_next_item()@ 868:       elseif has_words_before() then @ 869:         cmp.complete()@ 870:       else @ 871:         fallback() -- The fallback function sends a already mapped key   .@

@871:+++In this case, it's probably `<Tab>` .@
 872:       end@ 873:     end,   "i", "s" ),@ 874: ["<S-Tab>"] = cmp.mapping(function()@ 875:       if vim.fn.pumvisible() == 1 then@ 876:         feedkey("<C-p>", "n")  @ 877:       elseif vim.fn["vsnip#jumpable"](-1) == 1 then@ 878:         feedkey("<Plug>(vsnip-jump-prev)", "")@ 879:       end@ 880:     end,   "i", "s" ),@ 881: ),@ 882: requires =  @ 883:      @ 884:       'tzachar/fuzzy.nvim',@ 885:       'quangnguyen30192/cmp-nvim-tags',@ 886:       -- if you want the sources is available for some file types@ 887:       ft =  @ 888:         'tex',@ 889:         'latex' @ 890:       @ 891:     @ 892:     ,@ 893: -- ..   .@

@893:+++Your other configuration .. .@
 894: sources = cmp.config.sources( @ 895:       -- For vsnip user .@
@@ 896:   name = 'vsnip', keyword_length = 1000 ,@ 897:   name = 'tags' ,@ 898:   name = 'nvim_lsp', keyword_length = 4 ,@ 899: -- For ultisnips user .@
 900:       --   name = 'ultisnips' ,  @ 901:   name = 'omni', keyword_length = 4,@ 902:        --   name = 'spell' , @ 903:       --  name = 'treesitter', keyword_length = 4 ,@ 904:   name = 'buffer', keyword_length = 4 @ 905: --  name = 'fuzzy_buffer', keyword_length = 8 @ 906: ),@ 907: --completion =  @ 908: --    autocomplete = true@ 909: --    @ 910: )@ 911: EOF@ 912: " @ 913: " " LSP mappings   @ 914: " "" LSP mappings @ 915: noremap <leader>ca  :lua vim.lsp.buf.code_action()<CR>@ 916: noremap <leader>la  :lua vim.lsp.buf.code_action()<CR>@ 917: " @ 918: " @ 919: lua <<EOF@ 920:  require('nvim_comment').setup(@ 921:  @ 922:    -- Linters prefer comment and line to have a space in between markers@ 923:    marker_padding = true,@ 924:    -- should comment out empty or whitespace only lines@ 925:    comment_empty = true,@ 926:    -- Should key mappings be created@ 927:    create_mappings = true,@ 928:    -- Normal mode mapping left hand side@ 929:    line_mapping = "gc",@ 930:    -- Visual/Operator mapping left hand side@ 931:    operator_mapping = "<leader>c",@ 932:    -- Hook function to call before commenting takes place@ 933:    --hook = nil @ 934:  @ 935:  )@ 936: EOF@ 937: nmap <leader>c gc@ 938: lua <<EOF@ 939: local true_zen = require("true-zen")@ 940: true_zen.setup( @ 941:  	ui =  @ 942:  		bottom =  @ 943:  			laststatus = 0,@ 944:  			ruler = false,@ 945:  			showmode = false,@ 946:  			showcmd = false,@ 947:  			cmdheight = 1,@ 948:  		,@ 949:  		top =  @ 950:  			showtabline = 0,@ 951:  		,@ 952:  		left =  @ 953:  			number = false,@ 954:  			relativenumber = false,@ 955:  			signcolumn = "no",@ 956:  		,@ 957:  	,@ 958:  	modes =  @ 959:  		ataraxis =  @ 960:  			-- left_padding = 20,@ 961:  			-- right_padding = 20,@ 962:  			top_padding = 0,@ 963:  			bottom_padding = 0,@ 964:  			ideal_writing_area_width =  60,@ 965:  			auto_padding = true,@ 966:  			keep_default_fold_fillchars = true,@ 967:  			custom_bg =  "none", "",@ 968:  			bg_configuration = true,@ 969:  			quit = "untoggle",@ 970:  			ignore_floating_windows = true,@ 971:  			affected_higroups =  @ 972:  				NonText = true,@ 973:  				FoldColumn = true,@ 974:  				ColorColumn = true,@ 975:  				VertSplit = true,@ 976:  				StatusLine = true,@ 977:  				StatusLineNC = true,@ 978:  				SignColumn = true,@ 979:  			,@ 980:  		,@ 981:  		focus =  @ 982:  			margin_of_error = 5,@ 983:  			focus_method = "experimental"@ 984:  		,@ 985:  	,@ 986:  	integrations =  @ 987:  		vim_gitgutter = false,@ 988:  		galaxyline = false,@ 989:  		tmux = false,@ 990:  		gitsigns = false,@ 991:  		nvim_bufferline = false,@ 992:  		limelight = false,@ 993:  		twilight = false,@ 994:  		vim_airline = false,@ 995:  		vim_powerline = false,@ 996:  		vim_signify = false,@ 997:  		express_line = false,@ 998:  		lualine = false,@ 999:  		lightline = false,@ 1000:  		feline = false,@ 1001:  	,@ 1002:  	misc =  @ 1003:  		on_off_commands = true,@ 1004:  		ui_elements_commands = false,@ 1005:  		cursor_by_mode = false,@ 1006:  	@ 1007:  )@ 1008: EOF@ 1009: lua <<EOF@ 1010: require('feline').setup( @ 1011:     preset = 'noicon'@ 1012:     )@ 1013: EOF@ 1014: " @ 1015: " @ 1016: " @ 1017: " " lua <<EOF@ 1018: " " require('lualine').setup @ 1019: " " options =  disabled_filetypes =  'txt', 'text'@ 1020: " " @ 1021: " " EOF@ 1022: " lua << EOF@ 1023: "   require("zen-mode").setup  @ 1024: "   window =  @ 1025: "     backdrop = 1, -- shade the backdrop of the Zen window   .@

@1025:+++Set to 1 to keep the same as Normal@ 1026: "     -- height and width can be:@ 1027: "     -- * an absolute number of cells when > 1@ 1028: "     -- * a percentage of the width / height of the editor when <= 1@ 1029: "     -- * a function that returns the width or the height@ 1030: "     width = .66, -- width of the Zen window@ 1031: "     height = 1, -- height of the Zen window@ 1032: "     -- by default, no options are changed for the Zen window@ 1033: "     -- uncomment any of the options below, or add other vim.wo options you want to apply@ 1034: "     options =  @ 1035: "       -- signcolumn = "no", -- disable signcolumn@ 1036: "       -- number = false, -- disable number column@ 1037: "       -- relativenumber = false, -- disable relative numbers@ 1038: "       -- cursorline = false, -- disable cursorline@ 1039: "       -- cursorcolumn = false, -- disable cursor column@ 1040: "       -- foldcolumn = "0", -- disable fold column@ 1041: "       -- list = false, -- disable whitespace characters@ 1042: "     ,@ 1043: "   ,@ 1044: "   plugins =  @ 1045: "     -- disable some global vim options (vim.o...)@ 1046: "     -- comment the lines to not apply the options@ 1047: "     options =  @ 1048: "       enabled = true,@ 1049: "       ruler = false, -- disables the ruler text in the cmd line area@ 1050: "       showcmd = false, -- disables the command in the last line of the screen@ 1051: "     ,@ 1052: "     twilight =   enabled = false , -- enable to start Twilight when zen mode opens@ 1053: "     gitsigns =   enabled = false , -- disables git signs@ 1054: "     tmux =   enabled = false , -- disables the tmux statusline@ 1055: "     -- this will change the font size on kitty when in zen mode@ 1056: "     -- to make this work, you need to set the following kitty options:@ 1057: "     -- - allow_remote_control socket-only@ 1058: "     -- - listen_on unix:/tmp/kitty@ 1059: "     kitty =  @ 1060: "       enabled = false,@ 1061: "       font = "+4", -- font size increment@ 1062: "     ,@ 1063: "   ,@ 1064: "   -- callback where you can add custom code when the Zen window opens@ 1065: "   on_open = function(win)@ 1066: "   end,@ 1067: "   -- callback where you can add custom code when the Zen window closes@ 1068: "   on_close = function()@ 1069: "   end,@ 1070: " @ 1071: " EOF@ 1072: " lua <<EOF@ 1073: " require('telescope').setup @ 1074: "   defaults =  @ 1075: "     -- Default configuration for telescope goes here:@ 1076: "     -- config_key = value,@ 1077: "     mappings =  @ 1078: "       i =  @ 1079: "         -- map actions.which_key to <C-h> (default: <C-/>)@ 1080: "         -- actions.which_key shows the mappings for your picker,@ 1081: "         -- e.g   .@

@1081:+++git_ create, delete, ..._branch for the git_branches picker@ 1082: "         ["<C-h>"] = "which_key"@ 1083: "       @ 1084: "     @ 1085: "   ,@ 1086: "   pickers =  @ 1087: "     -- Default configuration for builtin pickers goes here:@ 1088: "     -- picker_name =  @ 1089: "     --   picker_config_key = value,@ 1090: "     --   .. .@
 1091: "     -- @ 1092: "     -- Now the picker_config_key will be applied every time you call this@ 1093: "     -- builtin picker @ 1094: "   ,@ 1095: "   extensions =  @ 1096: "     -- Your extension configuration goes here:@ 1097: "     -- extension_name =  @ 1098: "     --   extension_config_key = value,@ 1099: "     -- @ 1100: "     -- please take a look at the readme of the extension you want to configure@ 1101: "   @ 1102: "  @ 1103: @ 1104: " " EOF@ 1105: " lua require'hop'.setup   keys = 'etovxqpdygfblzhckisuran', term_seq_bias = 0.5  @ 1106: " lua <<EOF@ 1107: " require('fm-nvim').setup @ 1108: " 	config =@ 1109: " 	 @ 1110: " 		edit_cmd = "edit", -- opts: 'tabedit'; 'split'; 'pedit'; etc.. .@
 1111: " 		border   = "single", -- opts: 'rounded'; 'double'; 'single'; 'solid'; 'shawdow'@ 1112: " 		height   = .9,@ 1113: " 		width    = .9,@ 1114: "                @ 1115: "           @ 1116: "           	-- Mappings used with the plugin@ 1117: " 	mappings =  @ 1118: " 		vert_split = "<C-v>",@ 1119: " 		horz_split = "<C-h>",@ 1120: " 		tabedit    = "<C-t>",@ 1121: " 		edit       = "<C-e>",@ 1122: " 		ESC        = "<ESC>"@ 1123: " 	,@ 1124: " @ 1125: " EOF@ 1126: " lua <<EOF@ 1127: " require("telescope").load_extension("prosesitter") -- Optionally, depends on telescope.nvim@ 1128: " require("prosesitter"):setup( @ 1129: " 	vale_bin = vim.fn.stdpath("data") .   .@

@1129:+++"/prosesitter/vale",@ 1130: " 	vale_cfg = vim.fn.stdpath("data") .   .@

@1130:+++"/prosesitter/vale_cfg.ini",@ 1131: " 	--optional extra queries overrides existing queries@ 1132: " 	queries =   @ 1133: " 		-- see the piece on adding queries on how to use this @ 1134: " 		-- (not needed if using an out of the box supported language@ 1135: " 		py =   @ 1136: " 			strings = "[(string) ] @capture",@ 1137: " 			comments = "[(comment)+ ] @capture",@ 1138: " 		,@ 1139: " 	, @ 1140: " 	-- highlight groups to use for lint errors, warnings and suggestions@ 1141: " 	--" severity_to_hl =   error = "SpellBad", warning = "SpellRare", suggestion: "SpellCap" ,@ 1142: " 	-- weather to lint strings, comments or both for a language@ 1143: " 	lint_targets =   py = "both", tex = "strings", sh = "comments" , @ 1144: " 	disabled_ext =   "tex" , -- do not ever lint tex files@ 1145: " 	auto_enable = false, -- do not start linting files on open (default = true)@ 1146: " 	default_cmds = false,  -- do not add commands (default = true)@ 1147: " )@ 1148: " EOF @ 1149: "@ 1150: "@ 1151: lua <<EOF@ 1152: require('spellsitter').setup  @ 1153:   hl = 'SpellBad', @ 1154:   captures =  ,  -- set to   to spellcheck everything@ 1155: @ 1156:   -- Spellchecker to use   .@

@1156:+++values:@ 1157:   -- * vimfn: built-in spell checker using vim.fn.spellbadword()@ 1158:   -- * ffi: built-in spell checker using the FFI to access the@ 1159:   --   internal spell_check() function@ 1160: spellchecker = 'vimfn'@ 1161: @ 1162: EOF@ 1163: lua <<EOF@ 1164:     require'lightspeed'.setup   @ 1165:         jump_to_unique_chars = false,@ 1166:         repeat_ft_with_target_char = true,@ 1167:         safe_labels  =   "f", "n", "u", "/", "e", "z", "h", "k", "m", "l", "j", "w", "b", "S", "F", "N", "L", "H", "M", "U", "G", "T", "?", "Z" ,@ 1168:         labels =   "s", "f", "n", "j", "k", "l", "h", "o", "d", "w", "e", "m", "b", "u", "y", "v", "r", "g", "c", "x", "/", "z", "S", "F", "N", "J", "K", "L", "H", "O", "D", "W", "E", "M", "B", "U", "Y", "V", "R", "G", "T", "C", "X", "?", "Z" @ 1169: @ 1170: EOF@ 1171: @ 1172: let g:firenvim_config =   @ 1173:       'globalSettings':  @ 1174:           'alt': 'all',@ 1175:        ,@ 1176:       'localSettings':  @ 1177:           '.*':  @ 1178:               'cmdline': 'neovim',@ 1179:               'content': 'text',@ 1180:               'priority': 0,@ 1181:               'selector': 'textarea',@ 1182:               'takeover': 'never',@ 1183:           ,@ 1184:       @ 1185:   @ 1186: lua << EOF@ 1187: @ 1188: require('fzf-lua').setup @ 1189: -- .. .@
 1190: @ 1191: EOF@ 1192: lua <<EOF@ 1193: -- ===========================================@ 1194: --  Add user dictionary for ltex-ls@ 1195: --  * en.utf-8.add must be created using `zg` when set spell is on@ 1196: -- ===========================================@ 1197: local path = vim.fn.stdpath 'config' .   .@

@1197:+++'/spell/en.utf-8.add'@ 1198: local path = vim.fn.stdpath 'config' .   .@

@1198:+++'/spell/es.utf-8.spl'@ 1199: local words =  @ 1200: @ 1201: for word in io.open(path, 'r'):lines() do@ 1202:   table.insert(words, word)@ 1203: end@ 1204: require'lspconfig'.ltex.setup @ 1205:   on_attach = on_attach,@ 1206:   capabilities = capabilities,@ 1207:   settings =  @ 1208:     ltex =  @ 1209:       disabledRules =  @ 1210:         ['en-US'] =   'PROFANITY' ,@ 1211:         ['en-GB'] =   'PROFANITY' ,@ 1212:       ,@ 1213:       language="en-US",@ 1214:       dictionary =  @ 1215:         ['en-US'] = words,@ 1216:         ['en-GB'] = words,@ 1217:         ['es'] = words,@ 1218: ,@ 1219:     ,@ 1220:   ,@ 1221: @ 1222: EOF@ 1223: " lua <<EOF@ 1224: " require('neoscroll').setup @ 1225: "     -- All these keys will be mapped to their corresponding default scrolling animation@ 1226: "     mappings =  '<C-u>', '<C-d>', '<C-b>', '<C-f>',@ 1227: "                 '<C-y>', '<C-e>', 'zt', 'zz', 'zb',@ 1228: "     hide_cursor = true,          -- Hide cursor while scrolling@ 1229: "     stop_eof = true,             -- Stop at <EOF> when scrolling downwards@ 1230: "     use_local_scrolloff = false, -- Use the local scope of scrolloff instead of the global scope@ 1231: "     respect_scrolloff = false,   -- Stop scrolling when the cursor reaches the scrolloff margin of the file@ 1232: "     cursor_scrolls_alone = true, -- The cursor will keep on scrolling even if the window cannot scroll further@ 1233: "     easing_function = nil,        -- Default easing function@ 1234: "     pre_hook = nil,              -- Function to run before the scrolling animation starts@ 1235: "     post_hook = nil,              -- Function to run after the scrolling animation ends@ 1236: "     @ 1237: " EOF@ 1238: @ 1239: @ 1240: @ 1241: @ 1242:  @ 1243: " lua << EOF@ 1244: " require("stabilize").setup(@ 1245: "  @ 1246: "       force = true, -- stabilize window even when current cursor position will be hidden behind new window@ 1247: " 	forcemark = nil -- set context mark to register on force event which can be jumped to with '<forcemark>@ 1248: " 	--ignore =    -- do not manage windows matching these file/buftypes@ 1249: " --		filetype =   "help", "list", "Trouble" ,@ 1250: " --		buftype =   "terminal", "quickfix", -- "loclist" @ 1251: " --	@ 1252: " @ 1253: " )@ 1254: " EOF@ 1255: " lua <<EOF@ 1256: " require('dd').setup()@ 1257: " EOF@ 1258: " lua << EOF@ 1259: " local opts =  @ 1260: "   log_level = 'info',@ 1261: "   auto_session_enable_last_session = false,@ 1262: "   auto_session_root_dir = vim.fn.stdpath('data').."/sessions/",@ 1263: "   auto_session_enabled = false,@ 1264: "   auto_save_enabled = nil,@ 1265: "   auto_restore_enabled = nil,@ 1266: "   auto_session_suppress_dirs = nil@ 1267: " @ 1268: " require('auto-session').setup(opts)@ 1269: " EOF@ 1270: @ 1271: " lua << EOF@ 1272: " if exists('g:started_by_firenvim')@ 1273: "   ZenMode@ 1274: " else@ 1275: "   set laststatus=2@ 1276: " endif@ 1277: @ 1278: " lua <<EOF@ 1279: " require('neoclip').setup( @ 1280: "       history = 1000,@ 1281: "       enable_persistant_history = false,@ 1282: "       db_path = vim.fn.stdpath("data") .   .@

@1282:+++"/databases/neoclip.sqlite3",@ 1283: "       filter = nil,@ 1284: "       preview = true,@ 1285: "       default_register = '"',@ 1286: "       content_spec_column = false,@ 1287: "       on_paste =  @ 1288: "         set_reg = false,@ 1289: "       ,@ 1290: "       keys =  @ 1291: "         i =  @ 1292: "           select = '<cr>',@ 1293: "           paste = '<c-p>',@ 1294: "           paste_behind = '<c-k>',@ 1295: "           custom =  ,@ 1296: "         ,@ 1297: "         n =  @ 1298: "           select = '<cr>',@ 1299: "           paste = 'p',@ 1300: "           paste_behind = 'P',@ 1301: "           custom =  ,@ 1302: "         ,@ 1303: "       ,@ 1304: "    )@ 1305: " EOF@ 1306: " lua <<EOF@ 1307: " local saga = require 'lspsaga' @ 1308: " saga.init_lsp_saga() @ 1309: " @ 1310: " EOF@ 1311: @ 1312: "au FileType tex autocmd User SneakLeave set syntax=tex@ 1313: "au FileType tex autocmd User SneakEnter set syntax=text@ 1314: "@ 1315: "@ 1316: "@ 1317: @ 1318: "@ 1319: " 'tCommen20@ 1320: " let g:tcommentMapLeaderOp1=';' @ 1321: " "map <leader>c <Leader>__ @ 1322: "" function! RestoreRegister()@ 1323: "   let @" = s:restore_reg@ 1324: "   return ''@ 1325: " endfunction@ 1326: " function! s:Repl()@ 1327: "     let s:restore_reg = @"@ 1328: "     return "p@=RestoreRegister() <cr>"@ 1329: " endfunction@ 1330: "@ 1331: " " NB: this supports "rp that replaces the selection by the contents of @r@ 1332: " vnoremap <silent> <expr> p <sid>Repl()@ 1333: @ 1334: " " Change Color when entering@ 1335: " Insert Mode augroup CursorLine@ 1336: "    au!@ 1337: "  if has("gui_running")@ 1338: "  else@ 1339: "      au InsertEnter * setlocal cursorline@ 1340: "        au InsertLeave * setlocal nocursorline@ 1341: "     endif@ 1342: "        augroup END@ 1343: " function! DelTagOfFile(file)@ 1344: "   let fullpath = a:file@ 1345: "   let cwd = getcwd()@ 1346: "   let tagfilename = cwd    .@

@1346:+++"/"@ 1347: "   let f = substitute(fullpath, cwd    .@

@1347:+++"/", "", "")@ 1348: "   let f = escape(f, './')@ 1349: "   let cmd = 'sed -i "/'    .@

@1349:+++f    .@

@1349:+++'/d" "'    .@

@1349:+++tagfilename    .@

@1349:+++'"'@ 1350: "   let resp = system(cmd)@ 1351: " endfunction@ 1352: " function! Break()@ 1353: "  let n=130-virtcol('.')@ 1354: "  <Esc>ni <Esc><Esc>@ 1355: " endfunction@ 1356: " function Gitview()@ 1357: "    cd /root/web2 ; git add    .@

@1357:+++; git commit -m -a ; git push origin gh-pages@ 1358: " endfunction@ 1359: " fuzzy search@ 1360: " function! s:config_fuzzyall(...) abort@ 1361: "   return extend(copy( @ 1362: "       'converters': [@ 1363: "         incsearch#config#fuzzy#converter(),@ 1364: "         incsearch#config#fuzzyspell#converter()@ 1365: "       ],@ 1366: "     ), get(a:, 1,  @ 1367: "   ))@ 1368: " endfunction@ 1369: " noremap <silent><expr> f incsearch#go(<SID>config_fuzzyall())@ 1370: " noremap <silent><expr> F  incsearch#go(<SID>config_fuzzyall( 'command': '?'))@ 1371: " noremap <silent><expr> gF incsearch#go(<SID>config_fuzzyall( 'is_stay': 1))@ 1372: " map f <Plug>(incsearch-fuzzyspell-/)@ 1373: " map F <Plug>(incsearch-fuzzyspell-?)@ 1374: " map gF <Plug>(incsearch-fuzzyspell-stay)@ 1375: " map <silent> <leader>g :silent !cd /root/web2<CR>:silent !git add .<CR>:silent !git commit -m -a<CR>:silent !git push origin gh-pages<CR>@ 1376: " let g:deoplete#enable_at_startup = 1@ 1377: " map <silent> <leader>g :silent call Gitview()@ 1378: " map <silent> <leader>g :silent !cd /root/web2 ; git add .<CR>:silent git commit -m -a ; silent !git push origin gh-pages<CR> This is how I use PDFViewer with Neovim and LaTexBox .@
@@ 1379: "Load some useful plugins with vundle @ 1380: "@ 1381: "asdf asldfkj@ 1382: " hi! link Sneak Normal@ 1383: " hi! link SneakScope Normal   test test2 test3@ 1384: @ 1385: " command! -bang -nargs=* Rg@ 1386: "      call fzf#vim#grep(@ 1387: "      "rg --multiline --multiline-dotall --column --line-number --no-heading --color=always --smart-case "  .@
 1388: "      <q-args>, 1, fzf#vim#with_preview(), <bang>0)@ 1389: @ 1390: "" au GUIEnter * set fullscreen@ 1391: " if has("gui_running")@ 1392:   " set fuoptions=maxvert,maxhorz@ 1393:   " au GUIEnter * set fullscreen@ 1394:    " set foldcolumn=10@ 1395:    " set formatoptions=ant@ 1396: " set wrapmargin=0@ 1397: " set nohlsearch@ 1398: " set = ~/workspacemodules/tags@ 1399: " highlight SignColumn guibg=bg@ 1400: "       endif    @ 1401: " if has("autocmd")@ 1402: "   au BufReadPost * if line("' "") > 1 && line("' "") <= line(" ") | exe "normal! g' "" | endif@ 1403: " endif@ 1404:   " autocmd BufWinLeave *.* mkview@ 1405:   " autocmd BufWinEnter *.* silent loadview@ 1406:    " set foldcolumn=2@ 1407: "  highlight foldcolumn ctermfg=256 ctermbg=bg@ 1408: " autocmd Colorscheme * highlight FoldColumn guifg=black guibg=bg @ 1409: " inoremap <cr> <esc>:w<cr>i<cr> @ 1410: "" set tm=500@ 1411: " set macmeta@ 1412: " auto reload vimrc when editing it@ 1413: " let g:github_function_style = "italic"@ 1414: " let g:github_sidebars = ["qf", "vista_kind", "terminal", "vimplug"]@ 1415: " Change the "hint" color to the "orange" color, and make the "error" color bright red@ 1416: " let g:github_colors = [hint = "orange", error = "#ff0000"]@ 1417: " Load the colorscheme@ 1418: " colorscheme github_dark@ 1419: "" terminal color settings @ 1420: " Example config in VimScript@ 1421: " let g:github_function_style = "italic"@ 1422: " let g:github_sidebars = ["qf", "vista_kind", "terminal", "vimplug"]@ 1423: @ 1424: " Change the "hint" color to the "orange" color, and make the "error" color bright red@ 1425: " let g:github_colors = [hint = "orange", error = "#ff0000"]@ 1426: " Load the colorscheme@ 1427: " colorscheme github_dark @ 1428: " set background=dark @ 1429: " if has("gui_running")	" GUI color and font settings@ 1430: "   set guifont=Fira  Code:h22@ 1431: "   " colorscheme gruvbox @ 1432: "   highlight CursorLine  guibg=#003853 ctermbg=24  gui=none cterm=none@ 1433: " else@ 1434: "  colorscheme one@ 1435: " colorscheme material  @ 1436: " let g:material_style = 'palenight'  @ 1437: " let g:material_style = 'lighter'@ 1438: " highlight Normal ctermbg=none @ 1439: "   " let g:vimtex_quickfix_method='pplatex' @ 1440: " let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']@ 1441: "    function! UpdateSkim(status)@ 1442: "      if !a:status | return | endif@ 1443: "@ 1444: "      let l:out = b:vimtex.out()@ 1445: "      let l:tex = expand('%:p')@ 1446: "      let l:cmd = [g:vimtex_view_general_viewer, '-r']@ 1447: "      if !empty(system('pgrep Skim'))@ 1448: "        call extend(l:cmd, ['-g'])@ 1449: "      endif@ 1450: "      if has('nvim')@ 1451: "        call jobstart(l:cmd + [line('.'), l:out, l:tex])@ 1452: "      elseif has('job')@ 1453: "        call job_start(l:cmd + [line('.'), l:out, l:tex])@ 1454: "      else@ 1455: "        call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))@ 1456: "      endif@ 1457: "    endfunction@ 1458: " let g:vimtex_latexmk_build_dir = './build'@ 1459: "   'build_dir' : './build',@ 1460: " @ 1461: "     let g:vimtex_compiler_latexmk =  @ 1462: "       'background' : 0,@ 1463: "           'callback' : 1,@ 1464: "       'continuous' : 1,@ 1465: "       'options' : [@ 1466: "         '-pdf',@ 1467: "         '-verbose',@ 1468: "         '-file-line-error',@ 1469: "         '-synctex=1',@ 1470: "         '-interaction=nonstopmode',@ 1471: "       ],@ 1472: "      @ 1473: " let g:vimtex_compiler_progname = 'nvr'@ 1474: " " nmap  <leader>v <Esc>:w<CR>:VimtexView<CR>@ 1475: " let g:vimtex_quickfix_mode = 1@ 1476: " let g:vimtex_fold_enabled = 0@ 1477: " let g:vimtex_fold_manual = 1@ 1478: @ 1479: @ 1480: " let g:vimtex_fold_types=  @ 1481: "             'preamble' :  ,@ 1482: "             'comments' :  'enabled' : 1,@ 1483: "             'markers' :  ,@ 1484: "             'sections' :  @ 1485: "               'parse_levels' : 0,@ 1486: "               'sections' : [      @ 1487: "                 '%(add)?part',@ 1488: "                 '%(chapter|addchap)',@ 1489: "                 '%(section|addsec)',@ 1490: "                 'subsection',@ 1491: "                 'subsubsection',@ 1492: "               ],@ 1493: "               'parts' : [         @ 1494: "                 'appendix',@ 1495: "                 'frontmatter',@ 1496: "                 'mainmatter',@ 1497: "                 'backmatter',@ 1498: "               ],@ 1499: "             ,@ 1500: "            @ 1501: @ 1502: "  TermClose * if v:event == 12 || v:event == 0 bdelete endif@ 1503: " lua <<EOF@ 1504: " require'nvim-treesitter.configs'.setup  @ 1505: "   incremental_selection =  @ 1506: "     enable = true,@ 1507: "     keymaps =  @ 1508: "       init_selection = "gnn",@ 1509: "       node_incremental = "grn",@ 1510: "       scope_incremental = "grc",@ 1511: "       node_decremental = "grm",@ 1512: "     ,@ 1513: "   ,@ 1514: " @ 1515: " EOF@ 1516: " @ 1517: " " set foldlevel=20@ 1518: " " set foldmethod=expr@ 1519: " " set foldexpr=nvim_treesitter#foldexpr()@ 1520: " inoremap .<Esc> .<CR><Esc><leader>j@ 1521: " inoremap .<Space> .<CR><Esc><leader>j@ 1522: " noremap S :S @ 1523: "@ 1524: "@ 1525: " function! Sneak()@ 1526: "     hi! link Sneak Normal@ 1527: "     hi! link SneakScope Normal@ 1528: "     execute 'normal!  <Plug>Sneak_s'@ 1529: "     syntax on@ 1530: " endfunction@ 1531:  @ 1532: " map N <Plug>Sneak_,@ 1533: " map t <Plug>(smalls-excursion)@ 1534: " let g:smalls_auto_jump=1@ 1535: " let g:smalls_auto_jump_timeout=0@ 1536:     @ 1537: " @ 1538: " silent execute 'AsyncRun if git rev-parse --is-inside-work-tree || git rev-parse --git-dir > /dev/null 2>&1 ; then git add % ; git commit -m -a ; git push --all origin; fi'@ 1539: " let g:vimtex_view_general_options = '-r @line @pdf @@ 1540: """ pandoc backup -s html -o markdown cp backup.html %<cr>:e %<cr>:w<cr>:qa<cr>  asldkfj@ 1541: " <cr>@ 1542: " ; pandoc backup.html > backup.md; cp backup.md %<cr>:e %<cr>@ 1543: " NB: this supports "rp that replaces the selection by the contents of @r@ 1544: " Auto updating C@ 1545: " autocmd VimLeave * exe ":silent ! c -R"@ 1546: "@ 1547: "" lua << EOF@ 1548: " local function setup_servers()@ 1549: "   require'lspinstall'.setup()@ 1550: "   local servers = require'lspinstall'.installed_servers()@ 1551: "   for _, server in pairs(servers) do@ 1552: "     require'lspconfig'[server].setup capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())@ 1553: "   end@ 1554: " end@ 1555: " @ 1556: " setup_servers()@ 1557: " @ 1558: " -- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim@ 1559: " require'lspinstall'.post_install_hook = function ()@ 1560: "   setup_servers() -- reload installed servers@ 1561: "   vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server@ 1562: " end@ 1563: " EOF@ 1564: " autocmd BufReadPost * if @% !~# ' .git[ /  ]COMMIT_EDITMSG ' && line("' "") > 1 && line("' "") <= line(" ") | exe "normal! g` "" | endif@ 1565: @ 1566:       @ 1567: "other maps   @ 1568: inoremap <cr> <cr><space><esc>"_s@ 1569: nnoremap o o<space><esc>"_s@ 1570: " map cr@ 1571: " inoremap <cr> <esc> a<cr><space><esc>"_s@ 1572: " inoremap <m-cr> <cr><space><esc>"_s@ 1573: let g:neovide_fullscreen=v:true@ 1574: if exists('g:gonvim_running')@ 1575:  set guifont=Fira  Code  Light:h18@ 1576: "goneovim specific stuff@ 1577: elseif exists('g:neovide')@ 1578:    set guifont=Fira  Code:h18@ 1579: end@ 1580: nnoremap <C-c> :set hlsearch!<cr>@ 1581: xnoremap <silent> <cr> "*y:silent! let searchTerm = ' V'.substitute(escape(@*, ' /'), " n", '  n', "g") <bar> let @/ = searchTerm <bar> echo '/' .@
/ <bar> call histadd("search", searchTerm) <bar> set hls<cr>@ 1582: @ 1583: " lua <<EOF@ 1584: " -- Setup cmp .@
 1585: " -- Installation@ 1586: " use  @ 1587: "   'hrsh7th/nvim-cmp',@ 1588: "   requires =  @ 1589: "      @ 1590: "       'quangnguyen30192/cmp-nvim-tags',@ 1591: "       -- if you want the sources is available for some file types@ 1592: "       ft =  @ 1593: "         'kotlin',@ 1594: "         'java'@ 1595: "       @ 1596: "     @ 1597: "   ,@ 1598: " config = function ()@ 1599: "     require'cmp'.setup  @ 1600: "     sources =  @ 1601: "         name = 'tags' ,@ 1602: "      @ 1603: "       name = 'vsnip', keyword_length = 1000 ,@ 1604: "   name = 'tags' ,@ 1605: " -- For ultisnips user .@
 1606: "       --   name = 'ultisnips' ,  @ 1607: "   name = 'buffer', keyword_length = 1000 ,@ 1608: "   name = 'omni', keyword_length = 4,@ 1609: "        --   name = 'spell' , @ 1610: "   name = 'nvim_lsp', keyword_length = 4 ,@ 1611: "       --  name = 'treesitter', keyword_length = 4 ,@ 1612: " --  name = 'latex_symbols' ,@ 1613: " @ 1614: " @ 1615: " end@ 1616: " @ 1617: @ 1618: " test test2@ 1619: " let g:autotagTagsFile="~/workspacemodules/tags"@ 1620: " let g:autotagFile="~/workspacemodules/tags"@ 1621: " lua <<EOF@ 1622: " -- Installation@ 1623: " use   @ 1624: "   'hrsh7th/nvim-cmp',@ 1625: "   requires =  @ 1626: "      @ 1627: "       'quangnguyen30192/cmp-nvim-',@ 1628: "       -- if you want the sources is available for some file types@ 1629: "       ft =  @ 1630: "         'latex',@ 1631: "         'tex'@ 1632: "       @ 1633: "     @ 1634: "   ,@ 1635: "   config = function ()@ 1636: "     require'cmp'.setup  @ 1637: "     sources =  @ 1638: "         name = '' ,@ 1639: "       -- more sources@ 1640: "     @ 1641: "   @ 1642: "   end@ 1643: " @ 1644: " EOF@ 1645: "@ 1646: @ 1647: @ 1648: lua <<EOF@ 1649: require'nvim-treesitter.configs'.setup  @ 1650: -- ensure_installed = "all", -- one of "all", "maintained" (parsers with maintainers), or a list of languages@ 1651:   incremental_selection =  @ 1652:     enable = true,@ 1653:     keymaps =  @ 1654:       init_selection = '<m-CR>',@ 1655:       --scope_incremental = '<CR>',@ 1656:       node_incremental = '<TAB>',@ 1657:       node_decremental = '<S-TAB>',@ 1658:     ,@ 1659:   ,@ 1660:   highlight =  @ 1661:     enable = true,              -- false will disable the whole extension@ 1662:     -- Instead of true it can also be a list of languages@ 1663:     additional_vim_regex_highlighting = false,@ 1664:   ,@ 1665: @ 1666: EOF@ 1667: @ 1668: lua <<EOF@ 1669: require('leap').setup  @ 1670:   max_aot_targets = nil,@ 1671:   highlight_unlabeled = false,@ 1672:   max_highlighted_traversal_targets = 10,@ 1673:   case_sensitive = false,@ 1674:   -- Sets of characters that should match each other .@
 1675:   -- Obvious candidates are braces and quotes ('([ ', ')]', '`" '') .@
 1676:   equivalence_classes = @ 1677:    @ 1678:       ' r n',@ 1679:       ')]>',@ 1680:       '([ <',@ 1681:         '"', "'", '`' ,@ 1682:       -- ' ', 'm',@ 1683:        '?', '|', '!', '*', '+', '-', '`',' '','  ', ' n', ' r', ',', '.',';', ']', '[', '', ' ', ')', '(', ' '@ 1684:     ,@ 1685:   -- Leaving the]  appropriate list emapty effectively disables "smart" mode,@ 1686:   -- and forces auto-jump to be on or off .@
 1687:   @ 1688: @ 1689: EOF@ 1690: @ 1691: set autoindent@ 1692: @
